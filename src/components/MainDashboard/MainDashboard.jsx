// üíôüíõ Kostiantyn Koshyk
import { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useCustomContext } from '../Context/Context'; 
import {
  addColumn,
  editColumn,
  deleteColumn,
  addTask,
  updateTask 
} from 'redux/board/boardOperations';
import { useAuth, useBoards } from 'hooks';
import { Filters } from './Filters';
import { DropWrapper } from './DropWrapper'; // dnd
import { BtnAddColumn } from './BtnAddColumn';
import { TitleCards } from './TitleCards';
import { TasksList } from 'components/TasksList';
import { BtnAddCard } from './BtnAddCard';
import { Modal } from '../Modal/Modal';
import { AddCard } from 'components/AddCard/AddCard';
import { PopColumn } from '../PopColumn/PopColumn';
import Loader from 'components/Loader/Loader';
import { imagesBg } from 'images/image-url';
import styles from 'styles/index.module.scss';


export const MainDashboard = () => {
  const { boardById, isLoading } = useBoards();
  const { loading } = useAuth();
  const dispatch = useDispatch();
  const [isModalAddOpen, setIsModalAddOpen] = useState(false);
  const [isModalEditOpen, setIsModalEditOpen] = useState(false);
  const [isModalAddCardOpen, setIsModalAddCardOpen] = useState(false);
  const [activeColumnId, setActiveColumnId] = useState('');
  const [titleColumnId, setTitleColumnId] = useState('');
  const [reoderedCardsIds, setReoderedCardsIds] = useState({});
  const context = useCustomContext();

  const bg = imagesBg?.find(image => image.name === boardById.background);

  const containerStyle = {
    backgroundImage: `url(${bg?.mobile})`,
    backgroundSize: 'cover',
    backgroundRepeat: 'no-repeat',
    backgroundPosition: 'center',
  };

  if (window.innerWidth >= 768) {
    containerStyle.backgroundImage = `url(${bg?.tablet})`;
  }

  if (window.innerWidth >= 1440) {
    containerStyle.backgroundImage = `url(${bg?.desktop})`;
  }

  //------------------- dnd (–ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –º—ñ–∂ –∫–æ–ª–æ–Ω–∫–∞–º–∏) -------------------------

  const onDrop = (cardToDrop, monitor, board, taskOwner, columnTitle, tasks, taskOrder, columnIndex) => { // –≤–∏–∫–ª–∏–∫ —Ñ-—Ü—ñ—ó –≤ DropWrapper
    // tasks - —Ç–∞—Å–∫–∏ –∫–æ–ª–æ–Ω–∫–∏, –≤ —è–∫—É –∫–∏–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É 
    // taskOwner - id –∫–æ–ª–æ–Ω–∫–∏, –≤ —è–∫—É –∫–∏–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É  

    // –≤–∏–∑–Ω–∞—á–∏–º–æ —á–∏ –∫–∏–¥–∞—î–º–æ —Ç–∞—Å–∫—É –≤ —á—É–∂—É –∫–æ–ª–æ–Ω–∫—É —á–∏ —Å–≤–æ—é
    const card = tasks.filter(task => task._id === cardToDrop.idTask); // –∫–∏–¥–∞—é—á–∏ –≤ —ñ–Ω—à—É –∫–æ–ª–æ–Ω–∫—É –º–∞—î –±—É—Ç–∏ false - –ø–æ–≤–µ—Ä–Ω–µ []
    //true –æ—Ç—Ä–∏–º–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–∏–Ω—É–≤—à–∏ –∫–∞—Ä—Ç–∫—É –≤ –∫–æ–ª–æ–Ω–∫—É, –≤ —è–∫—ñ–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Ü—è –∫–∞—Ä—Ç–∫–∞ - –ø–æ–≤–µ—Ä–Ω–µ [{–∫–∞—Ä—Ç–∫–∞, —è–∫—É –∫–∏–¥–∞—î–º–æ}] 

    if(card.length === 0) { // true (—Ç–µ, —â–æ —Ç—Ä–µ–±–∞) - –∫–æ–ª–∏ —Ç–∞—Å–∫–∞ –ø–µ—Ä–µ–∫–∏–¥—É—î—Ç—å—Å—è –≤ —ñ–Ω—à—É –∫–æ–ª–æ–Ω–∫—É
      // –ø–æ–∑–±–∞–≤–ª—è—î–º–æ—Å—è –∫–∞—Ä—Ç–∫–∏ –≤ —ó—ó —Ä—ñ–¥–Ω—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ
      const prevCardId = cardToDrop.idTask;
      removePrevId(prevCardId);
      
      cardToDrop.taskOwner = taskOwner; // –ø—Ä–∏—Å–≤–æ—ó–ª–∏ –∫–∞—Ä—Ç—Ü—ñ, —è–∫—É –∫–∏–¥–∞—î–º–æ –Ω–æ–≤–∏–π id –∫–æ–ª–æ–Ω–∫–∏

      dispatch(updateTask({ ...cardToDrop, boardId: board, columnIndex })); // –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –æ–±'—î–∫—Ç—É –∫–∞—Ä—Ç–∫–∏, —è–∫—É –ø–µ—Ä–µ—Ç—è–≥—É—î–º–æ
      if(reoderedCardsIds._id === taskOwner) {
          dispatch(editColumn({ idColumn: taskOwner, title: columnTitle, taskOrder: reoderedCardsIds.taskOrder })); 
      }
    } 
  };

  // –æ–Ω–æ–≤–ª—é—î–º–æ taskOrder –≤ –∫–æ–ª–æ–Ω—Ü—ñ, –∑–≤—ñ–¥–∫–∏ –∑–∞–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç–∫—É
  const removePrevId = (prevCardId) => {
    context.columns.forEach(column => {
        const updatedTaskOrder = column.taskOrder.filter(id => id !== prevCardId); // taskOrder –±–µ–∑ –ª–∏—à–Ω—å–æ–≥–æ id // –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–æ–≤–∏–π –º–∞—Å–∏–≤ –∞–±–æ []

        if(updatedTaskOrder.length !== column.taskOrder.length) { // –ø–æ–¥–∞–ª—å—à—ñ –∑–º—ñ–Ω–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è taskOrder —Ç—ñ—î—ó –∫–æ–ª–æ–Ω–∫–∏, –≤ —è–∫—ñ–π —î –ª–∏—à–Ω—ñ–π id 
          dispatch(editColumn({ idColumn: column._id, title: column.title, taskOrder: updatedTaskOrder }));          
        }
    });
  };

  return (
    <div className={styles.KkSectionMainDashboard} style={containerStyle}>
      {isLoading && loading && <Loader />}
      <Filters className={styles.KkFilters} />
        <ul className={styles.KkColums}>
          {context.columns &&
            context.columns.map(({ board, _id, title, tasks, taskOrder }, index) => (
              <li key={_id}>
                <DropWrapper 
                  onDrop={onDrop} 
                  board={board} 
                  taskOwner={_id} 
                  columnTitle={title} 
                  tasks={tasks} 
                  taskOrder={taskOrder} 
                  columns={context.columns} 
                  columnIndex={index}
                >
                  <TitleCards
                    className={styles.TitleCards}
                    title={title}
                    onEdit={() => {
                      setIsModalEditOpen(true);
                      setActiveColumnId(_id);
                      setTitleColumnId(title);
                    }}
                    onTrash={() => dispatch(deleteColumn(_id))}
                  />
                  {tasks && 
                    <TasksList 
                      tasks={tasks} 
                      idColumn={_id} 
                      columnTitle={title} 
                      board={board}
                      getReoderedCardsIds={setReoderedCardsIds}
                    />
                  }
                  <BtnAddCard
                    className={styles.KkBtnAddCard}
                    title={'Add another card'}
                    theme={'light'}
                    onClick={() => {
                      setIsModalAddCardOpen(true);
                      setActiveColumnId(_id);
                    }}
                  />
                </DropWrapper>
              </li>
            ))}
             <BtnAddColumn
                className={styles.KkBtnAddColumnMain}
                title={'Add another column'}
                theme={'light'}
                onClick={() => setIsModalAddOpen(true)}
            />
        </ul>       
      {isModalAddOpen && (
        <Modal isOpen={isModalAddOpen} onClose={() => setIsModalAddOpen(false)}>
          <PopColumn
            modalTitle={'Add column'}
            modalBtnTitle={'Add'}
            onClose={() => setIsModalAddOpen(false)}
            operation={addColumn}
          />
        </Modal>
      )}
      {isModalEditOpen && (
        <Modal isOpen={isModalEditOpen} onClose={() => setIsModalEditOpen(false)}>
          <PopColumn
            modalTitle={'Edit column'}
            modalBtnTitle={'Add'}
            onClose={() => setIsModalEditOpen(false)}
            idColumn={activeColumnId}
            infoData={{ title: titleColumnId }}
            operation={editColumn}
          />
        </Modal>
      )}
      {isModalAddCardOpen && (
        <Modal isOpen={isModalAddCardOpen} onClose={() => setIsModalAddCardOpen(false)}>
          <AddCard
            modalTitle={'Add card'}
            modalBtnTitle={'Add'}
            onClose={() => setIsModalAddCardOpen(false)}
            idColumn={activeColumnId}
            operation={addTask}
          />
        </Modal>
      )}
    </div>
  );
};
