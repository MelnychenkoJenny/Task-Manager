{"version":3,"file":"static/js/146.5e322857.chunk.js","mappings":"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","sources":["redux/board/boardSelectors.js","components/Home/testAddBoard.jsx","components/Home/Home.jsx","components/Header/Header.jsx","components/Sidebar/Sidebar.jsx","pages/HomePage.jsx"],"sourcesContent":["export const selectBoards = state => state.board.allBoards;","import styles from 'styles/index.module.scss';\n// import authOperations from 'redux/auth/authOperations';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n// import { useDispatch } from 'react-redux';\nimport { object, string } from 'yup';\n\nconst initialValues = {\n  title: '',\n  icon: '',\n  background: '',\n};\n\n\n\nconst boardSchema = object({\n    title: string().required('Name is required'),\n    icon: string(),\n    background: string(),\n});\n\nconst AddBoard = () => {\n//   const dispatch = useDispatch();\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const dataBoard = { ...values };\nconsole.log(dataBoard)\n    // const res = await dispatch(authOperations.userRegistration(dataRegister));\n    // if (res.error) {\n    //   console.log(res.payload);\n    // }\n    resetForm();\n  };\n\n  return (\n    <Formik\n      validationSchema={boardSchema}\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n    >\n      {({ handleChange, values }) => (\n        <Form className={styles.AfWelcomRegForm}>\n          <div className={styles.AfWelcomRegFormInCn}>\n            <div className={styles.AfWelcomRegFormWrInp}>\n              <Field\n                autoFocus\n                className={styles.AfWelcomRegFormInput}\n                type=\"text\"\n                name=\"title\"\n                placeholder=\"Title\"\n                onChange={handleChange('title')}\n                value={values.title || ''}\n                required\n              />\n            </div>\n            <div className={styles.AfWelcomRegFormWrInp}>\n              <Field\n                className={styles.AfWelcomRegFormInput}\n                type=\"text\"\n                name=\"icon\"\n                placeholder=\"Icon\"\n                onChange={handleChange('icon')}\n                value={values.icon || ''}\n                \n              />\n            </div>\n            <div className={styles.AfWelcomRegFormWrInp}>\n              <Field\n                className={styles.AfWelcomRegFormInput}\n                type=\"text\"\n                name=\"background\"\n                placeholder=\"background\"\n                onChange={handleChange('background')}\n                value={values.background || ''}\n                \n              />\n            </div>\n          </div>\n          <ErrorMessage\n            className={styles.AfWelcomRegFormError}\n            name=\"password\"\n            component=\"div\"\n          />\n          <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n            Add new board\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\nexport default AddBoard;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from 'styles/index.module.scss';\nimport { getAllBoards } from 'redux/board/boardOperations';\nimport { selectBoards } from 'redux/board/boardSelectors';\nimport AddBoard from './testAddBoard';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n  const allBoards = useSelector(selectBoards);\n  console.log(allBoards);\n  return (\n    <section className={styles.AfWelcomReg}>\n      <div className={styles.AfWelcomRegWr}>\n        <h1>Task component</h1>\n        <AddBoard></AddBoard>\n      </div>\n    </section>\n  );\n};\nexport default Home;\n","import scss from '../../styles/index.module.scss';\nimport sprite from '../../images/sprite.svg';\n\n\nconst Header = ({click}) => {\n\n    return (\n        <div className={scss.headerWrap}>\n                <button type=\"button\" onClick={click} className={scss.btnSideBarOpen}>\n                    <svg className={scss.svgSideBarOpen} width=\"24\" height=\"24\">\n                        <use href={`${sprite}#icon-menu`}></use>\n                    </svg>\n                </button>\n            <div className={scss.headerTextWrap}>\n                <span className={scss.themeWrap}>\n                    <p className={scss.themeText}>Theme</p>\n                    {/* Вставити компонент з темою */}\n                    <span>\n                        <svg className={scss.svgTheme} width=\"16\" height=\"16\">\n                            <use href={`${sprite}#icon-chevron-down`}></use>\n                        </svg>\n                    </span>\n                </span>\n                <ul className={scss.headerUserInfoWrap}>\n                    <li className={scss.headerUserName}>UserName</li>\n                    <li className={scss.headerAvatar}></li>\n                </ul>\n                \n            </div>\n        </div>     \n    )\n}\n\nexport default Header;\n","import scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nconst Sidebar = () => {\n  \n   return (\n      <div  className={scss.sidebarWrap}>\n      <div className={scss.sidebar}>\n         <div className={scss.sbHeader}>\n            <svg\n            width=\"32px\"\n            height=\"32px\"\n            className={scss.sbLogo}\n            >\n               <use href={`${SvgSprite}#icon-logo`}></use>\n            </svg>\n            <h2 className={scss.sbTitle}>Task Pro</h2>\n         </div>\n      <h3 className={scss.sbSubtitle}>My boards</h3> \n      <div className={scss.sbBoards}>\n         <div className={scss.sbCreateBoardBlock}>\n            <span className={scss.sbCreateBoardText}>Create a <br></br> new board</span>\n            <button className={scss.sbCreateBoardButton}>\n               <svg\n               width=\"20px\"\n               height=\"20px\"\n                        className={scss.sbCreateBoardLogo}>\n                  <use href={`${SvgSprite}#icon-plus`}></use>\n                  </svg>\n               </button>               \n            </div>\n         </div>\n               <div>Тут буде елемент зі списком створених дошок</div>\n            <div className={scss.sbHelp}>\n               <div className={scss.sbHelpPngCactus}></div>\n               <p className={scss.sbHelpText}>If you need help with\n                  <span className={scss.cbTaskProSpan}> TaskPro</span>,\n                  check out our support resources or reach out to our customer support team.</p>\n               <button className={scss.sbHelpButton}>\n                  <svg\n                     width=\"20px\"\n                     height=\"20px\"\n                     className={scss.sbNeedhelpSvg}>\n                  <use href={`${SvgSprite}#icon-help-circle`}></use>\n                  </svg> <span className={scss.sbNeedHelpButtonText}>Need help?</span></button>\n            </div>\n            <button className={scss.sbLogoutButton}>\n               <svg\n                     width=\"32px\"\n                     height=\"32px\"\n                     className={scss.sbLogoutSvg}>\n                  <use href={`${SvgSprite}#icon-logout`}></use>\n                  </svg> <span className={scss.sbLogoutText}>Log out</span></button>\n         </div>\n         </div>\n);\n};\n\nexport default Sidebar;","import Home from 'components/Home/Home';\nimport Header from 'components/Header/Header.jsx';\nimport { useState, useEffect} from 'react';\nimport Sidebar from 'components/Sidebar/Sidebar';\n\nconst HomePage = () => {\n\n  const [menuActive, setMenuActive] = useState(false);\n  \n\n  useEffect(() => {\n    const hendleEscClose  = event => {\n      if (event.code === 'Escape' && window.innerWidth <= 1439) {\n        setMenuActive(false);\n      }\n    };\n\n    window.addEventListener('keydown', hendleEscClose);\n\n    return () => {\n      window.removeEventListener('keydown', hendleEscClose);\n    };\n\n  }, [menuActive, setMenuActive]);\n\n\n  useEffect(() => {\n    const handleMinXlSize = () => {\n      if (window.innerWidth >= 1440) {\n        setMenuActive(true);\n      } else {\n        setMenuActive(false);\n      }\n    };\n\n    handleMinXlSize();\n\n    window.addEventListener('resize', handleMinXlSize);\n\n    return () => {\n      window.removeEventListener('resize', handleMinXlSize);\n    };\n  }, [setMenuActive]);\n\n\n  const handleClick = () => {\n    setMenuActive(!menuActive);\n  }; \n\n  \n  const hendleBackdropClose = event => {\n    if (event.target === event.currentTarget && window.innerWidth <= 1439) {\n      setMenuActive(false);\n    }\n  };\n\n  return (\n    <>\n      <div onClick={hendleBackdropClose}>\n      <Header click={handleClick}/>\n      <Home />\n        {menuActive && <Sidebar />}\n        </div>\n    </>     \n  )\n};\nexport default HomePage;\n"],"names":["selectBoards","state","board","allBoards","initialValues","title","icon","background","boardSchema","object","string","required","handleSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_ref","resetForm","dataBoard","wrap","_context","prev","next","_objectSpread","console","log","stop","_x","_x2","apply","arguments","_jsx","Formik","validationSchema","onSubmit","children","_ref3","handleChange","_jsxs","Form","className","styles","Field","autoFocus","type","name","placeholder","onChange","value","ErrorMessage","component","dispatch","useDispatch","useEffect","getAllBoards","useSelector","AddBoard","click","scss","onClick","width","height","href","concat","sprite","SvgSprite","_useState","useState","_useState2","_slicedToArray","menuActive","setMenuActive","hendleEscClose","event","code","window","innerWidth","addEventListener","removeEventListener","handleMinXlSize","_Fragment","target","currentTarget","Header","Home","Sidebar"],"sourceRoot":""}