{"version":3,"file":"static/js/334.12b50cb5.chunk.js","mappings":"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","sources":["components/AddCard/RadioBtns.jsx","components/MainDashboard/Filters.jsx","components/MainDashboard/items.js","components/MainDashboard/DropWrapper.jsx","components/MainDashboard/BtnAddColumn.jsx","components/MainDashboard/TitleCards.jsx","components/AddCard/Calendar.jsx","components/AddCard/AddCard.jsx","components/Card/Card.jsx","components/TasksList/TasksList.jsx","components/MainDashboard/BtnAddCard.jsx","components/PopColumn/PopColumn.jsx","components/MainDashboard/MainDashboard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport scss from 'styles/index.module.scss';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { FormControlLabel, Typography, Radio } from '@mui/material';\nimport { useAuth } from 'hooks';\nimport { useBoards } from 'hooks';\nimport { useDispatch } from 'react-redux';\nimport { setPriorityFilter } from 'redux/filter/filterSlice';\n\nexport const RadioBtns = ({ parentComponent, priority }) => {  // встановлена раніше та передана сюди пріоритетність для дефолтного стану (у подальшому підлягає редагуванню)\n   const dispatch = useDispatch();\n  const { filter } = useBoards();\n    const { user } = useAuth();\n    const [selectedPriorityFilter, setSelectedPriorityFilter] = useState(filter);\n  const [selectedPriority, setSelectedPriority] = useState(\n    parentComponent === 'FiltersModal'\n      ? 'none'\n      : priority\n      ? priority\n      : 'without'\n  );  \n  \nuseEffect(() => {\n    dispatch(setPriorityFilter(selectedPriorityFilter));\n  }, [dispatch, selectedPriorityFilter]);\n\n\n  const controlProps = item => ({\n    // low, medium, high, without\n    value: item,\n    onChange:\n      parentComponent === 'FiltersModal'\n        ? e => setSelectedPriorityFilter(e.target.value)\n        : e => setSelectedPriority(e.target.value),\n    checked:\n      parentComponent === 'FiltersModal'\n        ? selectedPriorityFilter === item\n        : selectedPriority === item,\n    name: 'priority',\n    inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = \n    parentComponent === 'FiltersModal' \n    ? {\n        without: grey[400],  \n        low: indigo[200],\n        medium: pink[200],\n        high: lightGreen[200],    \n      }\n    :\n      {\n        low: indigo[200],\n        medium: pink[200],\n        high: lightGreen[200],\n        without: grey[400],      \n      }\n\n  function capitalizeFirstLetter(priority) {\n    return priority.charAt(0).toUpperCase() + priority.slice(1);\n  }\n\n  return (\n    <div>\n      <h3 className={scss.OBFiltersModalLabel}>Label color</h3>\n      <div className={ `${parentComponent === 'FiltersModal' ? scss.OBFiltersModalRadioGroupV : scss.OBFiltersModalRadioGroupH }`}>\n        {Object.keys(priorityStyles).map((priority) => (       //['low', 'medium', 'high', 'without'])\n          <FormControlLabel\n            key={priority}\n            label={ parentComponent === 'FiltersModal' \n              ? (\n                  <Typography \n                    style={{\n                      fontSize: '12px', \n                      fontFamily: 'Poppins, sans-serif', \n                      color: user.theme === 'dark' ? 'rgba(255, 255, 255, 0.50)' : 'rgba(22, 22, 22, 0.50)',\n                    }}\n                    sx={{\n                      '&.Mui-checked': {\n                        color: priorityStyles[priority], // Change label text color when checked\n                      },\n                    }}\n                  >\n                    {priority === 'without' ? 'Without priority' : capitalizeFirstLetter(priority)}\n                  </Typography>\n              ) \n              : null\n            }\n            // labelPlacement={ parentComponent === 'FiltersModal' ? \"end\" : null }\n            className={ parentComponent === 'FiltersModal' ? scss.OBFiltersModalRadioLabelV : scss.OBFiltersModalRadioLabelH}\n            control={\n              <Radio \n                className={scss.OBFiltersModalRadioBtn}\n                {...controlProps(priority)}\n                sx={{\n                  color: priorityStyles[priority],\n                  '&.Mui-checked': {\n                    color: priorityStyles[priority],\n                  },\n                  '&.Mui-checked .MuiSvgIcon-root': {\n                    fontSize: '17px',\n                  },\n                  '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                    fontSize: '14px',\n                    backgroundColor: priorityStyles[priority],\n                    borderRadius: '50%',\n                  },\n                }}\n              />\n            }\n          />\n        ))}\n      </div>\n  </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport { useState, useEffect } from 'react';\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useBoards } from 'hooks';\nimport { RadioBtns } from '../AddCard/RadioBtns';\nimport { useAuth } from 'hooks';\n\nimport { useDispatch } from 'react-redux';\nimport { setPriorityFilter } from 'redux/filter/filterSlice';\n\nexport const Filters = ({ className }) => {\n  const dispatch = useDispatch();\n  const [isFilterVisible, setIsFilterVisible] = useState(false);\n  const { boardById } = useBoards();\n  const { user } = useAuth();\n\n  const handleShowAll = () => {\n    dispatch(setPriorityFilter('all'));\n  };\n\n  const onOpenFilter = () => {\n    setIsFilterVisible(true);\n  };\n  const onCloseFilter = () => {\n    setIsFilterVisible(false);\n  };\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        setIsFilterVisible(false);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isFilterVisible]);\n\n  return (\n    <div\n      className={`${className} ${styles.OBFilterModalContainer}`}\n      data-theme={user.theme}\n      style={{ display: 'flex', justifyContent: 'space-between', position: 'relative'}}\n    >\n      {/* <div className={styles.KkWrapFilters}> */}\n      <h2\n        className={styles.KkTitle}\n        style={{ padding: !boardById.background && '4px' }}\n      >\n        {boardById.title}\n      </h2>\n      {/* <h2 className={styles.KkTitle}>{boardById.title}</h2> */}\n\n      <button\n        type=\"button\"\n        className={styles.KkBtnFilters}\n        onClick={onOpenFilter}\n      >\n        <svg width=\"16px\" height=\"16px\">\n          <use href={`${SvgSprite}#icon-filter`}></use>\n        </svg>\n        <p>Filters</p>\n      </button>\n\n      {isFilterVisible && (\n        <div\n          className={styles.OBFiltersModalContainer}\n          style={{ opacity: isFilterVisible ? 1 : 0 }}\n          data-theme={user.theme}\n        >\n          <button\n            type=\"button\"\n            className={styles.OBFilterBtnIcon}\n            aria-label=\"close\"\n            onClick={onCloseFilter}\n          >\n            <svg width=\"18\" height=\"18\">\n              <use className=\"icon\" href={SvgSprite + '#icon-close'} />\n            </svg>\n          </button>\n          <h4 className={styles.OBFiltersModalTitle}>Filters</h4>\n          <hr className={styles.OBFiltersModalSeparator} />\n          <div className={styles.OBFiltersModalContent}>\n            <RadioBtns parentComponent={'FiltersModal'} />\n            <p className={styles.OBFiltersModalShow} onClick={handleShowAll}>\n              Show all\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n    // </div>\n  );\n};\n","export const ItemTypes = { // dnd\n    CARD: 'card',\n};","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./items\";\n\n\nexport const DropWrapper = ({ onDrop, board, taskOwner, columnTitle, tasks, taskOrder, columns, columnIndex, children }) => { \n    \n//------------------- dnd (перетягування картки між колонками) -------------------------\n    const [{ isOver, canDrop }, drop] = useDrop({\n        accept: ItemTypes.CARD,\n        canDrop: (item, monitor) => {\n            // знаходимо індекс колонки, з якої тягнемо\n            const columnIndexWithItem = columns.findIndex(column => column._id === item.taskOwner); // індекс або \"-1\"\n            return [columnIndexWithItem + 1, columnIndexWithItem - 1, columnIndexWithItem].includes(columnIndex); \n        },\n\n        // тут без hover, інакше виконуватиметься на кожному міліметрі будь-якої колонки, тому що ref на колонці, а не на тасці\n        drop: (item, monitor) => {\n            onDrop(item, monitor, board, taskOwner, columnTitle, tasks, taskOrder, columnIndex); // ф-ція onDrop знаходиться в MainDashboard \n            // в tasks потрапляють таски тільки тієї колонки, на яку ми кидаємо картку \n            // в columnId потрапляє id тільки тієї колонки, на яку ми кидаємо картку \n        },  \n        collect: monitor => ({\n            isOver: monitor.isOver(),\n            canDrop: !!monitor.canDrop()\n        })\n    });\n    \n    return (\n        <div ref={drop}>\n            <div \n                style={{ \n                    backgroundColor: isOver && canDrop ? 'rgba(43, 255, 0, 0.075)' : isOver && !canDrop ? 'rgba(233, 14, 14, 0.178)' : 'initial', \n                    borderRadius: '8px', \n                    transition: '250ms cubic-bezier(0.4, 0, 0.2, 1) 0s'\n                }}>\n                {children} \n            </div>\n        </div>\n    )\n};","// 💙💛 Kostiantyn Koshyk\r\nimport styles from 'styles/index.module.scss';\r\nimport SvgSprite from 'images/sprite.svg';\r\nimport clsx from 'clsx';\r\n\r\nexport const BtnAddColumn = ({ className, title, theme, onClick }) => {\r\n  return (\r\n    <li className={className}>\r\n      <button\r\n        className={clsx(styles.KkBtnColumn, styles[theme])}\r\n        onClick={onClick}\r\n      >\r\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\r\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\r\n            <use href={`${SvgSprite}#icon-plus`}></use>\r\n          </svg>\r\n        </div>\r\n        <p className={clsx(styles[theme])}>{title}</p>\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n// import { cleanDigitSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\n\nexport const TitleCards = ({ className, title, theme, onEdit, onTrash }) => {\n  // const onIconPensil = () => {\n  //   console.log('icon pensil click');\n  // };\n\n  // const onIconTrash = () => {\n  //   console.log('icon trash click');\n  // };\n\n  return (\n    <div className={className}>\n      <div className={clsx(styles.KkWrapTitleCards, styles[theme])}>\n        <p className={clsx(styles[theme])}> {title}</p>\n        <div className={styles.KkSvgTitleCards}>\n          <button className={styles.KkBtnIcons} onClick={onEdit}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-pencil`}></use>\n            </svg>\n          </button>\n\n          <button className={styles.KkBtnIcons} onClick={onTrash}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-trash`}></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport scss from '../../styles/index.module.scss';\nimport SvgSprite from '../../images/sprite.svg';\nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { InputAdornment } from '@mui/material';\nimport { useAuth } from 'hooks';\n\n\n\n\nexport const Calendar = ({ deadline, onFormatDeadline }) => { // deadline з AddCard\n  const { user } = useAuth();\n  const [inputWidth, setInputWidth] = useState('auto');\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(\n  deadline ? dayjs(deadline, 'DD/MM/YYYY') : dayjs()\n  ); // dayjs() - currentDate\n\n    //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  // deadline ? dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\") : dayjs()\n\n  // console.log(deadline) //01/09/2023\n  // console.log(dayjs(deadline)) // M {... Mon Jan 09 2023 00:00:00 ...} - міняє день і місяць місцями\n  // console.log(dayjs(deadline, 'DD/MM/YYYY')); // M {... Fri Sep 01 2023 00:00:00 ...} - тепер все Ок\n  // Тепер бібліотека Material UA застосує формат \"dddd, MMMM D\" і отримаємо те, що треба:\n  // console.log(dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\")); // Thursday, August 31\n\n  // \"Today, September 01\" або \"Saturday, September 02\"\n  const dateFormat =\n    dayjs(selectedDate).format('dddd, MMMM D') ===\n    dayjs().format('dddd, MMMM D')\n      ? '[Today,] MMMM D'\n      : 'dddd, MMMM D';\n\n  //------------------ Ширина інпута DatePicker---------------------\n  useEffect(() => {\n    const contentWidth = selectedDate.format(dateFormat).length * 9;\n    setInputWidth(`${contentWidth}px`);\n  }, [selectedDate, dateFormat]);\n\n  //-----------------Передача даних в AddCard-----------------------\n  useEffect(() => {\n    const formatedSelectedDate = dayjs(selectedDate).format('DD/MM/YYYY'); // 29/11/2023\n    onFormatDeadline && onFormatDeadline(formatedSelectedDate);\n  }, [selectedDate, onFormatDeadline]);\n\n//--------------------Створення теми--------------------------------\n\n  const theme = createTheme({\n    typography: {\n      fontFamily: ['Poppins', 'sans-serif'].join(','), // інпут\n    },\n    components: {\n      MuiPaper: { // полотно календаря\n        styleOverrides: {\n          root: {\n            position: 'relative',\n            width: '233px',\n            height: '254px',\n            padding: '18px',\n            background: user.theme === 'dark' ? '#1F1F1F' : '#FFF',\n            border: '1px solid',\n            borderRadius: '8px',\n            borderColor: user.theme === 'violet' ? '#585bbe' : '#bedfad',\n          },\n        },\n      },\n      MuiPickersDay: { // усі дні\n        styleOverrides: {\n            root: {\n                width: '23px',\n                height: '23px',\n                fontSize: '14px',\n                fontweight: '400',\n                lineHeight: '18px',\n                '&:hover': {\n                    backgroundColor: user.theme === 'violet' ? '#8d8fc9' : '#9fd186',\n                },\n            },\n            dayOutsideMonth: { // місяць\n              color: user.theme === 'dark' ? '#FFF' : '#161616',  \n            },\n            dayWithMargin: {// видимі дати за межами місяця\n              color: user.theme === 'dark' ? 'rgba(255, 255, 255, 0.20)' : 'rgba(22, 22, 22, 0.20)',   \n              '&.Mui-disabled:not(.Mui-selected)': { // минулі дати, які не можна обрати\n                color: user.theme === 'dark' ? 'rgba(255, 255, 255, 0.20)' : 'rgba(22, 22, 22, 0.20)',\n              }, \n            },  \n        },\n      },\n      MuiPickersLayout: { // полотно календаря без падінгів\n        styleOverrides: {\n            root: {\n                width: '197px',\n            },\n        },\n      },\n      MuiDateCalendar: {   // полотно календаря без падінгів\n        styleOverrides: {\n            root: {\n                width: '197px',\n            },\n        },\n     },\n     MuiPickersFadeTransitionGroup: {\n        styleOverrides: {\n            root: {\n                color: '#161616',\n                fontFamily: 'Poppins, sans-serif',\n                fontSize: '16px',\n                fontWeight: 500,\n                letterSpacing: '-0.32px',\n            },\n        },\n     },\n     MuiDayCalendar: {\n      styleOverrides: {\n        slideTransition: {\n          minHeight: '155px', // обмежуємо висоту полотна календаря\n        },\n        header: { \n          marginTop: '14px',  // висота лінійки з днями тижня\n        },\n        weekDayLabel: {\n          height: '23px',  // висота кожного дня тижня\n          width: '23px',\n          color: user.theme === 'dark' ? 'rgba(255, 255, 255, 0.50)' : 'rgba(22, 22, 22, 0.50)',    // rgba(255, 255, 255, 0.50);\n          fontFamily: 'Poppins, sans-serif',\n          fontSize: '14px',\n          fontWeight: 500,\n          lineHeight: 'normal',\n          letterSpacing: '-0.28px',\n        },\n      },\n     },   \n     MuiPickersCalendarHeader: {   \n        styleOverrides: {\n            root: {\n                padding: 0,\n                margin: 0,\n                borderBottom: '1px solid',\n                borderBottomColor: user.theme === 'dark' ? 'rgba(255, 255, 255, 0.20)' : 'rgba(22, 22, 22, 0.20)',\n            },\n            label: {\n                margin: 0,\n                paddingBottom: '14px',\n                color: user.theme === 'dark' ? '#FFF' : '#161616',\n            },\n            labelContainer: {\n                marginRight: 'auto',\n                marginLeft: 'auto',\n            },\n        },\n     },\n     MuiPickersArrowSwitcher: {\n        styleOverrides: {\n          spacer: {\n            width: 0,\n          },\n        },\n     },\n    },\n    palette: {\n      primary: {\n        main: '#BEDBB0', // без цього не працює\n        dark: user.theme === 'violet' ? '#8d8fc9' : '#9fd186', // обраний колір дня\n      },\n    },\n  });\n\n\n  return (\n    <div>\n    <LocalizationProvider dateAdapter={AdapterDayjs}> {/* dateAdapter={AdapterDayjs} - вказуємо, що під капотом використовуємо бібліотеку Day.js (її методи) */}\n      <ThemeProvider theme={theme}>\n        <DatePicker\n          open={isCalendarOpen}\n          onClose={() => setIsCalendarOpen(false)} // закриття календаря\n          onChange={date => setSelectedDate(date)} //Material UA в date записує обрану з календаря дату\n          // M {$L: 'en', $u: undefined, $d: Fri Sep 01 2023 09:13:29 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n          value={selectedDate}\n          format={dateFormat} // приймає рядок\n          disablePast={true} // минулі дати не обируться\n          dayOfWeekFormatter={day => day.slice(0, 2)}// видимі перші 2 літери назви дня тижня          \n          showDaysOutsideCurrentMonth\n          slots={{\n            openPickerButton: () => null, \n          }}\n          slotProps={{\n            switchViewButton: { sx: { display: 'none' } }, // стрілка вниз поряд з місяцем і роком\n            previousIconButton: {   // кнопка <\n                sx: {\n                  position: 'absolute',\n                  top: '5px',\n                  left: '5px',\n                  size: 'small',\n                  color: user.theme === 'violet' ? '#5255BC' : '#BEDBB0',  // серединка\n                  stroke: 'none', // обводка\n                },\n            },\n            nextIconButton: {  // кнопка >\n                sx: {\n                  position: 'absolute',\n                  top: '5px',\n                  right: '5px',\n                  color: user.theme === 'violet' ? '#5255BC' : '#BEDBB0',  // серединка\n                  stroke: 'none', // обводка\n                },\n            },\n            textField: {\n              fullWidth: false,\n              onClick: () => setIsCalendarOpen(true), // інпут стає клікабельним; по кліку відкривається календар (picker)\n              variant: 'standard',\n              size: 'small',\n              sx: {\n                width: inputWidth,\n                minWidth: '130px',\n              },\n              InputProps: {\n                disableUnderline: true, // прибирає дефолтний нижній бордер\n                'aria-label': 'deadline',\n                style: {\n                  fontSize: '14px',\n                  fontFamily: 'Poppins, sans-serif',\n                  color: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', // колір тексту\n                  fontWeight: 500,\n                },\n                endAdornment: (  // розташування іконки - в кінці інпуту (є і startAdornment)\n                  <InputAdornment\n                    position=\"start\"\n                    sx={{ cursor: 'pointer' }}\n                  >\n                    <svg className={scss.OBAddDateIcon} width=\"18px\">\n                      <use\n                        href={SvgSprite + '#icon-chevron-down'} // стрілка вниз в календарі\n                        aria-label=\"open calendar\"\n                        edge=\"start\"\n                      />\n                    </svg>\n                  </InputAdornment>\n                ),\n              },\n            },\n          }}\n        />\n      </ThemeProvider>\n      </LocalizationProvider>\n    </div>\n  );\n};\n\n\n\n\n\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useAuth } from 'hooks';\nimport { useParams } from 'react-router-dom';\nimport { RadioBtns } from './RadioBtns';\nimport { Calendar } from './Calendar';\n\nexport const AddCard = ({\n  modalTitle,\n  modalBtnTitle,\n  idColumn, // тут і нижче для редагування\n  id,\n  cardTitle,\n  description,\n  priority,\n  deadline,\n  onClose,\n  operation,\n}) => {\n  const { user } = useAuth();\n  const dispatch = useDispatch();\n  const { boardName } = useParams();\n\n  const [titleValue, setTitleValue] = useState(cardTitle); // для редагування\n  const [descriptionValue, setDescriptionValue] = useState(description); // для редагування\n  const [inputDeadline, setInputDeadline] = useState(null);\n\n  const onHandleFormatDeadline = formatedSelectedDate => {\n    setInputDeadline(formatedSelectedDate);\n  };\n\n  //------------------------------------- Submit -------------------------------------------\n\n  const handleFormSubmit = event => {\n    // відправка даних\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    let inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n\n    if (inputDescription === '') {\n      inputDescription = ' ';\n    }\n\n    if (\n      inputTitle === cardTitle &&\n      inputDescription === description &&\n      inputPriority === priority &&\n      inputDeadline === deadline\n    ) {\n      onClose();\n      return;\n    }\n\n    const cardData = {\n      title: inputTitle,\n      description: inputDescription,\n      priority: inputPriority,\n      deadLine: inputDeadline,\n    };\n\n    if (id) {\n      dispatch(\n        operation({\n          ...cardData,\n          taskOwner: idColumn,\n          idTask: id,\n          boardId: boardName,\n        })\n      );\n    } else {\n      dispatch(\n        operation({ ...cardData, taskOwner: idColumn, boardId: boardName })\n      );\n    }\n\n    event.target.reset();\n\n    if (event.currentTarget === event.target) {\n      onClose();\n      document.body.style.overflow = 'visible'; //body почне скролитися після закриття модалки\n    }\n  };\n\n  return (\n    <div className={scss.OBAddContainer} data-theme={user.theme}>\n      <h4 className={scss.OBAddTitle}>{modalTitle}</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n            defaultValue={titleValue} // для редагування\n            onChange={e => setTitleValue(e.target.value)} // для редагування\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n            defaultValue={descriptionValue} // для редагування\n            onChange={e => setDescriptionValue(e.target.value)} // для редагування\n          />\n        </label>\n\n        <RadioBtns parentComponent={'AddCard'} priority={priority} />\n\n        <div>\n          <p className={scss.OBAddlabel}>Deadline</p>\n          <Calendar\n            deadline={deadline}\n            onFormatDeadline={onHandleFormatDeadline}\n          />\n        </div>\n\n        <button type=\"submit\" className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddSubmitIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { useState, useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { useDrag, useDrop } from 'react-dnd';   // dnd\nimport { ItemTypes } from '../MainDashboard/items'; // dnd\nimport { editColumn, deleteTask, updateTask } from 'redux/board/boardOperations';\nimport { useAuth/*, useBoards*/ } from 'hooks';\nimport { useCustomContext } from '../Context/Context'; \nimport { Modal } from '../Modal/Modal';\nimport { AddCard } from '../AddCard/AddCard';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\n\nconst getBgColor = (priority, color) => {\n  switch (priority) {\n   case 'low':\n     return '#8FA1D0';\n   case 'medium':\n     return 'rgba(224, 156, 181, 1)';\n   case 'high':\n     return '#BEDBB0';\n   case 'without':\n     return color; //'rgba(22, 22, 22, 0.30)'; //rgba(255, 255, 255, 0.30)\n   default:\n    break;\n  }    \n }\n\n\nconst Card = ({ id, cardTitle, description, priority, deadline, idColumn, taskOwner, index, columnTitle, moveInsideColumn, moveToAnotherColumn, moveToAnotherColumnUnder }) => {\n  const dispatch = useDispatch();  \n  const { user } = useAuth();\n  // const { columns } = useBoards();\n  const { boardName } = useParams();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isOverflowVisible, setOverflowVisible] = useState(false); // управління станом відкриття тексту\n  const [isPopupVisible, setisPopupVisible] = useState(false);\n  const deadlineIsToday = dayjs().format('DD/MM/YYYY') === deadline; // dayjs().format('DD/MM/YYYY') - сьогоднішня дата у визначеному форматі\n  const context = useCustomContext();\n  \n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') {\n        setisPopupVisible(false);\n     };\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    const handleClickOutside = (e) => {\n      const popupContainer = document.querySelector(`.${scss.OBCardPopupContainer}`);\n      if (popupContainer && !popupContainer?.contains(e.target)) {\n        setisPopupVisible(false);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('click', handleClickOutside);\n  \n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('click', handleClickOutside);\n    };\n  }, [isPopupVisible]);\n\n  const onColumnChange = (_id, title, description, priority, deadline, id, index) => {\n    dispatch(updateTask({taskOwner: _id, title, description, priority, deadLine: deadline, idTask: id, boardId: boardName, columnIndex: index}))\n    setisPopupVisible(false);\n  }; \n\n  //----------------------- dnd (відривання картки)-------------------------------\n\n  const [{ isDragging }, drag] = useDrag({ \n    type: ItemTypes.CARD,\n    item: { idTask: id, title: cardTitle, description, priority, deadLine: deadline, taskOwner, index },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging(), \n    })\n  });\n  //-------------------------------------------------------------------------------\n  // dnd: (1) перетягування але не кидання картки в іншу колонку (кидання ініціюється в DropWrapper і реалізується ф-цією onDrop (в MainDashboard))\n  //      (2) перетягування і кидання картки в межах 1 колонки\n\n  const ref = useRef(null);\n\n  const handleHover = (item, monitor) => {\n    if (!ref.current) {   \n      return; \n    }\n    const dragIndex = item.index; \n    const hoverIndex = index; \n    const hoverBoundingRect = ref.current?.getBoundingClientRect()\n    const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // середина картки по вертикалі\n    const clientOffset = monitor.getClientOffset(); \n    const hoverClientY = clientOffset.y - hoverBoundingRect.top; // відстань від верхнього краю картки до курсора миші, яким грабнули картку\n\n    // (1) перетягування але поки не кидання картки в іншу колонку ---------------------------------------------------------------\n\n    // визначимо dragIndex картки, яку тягнемо в іншу колонку \n    const searchIndexes = context.columns.map(column => { // searchIndexes = [-1, 1, -1] - там, де не '-1' - то індекс картки, яку тягнемо\n      if(column._id === item.taskOwner) {\n          return column.taskOrder.indexOf(item.idTask);\n      }\n      return -1;\n    });\n    const newDragIndex = searchIndexes.filter(item => item !== -1); // [1] (або інше число, крім '-1') - індекс картки, яку тягнемо - стала величина\n\n    // перетягування вниз, курсор ковзає по верхній частині статичної картки\n    if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) { \n      if(item.taskOwner !== taskOwner) {\n        moveToAnotherColumn(hoverIndex, item); \n      } \n      return;\n    }\n\n    // перетягування вверх, курсор ковзає по нижній частині статичної картки\n    if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) { \n      if( item.taskOwner !== taskOwner) {\n        moveToAnotherColumnUnder(hoverIndex, item);  \n      }  \n      return;\n    }\n\n    // тепер навпаки\n    if (item.taskOwner !== taskOwner) {\n      if(newDragIndex[0] === hoverIndex) { //перетягування на ту ж позицію\n        if(hoverClientY > hoverMiddleY) { // курсор ковзає по нижній частині статичної картки \n          moveToAnotherColumnUnder(hoverIndex, item);\n        } else if(hoverClientY < hoverMiddleY) { // курсор ковзає по верхній частині статичної картки \n          moveToAnotherColumn(hoverIndex, item);\n        }\n      } else if(dragIndex < hoverIndex && hoverClientY > hoverMiddleY) { // перетягування вниз, курсор ковзає по нижній частині статичної картки\n        moveToAnotherColumnUnder(hoverIndex, item);\n      } else if(dragIndex > hoverIndex && hoverClientY < hoverMiddleY) { // перетягування вверх, курсор ковзає по верхній частині статичної картки\n        moveToAnotherColumn(hoverIndex, item);\n      }\n    }\n\n    // (2) перетягування і кидання картки в межах 1 колонки\n    if (dragIndex !== hoverIndex && item.taskOwner === taskOwner) { \n      moveInsideColumn(dragIndex, hoverIndex);  \n    }\n\n    item.index = hoverIndex;\n  }\n\n  const [{ handlerId, isOver }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(), \n        isOver: monitor.isOver(),\n      }\n    },\n    hover: handleHover,\n  });\n\n  drag(drop(ref)); \n  //--------------------------------------------------------------------------------\n\n  const handleDeleteTask = () => {\n    dispatch(deleteTask({ id, boardName }));\n    // після видалення таски, видаляємо її id і з taskOrder\n    const columnIndex = context.columns.findIndex(column => column._id === taskOwner);\n    const tasksIdxs = context.columns[columnIndex].taskOrder;\n    const idxToDelete = tasksIdxs && tasksIdxs.findIndex(idItem => idItem === id);\n\n    if(idxToDelete !== -1) {\n      const updatedTaskOrder = [...tasksIdxs];\n      updatedTaskOrder.splice(idxToDelete, 1);    \n      dispatch(editColumn({ idColumn: taskOwner, title: columnTitle, taskOrder: updatedTaskOrder }))\n    }    \n  };\n\n  return (\n    <div \n      ref={ref} // dnd\n      data-handler-id={handlerId} // dnd \n      data-theme={user.theme}\n      style={{ \n        opacity: isDragging ? 0.3 : 1, // dnd \n        backgroundColor: isOver && 'rgba(75, 65, 65, 0.1)', // dnd \n        transition: '250ms cubic-bezier(0.4, 0, 0.2, 1) 0s',\n        borderLeftColor: getBgColor(priority, user.theme === 'dark' ? 'rgba(255, 255, 255, 0.30)' : 'rgba(22, 22, 22, 0.30)') \n      }}  \n      className={scss.OBCardContainer} \n    >\n      <h4 className={scss.OBCardTitle}>{cardTitle}</h4>\n      {/* <p>id:{id}</p>\n      <p>taskOwner:{taskOwner}</p> */}\n      <p \n        className={`${scss.OBCardDescription} ${isOverflowVisible ? scss.OBCardDescriptionFull : scss.OBCardDescriptionShort}`} \n        onClick={() => setOverflowVisible(!isOverflowVisible)}\n      >\n        {description}\n      </p>\n\n      <hr className={scss.OBCardSeparator} />\n\n      <div className={scss.OBCardFooterContainer}>\n        <table className={scss.OBCardValuesContainer}>\n          <thead>\n            <tr>\n              <th className={scss.OBCardProreties}>Priority</th>\n              <th className={scss.OBCardProreties}>Deadline</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <div\n                  style={{ backgroundColor: getBgColor(priority, user.theme === 'dark' ? 'rgba(255, 255, 255, 0.30)' : 'rgba(22, 22, 22, 0.30)') }}\n                  className={scss.OBCardPriorityCircle}\n                ></div>\n              </td>\n              <td className={scss.OBCardDate}>{deadline}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        {/* --------------------------- іконки --------------------------- */}\n\n        <div className={scss.OBCardIconsWrapper}>\n          {deadlineIsToday &&\n            (<svg className={scss.OBCardBellIcon} width=\"16\" height=\"16\" style={{ stroke: user.theme === 'violet' ? '#585bbe' : '#bedfad' }}>\n\n              <use href={SvgSprite + '#icon-bell'} />\n            </svg>\n          )}\n          <button\n            type=\"button\"\n            className={scss.OBCardBtnIcon}\n            aria-label=\"edit task\"\n            onClick={() => setIsModalOpen(true)}\n          >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-pencil'} />\n            </svg>\n          </button>\n          {isModalOpen && (\n            <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>\n              <AddCard\n                idColumn={idColumn}\n                modalTitle={'Edit card'}\n                id={id}\n                cardTitle={cardTitle}\n                description={description}\n                priority={priority}\n                deadline={deadline}\n                modalBtnTitle={'Edit'}\n                operation={updateTask}\n                onClose={() => setIsModalOpen(false)}\n              />\n            </Modal>\n          )}\n          <button \n            type='button' \n            className={scss.OBCardBtnIcon} \n            onClick={(e) => {\n              e.stopPropagation();\n              setisPopupVisible(true);\n            }} \n            aria-label='move task to another column'\n          >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-arrow'} />\n            </svg>\n          </button >\n          {isPopupVisible &&  (\n              <div className={scss.OBCardPopupContainer}>\n                  {context.columns.length <= 1 ? <p>Add columns</p> : (<ul className={scss.OBCardPopupList}>\n                    {context.columns &&\n                        context.columns.map(({ _id, title: columnTitle }, index) => {\n                          return (\n                            <li key={_id} className={taskOwner===_id ? `${scss.OBCardPopupItem} ${scss.disabledTransfer}` : scss.OBCardPopupItem}>\n                             <p className={scss.OBCardPopupText}>{columnTitle}</p>\n                              <button\n                                type=\"button\"\n                                className={scss.OBCardBtnIcon}\n                                aria-label=\"change column\"\n                                onClick={()=>onColumnChange(_id, cardTitle, description, priority, deadline, id, index)}\n                              >\n                                <svg width=\"16\" height=\"16\">\n                                  <use href={SvgSprite + '#icon-arrow'} />\n                                </svg>\n                              </button>\n                            </li>\n                          )\n                        })\n                      }\n                  </ul>)}\n              </div>\n          )}\n          <button\n            type=\"button\"\n            className={scss.OBCardBtnIcon}\n            aria-label=\"delete task\"\n            onClick={handleDeleteTask}\n          >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-trash'} />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport update from 'immutability-helper'; // dnd\r\nimport { editColumn } from '../../redux/board/boardOperations'; \r\nimport { Card } from 'components/Card';\r\nimport styles from 'styles/index.module.scss';\r\nimport { useBoards } from 'hooks';\r\n\r\n\r\nexport const TasksList = ({ tasks, idColumn:_id, columnTitle, getReoderedCardsIds }) => {\r\n  const dispatch = useDispatch();\r\n  const {  filter: priority } = useBoards();\r\n\r\n  //-------------------------------------------- dnd ---------------------------------------------------------------\r\n\r\n  // 1. Перетягування картки в іншу колонку:\r\n  // 1.1. На місце іншої картки, яку треба опустити (курсор на верхній частині статичної картки) \r\n  \r\n  const getReoderedCardsIdxs = (reoderedTasks) => reoderedTasks.map((card) => card._id); // після перетягування таски треба змінити taskOrder\r\n  \r\n  const moveToAnotherColumn = useCallback((hoverIndex, item) => { // викликається в Card \r\n    // hoverIndex - позиція, на яку перетягли картку\r\n      const newItem = {...item, _id: item.idTask}; \r\n      delete newItem.idTask;\r\n      delete newItem.index;\r\n\r\n      const reoderedTasks = update([...tasks], { //  повертає масив перетасованих тасок \r\n        $splice: [ \r\n          [hoverIndex, 0, newItem],\r\n        ],\r\n      });  \r\n      getReoderedCardsIds({ _id, taskOrder: getReoderedCardsIdxs(reoderedTasks) });\r\n      // після кидання картки запускається useDrop (в DropWrapper) => onDrop (в MainDashboard) \r\n  }, [tasks, _id, getReoderedCardsIds]);\r\n\r\n\r\n  // 1.2. На місце іншої картки, яка має зберегти свою позицію, а нову треба опустити (курсор на нижній частині статичної картки) \r\n  const moveToAnotherColumnUnder = useCallback((hoverIndex, item) => { \r\n    const newItem = {...item, _id: item.idTask}; \r\n    delete newItem.idTask;\r\n    delete newItem.index;\r\n\r\n    const reoderedTasks = update([...tasks], { \r\n      $splice: [ \r\n        [hoverIndex + 1, 0, newItem],\r\n      ],\r\n    });\r\n    getReoderedCardsIds({ _id, taskOrder: getReoderedCardsIdxs(reoderedTasks) });\r\n    // після кидання картки запускається useDrop (в DropWrapper) => onDrop (в MainDashboard) \r\n  }, [tasks, _id, getReoderedCardsIds]);\r\n\r\n\r\n  // 2. Перетягування таски (вертикально) в межах 1 колонки\r\n  const moveInsideColumn = useCallback((dragIndex, hoverIndex) => { \r\n    // dragIndex - місце, з якого зірвали картку і тягнемо \r\n    // hoverIndex - позиція, над якою утримуємо картку\r\n      const newTasks = [...tasks]; \r\n      const reoderedTasks = update(newTasks, { \r\n        $splice: [  \r\n          [dragIndex, 1],\r\n          [hoverIndex, 0, newTasks[dragIndex]], \r\n        ],\r\n      });\r\n      dispatch(editColumn({ idColumn: _id, title: columnTitle, taskOrder: getReoderedCardsIdxs(reoderedTasks) }))  \r\n  }, [tasks, _id, columnTitle, dispatch]);\r\n\r\n\r\n  const filteredTasks =\r\n    priority === 'all'\r\n      ? tasks\r\n      : tasks.filter(task => {\r\n          return task?.priority === priority;\r\n        });\r\n\r\n  const renderCard = useCallback(({ title, description, priority, deadLine, _id, taskOwner}, index) => {\r\n    return (\r\n      <li key={_id}> \r\n        <Card\r\n          columnTitle={columnTitle}\r\n          cardTitle={title}\r\n          description={description}\r\n          priority={priority}\r\n          deadline={deadLine}\r\n          id={_id}\r\n          taskOwner={taskOwner}\r\n          index={index} // для dnd \r\n          moveToAnotherColumn={moveToAnotherColumn} // для dnd\r\n          moveToAnotherColumnUnder={moveToAnotherColumnUnder} // для dnd\r\n          moveInsideColumn={moveInsideColumn}\r\n        />\r\n      </li>\r\n    );\r\n  }, [columnTitle, moveToAnotherColumn, moveToAnotherColumnUnder, moveInsideColumn]);\r\n\r\n  return (\r\n    <ul className={styles.KkCards}>\r\n        {filteredTasks.length !== 0 &&\r\n          filteredTasks.map((task, index) => renderCard(task, index))\r\n        }\r\n      </ul>\r\n  );\r\n}","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddCard = ({ title, className, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnCard, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusCard, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\r\nimport scss from 'styles/index.module.scss';\r\nimport SvgSprite from 'images/sprite.svg';\r\nimport { useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useAuth } from 'hooks';\r\n\r\nexport const PopColumn = ({\r\n  modalTitle,\r\n  modalBtnTitle,\r\n  onClose,\r\n  operation,\r\n  idColumn,\r\n  infoData,\r\n}) => {\r\n  const { user } = useAuth();\r\n  const boardId = useParams();\r\n  const dispatch = useDispatch();\r\n  const [valueInput, setvalueInput] = useState(\r\n    infoData ? { title: infoData.title } : { title: '' }\r\n  );\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    setvalueInput(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n  // console.log('columns :>> ', infoData);\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const dataSubmit = idColumn\r\n      ? {\r\n          title: valueInput.title,\r\n          idColumn: idColumn,\r\n        }\r\n      : {\r\n          title: valueInput.title,\r\n          board: boardId.boardName,\r\n        };\r\n\r\n    if (infoData?.title === valueInput.title) {\r\n      onClose();\r\n      return;\r\n    }\r\n\r\n    dispatch(operation(dataSubmit));\r\n\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <div className={scss.AAColumnContainer} data-theme={user.theme}>\r\n      <h4 className={scss.AAColumnTitle}>{modalTitle}</h4>\r\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n        <label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            placeholder=\"Title\"\r\n            autoFocus\r\n            required\r\n            className={scss.AAColumnInput}\r\n            value={valueInput.title || ''}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={scss.AAColumnBtn}>\r\n          <div className={scss.AAColumnSvgContainer}>\r\n            <svg className={scss.AAColumnSvg}>\r\n              <use href={SvgSprite + '#icon-plus'} />\r\n            </svg>\r\n          </div>\r\n          {modalBtnTitle}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// export default PopColumn;\r\n","// 💙💛 Kostiantyn Koshyk\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useCustomContext } from '../Context/Context'; \nimport {\n  addColumn,\n  editColumn,\n  deleteColumn,\n  addTask,\n  updateTask \n} from 'redux/board/boardOperations';\nimport { useAuth, useBoards } from 'hooks';\nimport { Filters } from './Filters';\nimport { DropWrapper } from './DropWrapper'; // dnd\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { TitleCards } from './TitleCards';\nimport { TasksList } from 'components/TasksList';\nimport { BtnAddCard } from './BtnAddCard';\nimport { Modal } from '../Modal/Modal';\nimport { AddCard } from 'components/AddCard/AddCard';\nimport { PopColumn } from '../PopColumn/PopColumn';\nimport Loader from 'components/Loader/Loader';\nimport { imagesBg } from 'images/image-url';\nimport styles from 'styles/index.module.scss';\n\n\nexport const MainDashboard = () => {\n  const { boardById, isLoading } = useBoards();\n  const { loading } = useAuth();\n  const dispatch = useDispatch();\n  const [isModalAddOpen, setIsModalAddOpen] = useState(false);\n  const [isModalEditOpen, setIsModalEditOpen] = useState(false);\n  const [isModalAddCardOpen, setIsModalAddCardOpen] = useState(false);\n  const [activeColumnId, setActiveColumnId] = useState('');\n  const [titleColumnId, setTitleColumnId] = useState('');\n  const [reoderedCardsIds, setReoderedCardsIds] = useState({});\n  const context = useCustomContext();\n\n  const bg = imagesBg?.find(image => image.name === boardById.background);\n\n  const containerStyle = {\n    backgroundImage: `url(${bg?.mobile})`,\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'center',\n  };\n\n  if (window.innerWidth >= 768) {\n    containerStyle.backgroundImage = `url(${bg?.tablet})`;\n  }\n\n  if (window.innerWidth >= 1440) {\n    containerStyle.backgroundImage = `url(${bg?.desktop})`;\n  }\n\n  //------------------- dnd (перетягування картки між колонками) -------------------------\n\n  const onDrop = (cardToDrop, monitor, board, taskOwner, columnTitle, tasks, taskOrder, columnIndex) => { // виклик ф-ції в DropWrapper\n    // tasks - таски колонки, в яку кидаємо картку \n    // taskOwner - id колонки, в яку кидаємо картку  \n\n    // визначимо чи кидаємо таску в чужу колонку чи свою\n    const card = tasks.filter(task => task._id === cardToDrop.idTask); // кидаючи в іншу колонку має бути false - поверне []\n    //true отримаємо тільки кинувши картку в колонку, в якій знаходиться ця картка - поверне [{картка, яку кидаємо}] \n\n    if(card.length === 0) { // true (те, що треба) - коли таска перекидується в іншу колонку\n      // позбавляємося картки в її рідній колонці\n      const prevCardId = cardToDrop.idTask;\n      removePrevId(prevCardId);\n      \n      cardToDrop.taskOwner = taskOwner; // присвоїли картці, яку кидаємо новий id колонки\n\n      dispatch(updateTask({ ...cardToDrop, boardId: board, columnIndex })); // відправка оновленого об'єкту картки, яку перетягуємо\n      if(reoderedCardsIds._id === taskOwner) {\n          dispatch(editColumn({ idColumn: taskOwner, title: columnTitle, taskOrder: reoderedCardsIds.taskOrder })); \n      }\n    } \n  };\n\n  // оновлюємо taskOrder в колонці, звідки забрали картку\n  const removePrevId = (prevCardId) => {\n    context.columns.forEach(column => {\n        const updatedTaskOrder = column.taskOrder.filter(id => id !== prevCardId); // taskOrder без лишнього id // повертає новий масив або []\n\n        if(updatedTaskOrder.length !== column.taskOrder.length) { // подальші зміни тільки для taskOrder тієї колонки, в якій є лишній id \n          dispatch(editColumn({ idColumn: column._id, title: column.title, taskOrder: updatedTaskOrder }));          \n        }\n    });\n  };\n\n  return (\n    <div className={styles.KkSectionMainDashboard} style={containerStyle}>\n      {isLoading && loading && <Loader />}\n      <Filters className={styles.KkFilters} />\n        <ul className={styles.KkColums}>\n          {context.columns &&\n            context.columns.map(({ board, _id, title, tasks, taskOrder }, index) => (\n              <li key={_id}>\n                <DropWrapper \n                  onDrop={onDrop} \n                  board={board} \n                  taskOwner={_id} \n                  columnTitle={title} \n                  tasks={tasks} \n                  taskOrder={taskOrder} \n                  columns={context.columns} \n                  columnIndex={index}\n                >\n                  <TitleCards\n                    className={styles.TitleCards}\n                    title={title}\n                    onEdit={() => {\n                      setIsModalEditOpen(true);\n                      setActiveColumnId(_id);\n                      setTitleColumnId(title);\n                    }}\n                    onTrash={() => dispatch(deleteColumn(_id))}\n                  />\n                  {tasks && \n                    <TasksList \n                      tasks={tasks} \n                      idColumn={_id} \n                      columnTitle={title} \n                      board={board}\n                      getReoderedCardsIds={setReoderedCardsIds}\n                    />\n                  }\n                  <BtnAddCard\n                    className={styles.KkBtnAddCard}\n                    title={'Add another card'}\n                    theme={'light'}\n                    onClick={() => {\n                      setIsModalAddCardOpen(true);\n                      setActiveColumnId(_id);\n                    }}\n                  />\n                </DropWrapper>\n              </li>\n            ))}\n             <BtnAddColumn\n                className={styles.KkBtnAddColumnMain}\n                title={'Add another column'}\n                theme={'light'}\n                onClick={() => setIsModalAddOpen(true)}\n            />\n        </ul>       \n      {isModalAddOpen && (\n        <Modal isOpen={isModalAddOpen} onClose={() => setIsModalAddOpen(false)}>\n          <PopColumn\n            modalTitle={'Add column'}\n            modalBtnTitle={'Add'}\n            onClose={() => setIsModalAddOpen(false)}\n            operation={addColumn}\n          />\n        </Modal>\n      )}\n      {isModalEditOpen && (\n        <Modal isOpen={isModalEditOpen} onClose={() => setIsModalEditOpen(false)}>\n          <PopColumn\n            modalTitle={'Edit column'}\n            modalBtnTitle={'Add'}\n            onClose={() => setIsModalEditOpen(false)}\n            idColumn={activeColumnId}\n            infoData={{ title: titleColumnId }}\n            operation={editColumn}\n          />\n        </Modal>\n      )}\n      {isModalAddCardOpen && (\n        <Modal isOpen={isModalAddCardOpen} onClose={() => setIsModalAddCardOpen(false)}>\n          <AddCard\n            modalTitle={'Add card'}\n            modalBtnTitle={'Add'}\n            onClose={() => setIsModalAddCardOpen(false)}\n            idColumn={activeColumnId}\n            operation={addTask}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","// import { useEffect } from 'react';\n// import { useDispatch } from 'react-redux';\n// import { getAllBoards, getBoardById } from 'redux/board/boardOperations';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\n// import { useParams } from 'react-router-dom';\n// import { useAuth, useBoards } from 'hooks';\n// import Loader from 'components/Loader/Loader';\n\nconst ScreensPage = () => {\n  // const dispatch = useDispatch();\n  // const { boardName } = useParams();\n  // const { isLoading } = useBoards();\n  // const { loading } = useAuth();\n\n  // useEffect(() => {\n  //   dispatch(getAllBoards());\n  //   dispatch(getBoardById(boardName));\n  // }, [boardName, dispatch]);\n\n  return (\n    \n    <>\n    \n      <section>\n        <MainDashboard />\n      </section>\n    </>\n  );\n};\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <ScreensPage />\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["RadioBtns","_ref","parentComponent","priority","dispatch","useDispatch","filter","useBoards","user","useAuth","_useState","useState","_useState2","_slicedToArray","selectedPriorityFilter","setSelectedPriorityFilter","_useState3","_useState4","selectedPriority","setSelectedPriority","useEffect","setPriorityFilter","priorityStyles","without","grey","low","indigo","medium","pink","high","lightGreen","capitalizeFirstLetter","charAt","toUpperCase","slice","_jsxs","children","_jsx","className","scss","concat","Object","keys","map","FormControlLabel","label","Typography","style","fontSize","fontFamily","color","theme","sx","control","Radio","_objectSpread","item","value","onChange","e","target","checked","name","inputProps","backgroundColor","borderRadius","Filters","isFilterVisible","setIsFilterVisible","boardById","handleKeyDown","code","window","addEventListener","removeEventListener","styles","display","justifyContent","position","padding","background","title","type","onClick","width","height","href","SvgSprite","opacity","ItemTypes","DropWrapper","onDrop","board","taskOwner","columnTitle","tasks","taskOrder","columns","columnIndex","_useDrop","useDrop","accept","canDrop","monitor","columnIndexWithItem","findIndex","column","_id","includes","drop","collect","isOver","_useDrop2","_useDrop2$","ref","transition","BtnAddColumn","clsx","TitleCards","onEdit","onTrash","Calendar","deadline","onFormatDeadline","inputWidth","setInputWidth","isCalendarOpen","setIsCalendarOpen","_useState5","dayjs","_useState6","selectedDate","setSelectedDate","dateFormat","format","contentWidth","length","formatedSelectedDate","createTheme","typography","join","components","MuiPaper","styleOverrides","root","border","borderColor","MuiPickersDay","fontweight","lineHeight","dayOutsideMonth","dayWithMargin","MuiPickersLayout","MuiDateCalendar","MuiPickersFadeTransitionGroup","fontWeight","letterSpacing","MuiDayCalendar","slideTransition","minHeight","header","marginTop","weekDayLabel","MuiPickersCalendarHeader","margin","borderBottom","borderBottomColor","paddingBottom","labelContainer","marginRight","marginLeft","MuiPickersArrowSwitcher","spacer","palette","primary","main","dark","LocalizationProvider","dateAdapter","AdapterDayjs","ThemeProvider","DatePicker","open","onClose","date","disablePast","dayOfWeekFormatter","day","showDaysOutsideCurrentMonth","slots","openPickerButton","slotProps","switchViewButton","previousIconButton","top","left","size","stroke","nextIconButton","right","textField","fullWidth","variant","minWidth","InputProps","disableUnderline","endAdornment","InputAdornment","cursor","edge","AddCard","modalTitle","modalBtnTitle","idColumn","id","cardTitle","description","operation","boardName","useParams","titleValue","setTitleValue","descriptionValue","setDescriptionValue","inputDeadline","setInputDeadline","onSubmit","event","preventDefault","inputTitle","elements","trim","inputDescription","inputPriority","cardData","deadLine","idTask","boardId","reset","currentTarget","document","body","overflow","autoComplete","placeholder","autoFocus","required","defaultValue","getBgColor","index","moveInsideColumn","moveToAnotherColumn","moveToAnotherColumnUnder","isModalOpen","setIsModalOpen","isOverflowVisible","setOverflowVisible","isPopupVisible","setisPopupVisible","deadlineIsToday","context","useCustomContext","handleClickOutside","popupContainer","querySelector","contains","_useDrag","useDrag","isDragging","_useDrag2","drag","useRef","handlerId","getHandlerId","hover","_ref$current","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","hoverClientY","getClientOffset","y","newDragIndex","indexOf","borderLeftColor","Modal","isOpen","updateTask","stopPropagation","_ref2","onColumnChange","deleteTask","tasksIdxs","idxToDelete","idItem","updatedTaskOrder","_toConsumableArray","splice","editColumn","TasksList","getReoderedCardsIds","getReoderedCardsIdxs","reoderedTasks","card","useCallback","newItem","update","$splice","newTasks","filteredTasks","task","renderCard","Card","BtnAddCard","PopColumn","infoData","valueInput","setvalueInput","dataSubmit","_event$target","prev","_defineProperty","MainDashboard","_useBoards","isLoading","loading","isModalAddOpen","setIsModalAddOpen","isModalEditOpen","setIsModalEditOpen","isModalAddCardOpen","setIsModalAddCardOpen","_useState7","_useState8","activeColumnId","setActiveColumnId","_useState9","_useState10","titleColumnId","setTitleColumnId","_useState11","_useState12","reoderedCardsIds","setReoderedCardsIds","bg","imagesBg","image","containerStyle","backgroundImage","mobile","backgroundSize","backgroundRepeat","backgroundPosition","innerWidth","tablet","desktop","cardToDrop","prevCardId","removePrevId","forEach","Loader","deleteColumn","addColumn","addTask","_Fragment","ScreensPage"],"sourceRoot":""}