{"version":3,"file":"static/js/382.bd15eff2.chunk.js","mappings":"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","sources":["components/ModalBoard/ModalBoard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["import styles from 'styles/index.module.scss';\nimport sprite from 'images/sprite.svg';\nimport { Modal } from 'components/Modal/Modal';\n// import { addBoards, /*deleteBoards, getBoardById, updateBoard*/ } from 'redux/board/boardOperations';\nimport { /*useEffect,*/ useState } from 'react';\nimport { useAuth } from 'hooks';\n// import { useDispatch } from 'react-redux';\n\nconst ModalBoard = ({ modalTitle, /*modalBtnTitle*/ handleSubmit }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [title, setTitle] = useState();\n  const [icon, setIcon] = useState();\n  const [background, setBackground] = useState();\n\n  const { user } = useAuth();\n\n    // const dispatch = useDispatch();\n\n    // dispatch(\n    //     addBoards({\n    //       title: 'New Board',\n    //       icon: 'icon-project',\n    //       background: 'background2',\n    //     })\n    //   );\n\n  // const boardSchema = object({\n  //       title: string().required('Title is required'),\n  //       icon: string(),\n  //       background: string(),\n  //     });\n\n  const onSubmit = e => {\n    e.prevenDefault();\n\n    const data = { title, icon, background };\n\n    handleSubmit(data, modalTitle);\n  };\n\n  const changeTitle = e => {\n    setTitle(e.target.value);\n  };\n\n  const changeIcon = e => {\n    setIcon(`#${e.target.value}`);\n  };\n\n  const changeBackground = newBg => {\n    setBackground(newBg);\n  };\n\n  //   const handleOpenModal = () => {\n  //     setIsModalOpen(true);\n  //   }\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    console.log('click');\n  };\n\n  //   useEffect(() => {\n  //     setTitle(modalTitle || \"\")\n  //   }, [modalTitle])\n\n  return (\n    <>\n      {/* {isModalOpen && ( */}\n      <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n        <form>\n          <div className={styles.INModalBoardContainer} data-theme={user.theme}>\n            <h3 className={styles.INBoardTitle}>New board</h3>\n            <input\n              className={styles.INBoardInput}\n              type=\"text\"\n              placeholder=\"Title\"\n              name=\"title\"\n              onChange={e => changeTitle}\n              required\n            />\n            <div className={styles.INIconsWraper}>\n              <h4 className={styles.INBoardSubtitle}>Icons</h4>\n              <ul className={styles.INIconsGroup}>\n                <li className={styles.INListItem}>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"icon\"\n                      value=\"icon-project\"\n                      onChange={e => changeIcon(e)}\n                    />\n                    <svg className={styles.INBoardIcon}>\n                      <use href={sprite + '#icon-project'} />\n                    </svg>\n                  </label>\n                </li>\n\n                <li>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"icon\"\n                      value=\"icon-star\"\n                      onChange={e => changeIcon(e)}\n                    />\n                    <svg className={styles.INBoardIcon}>\n                      <use href={sprite + '#icon-star'} />\n                    </svg>\n                  </label>\n                </li>\n\n                <li>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"icon\"\n                      value=\"icon-loading\"\n                      onChange={e => changeIcon(e)}\n                    />\n                    <svg className={styles.INBoardIcon}>\n                      <use href={sprite + '#icon-loading'} />\n                    </svg>\n                  </label>\n                </li>\n\n                <li>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"icon\"\n                      value=\"icon-puzzle\"\n                      onChange={e => changeIcon(e)}\n                    />\n                    <svg className={styles.INBoardIcon}>\n                      <use href={sprite + '#icon-puzzle'} />\n                    </svg>\n                  </label>\n                </li>\n\n                <li>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"icon\"\n                      value=\"icon-container\"\n                      onChange={e => changeIcon(e)}\n                    />\n                    <svg className={styles.INBoardIcon}>\n                      <use href={sprite + '#icon-container'} />\n                    </svg>\n                  </label>\n                </li>\n\n                <li>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"icon\"\n                      value=\"icon-lightning\"\n                      onChange={e => changeIcon(e)}\n                    />\n                    <svg className={styles.INBoardIcon}>\n                      <use href={sprite + '#icon-lightning'} />\n                    </svg>\n                  </label>\n                </li>\n\n                <li>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"icon\"\n                      value=\"icon-colors\"\n                      onChange={e => changeIcon(e)}\n                    />\n                    <svg className={styles.INBoardIcon}>\n                      <use href={sprite + '#icon-colors'} />\n                    </svg>\n                  </label>\n                </li>\n\n                <li>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"icon\"\n                      value=\"icon-hexagon\"\n                      onChange={e => changeIcon(e)}\n                    />\n                    <svg className={styles.INBoardIcon}>\n                      <use href={sprite + '#icon-hexagon'} />\n                    </svg>\n                  </label>\n                </li>\n              </ul>\n            </div>\n            <div className={styles.INIconsWraper}>\n              <h4 className={styles.INBoardSubtitle}>Background</h4>\n              {/* додати перелік іконок для BG type=\"radio */}\n              <ul>\n                <li>\n                  <label>\n                    <input\n                      className={styles.INRadioBtn}\n                      type=\"radio\"\n                      name=\"bgImage\"\n                      onChange={() => changeBackground()}\n                    />\n                  </label>\n                </li>\n              </ul>\n            </div>\n            <button\n              className={styles.IMSubmitBtn}\n              type=\"submit\"\n              onSubmit={onSubmit}\n            >\n              <div className={styles.IMBtnIconWrapper}>\n                <svg className={styles.INAddIcon}>\n                  <use href={sprite + '#icon-plus'} />\n                </svg>\n              </div>\n              Create\n            </button>\n          </div>\n        </form>\n      </Modal>\n      {/* ) } */}\n    </>\n  );\n};\n\nexport default ModalBoard;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import styles from 'styles/index.module.scss';\nimport { getAllBoards } from 'redux/board/boardOperations';\n// import { MainDashboard } from 'components/MainDashboard/MainDashboard';\n// import EditProfile from 'components/EditProfile/EditProfile';\n// import { useAuth } from 'hooks'; // s\n// import AddBoard from './testAddBoard';\n// import { AddCard } from 'components/AddCard';\n// import { Card } from 'components/Card';\nimport ModalBoard from 'components/ModalBoard/ModalBoard';\n// import { PopColumn } from 'components/PopColumn';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  // const { user } = useAuth();\n  // console.log(user)\n  const statE = useSelector(state => state);\n  console.log(statE);\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n  return (\n    <section>\n      <div>\n        {/* <MainDashboard /> */}\n        {/* <EditProfile/> */}\n        {/* <AddBoard /> */}\n        {/* <AddCard /> */}\n        {/* <Card /> */}\n        <ModalBoard />\n        {/* <PopColumn /> */}\n      </div>\n    </section>\n  );\n};\n//   return (\n//     <section className={styles.YMScreenReg}>\n//       <div className={styles.AfWelcomRegWr}>\n//         <MainDashboard />\n//         {/* <EditProfile/> */}\n//         <AddBoard />\n//         {/* <AddCard /> */}\n//         {/* <Card /> */}\n//         {/* <NewBoard /> */}\n//         {/* <PopColumn /> */}\n//       </div>\n//     </section>\n//   );\n// };\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>\n        <ScreensPage />\n      </div>\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["_ref","modalTitle","handleSubmit","_useState","useState","_useState2","_slicedToArray","isModalOpen","setIsModalOpen","_useState3","_useState4","title","setTitle","_useState5","_useState6","icon","setIcon","_useState7","_useState8","background","setBackground","user","useAuth","changeTitle","e","target","value","changeIcon","concat","_jsx","_Fragment","children","Modal","isOpen","onClose","console","log","_jsxs","className","styles","theme","type","placeholder","name","onChange","required","href","sprite","newBg","onSubmit","prevenDefault","dispatch","useDispatch","statE","useSelector","state","useEffect","getAllBoards","ModalBoard","ScreensPage"],"sourceRoot":""}