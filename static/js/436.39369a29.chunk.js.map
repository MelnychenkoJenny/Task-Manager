{"version":3,"file":"static/js/436.39369a29.chunk.js","mappings":"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","sources":["components/MainDashboard/Filters.jsx","components/MainDashboard/BtnAddColumn.jsx","components/PopColumn/PopColumn.jsx","components/MainDashboard/BtnAddCard.jsx","components/AddCard/AddCard.jsx","components/Card/Card.jsx","components/MainDashboard/MainDashboard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useBoards } from 'hooks';\n\nexport const Filters = ({ className }) => {\n \nconst {  boardById } = useBoards();\n// console.log(boardById)\n  const onFilters = () => {\n    console.log('Filters ckick');\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2 className={styles.KkTitle}>{boardById.title}</h2>\n\n        <button className={styles.KkBtnFilters} onClick={onFilters}>\n          <svg width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n\n          <p>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddColumn = ({ className, title, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnColumn, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAuth } from 'hooks';\n\nexport const PopColumn = ({\n  modalTitle,\n  modalBtnTitle,\n  onClose,\n  operation,\n  idColumn,\n  infoData,\n}) => {\n  const { user } = useAuth();\n  const boardId = useParams();\n  const dispatch = useDispatch();\n  const [valueInput, setvalueInput] = useState(\n    infoData ? { title: infoData.title } : { title: '' }\n  );\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInput(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  console.log('idColumn :>> ', idColumn);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const dataSubmit = idColumn\n      ? {\n          title: valueInput.title,\n          idColumn: idColumn,\n        }\n      : {\n          title: valueInput.title,\n          board: boardId.boardName,\n        };\n    dispatch(operation(dataSubmit));\n\n    onClose();\n  };\n\n  return (\n    <div className={scss.AAColumnContainer} data-theme={user.theme}>\n      <h4 className={scss.AAColumnTitle}>{modalTitle}</h4>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.AAColumnInput}\n            value={valueInput.title || ''}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={scss.AAColumnBtn}>\n          <div className={scss.AAColumnSvgContainer}>\n            <svg className={scss.AAColumnSvg}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// export default PopColumn;\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddCard = ({ title, className, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnCard, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusCard, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n// import { addTask, updateTask } from '../../redux/...';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useAuth } from 'hooks';\n\n// import { nanoid } from 'nanoid';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { Radio, InputAdornment } from '@mui/material';\n\nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { addTasks } from 'redux/board/boardOperations';\nimport { useParams } from 'react-router-dom';\n\n\n\nexport const AddCard = ({ modalTitle, idColumn, id, cardTitle, description, priority, deadline, modalBtnTitle, onClose }) => {\n  const { user } = useAuth();\n  const dispatch = useDispatch();\n  const {boardName} = useParams()\n\n  const [titleValue, setTitleValue] = useState(cardTitle); // для редагування\n  const [descriptionValue, setDescriptionValue] = useState(description); // для редагування\n  const [selectedPriority, setSelectedPriority] = useState(priority ? priority : 'without');\n  const [inputWidth, setInputWidth] = useState('auto');\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(deadline ? dayjs(deadline, 'DD/MM/YYYY') : dayjs()); // dayjs() - currentDate\n  //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  // deadline ? dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\") : dayjs()\n\n  // console.log(deadline) //01/09/2023\n  // console.log(dayjs(deadline)) // M {... Mon Jan 09 2023 00:00:00 ...} - міняє день і місяць місцями\n  // console.log(dayjs(deadline, 'DD/MM/YYYY')); // M {... Fri Sep 01 2023 00:00:00 ...} - тепер все Ок\n  // Тепер бібліотека Material UA застосує формат \"dddd, MMMM D\" і отримаємо те, що треба:\n  // console.log(dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\")); // Thursday, August 31\n  \n\n  // \"Today, September 01\" або \"Saturday, September 02\"\n  const dateFormat = dayjs(selectedDate).format(\"dddd, MMMM D\") === dayjs().format(\"dddd, MMMM D\") ? '[Today,] MMMM D' : \"dddd, MMMM D\";\n\n  //------------------------------------- Submit -------------------------------------------\n\n  const handleFormSubmit = event => { // відправка даних\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    const inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n    const inputDeadline = dayjs(selectedDate).format('DD/MM/YYYY'); //   29/11/2023\n\n    const cardData = {\n      // 'id': id ? id : nanoid(), // якщо id є, то його передамо для редагування - пут-запиту  \n      'title': inputTitle, \n      'description': inputDescription, \n      'priority': inputPriority,\n      'deadLine': inputDeadline,\n    }\n    // console.log(5454545, cardData);\n    // console.log(\"in dispatch\", { ...cardData, 'taskOwner': idColumn});\n    // {title: 'The Watch Spot Design', description: \"Create a visually stunning and eye-catching watch dial design that embodies our brand's\", priority: 'without', deadline: '11/10/2023', taskOwner: '64f548eb24765a1e4837366e'}\n\n\n    // відправка на бекенд, а потім в стор редакса\n    dispatch(addTasks({ ...cardData, 'taskOwner': idColumn, boardId: boardName})); \n\n    // dispatch(updateTask({ ...cardData, 'taskId': id })); // властивість 'taskOwner' (id колонки є в Joi-схемі, але він не required)\n\n    event.target.reset();\n\n    if (event.currentTarget === event.target) {\n      onClose();\n      document.body.style.overflow = 'visible'; //body почне скролитися після закриття модалки\n    };\n  };\n\n  // --------------- пріоритетність ----------------------\n  \n  const controlProps = (item) => ({ // low, medium, high, without\n      value: item,\n      onChange: (e) => setSelectedPriority(e.target.value),\n      checked: selectedPriority === item,\n      name: 'priority',\n      inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n      low: indigo[200],\n      medium: pink[200],\n      high: lightGreen[200],\n      without: grey[400],\n  };\n\n  //------------------ Ширина інпута DatePicker---------------------\n  useEffect(() => {\n    const contentWidth = selectedDate.format(dateFormat).length * 9; \n    setInputWidth(`${contentWidth}px`); \n  }, [selectedDate, dateFormat]);\n\n  return (\n    <div className={scss.OBAddContainer} data-theme={user.theme}>\n      <h4 className={scss.OBAddTitle}>{modalTitle}</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n            defaultValue={titleValue} // для редагування\n            onChange={(e) => setTitleValue(e.target.value)}  // для редагування\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n            defaultValue={descriptionValue} // для редагування\n            onChange={(e) => setDescriptionValue(e.target.value)}  // для редагування\n          />\n        </label>\n\n        <div className={scss.OBAddlabel}> \n            Label color \n          <div className={scss.OBAddRadioGroup}>  \n            {Object.keys(priorityStyles).map((priority) => ( //['low', 'medium', 'high', 'without']\n              <Radio className={scss.OBAddradioBtn}\n                key={priority}\n                {...controlProps(priority)}\n                sx={{\n                  color: priorityStyles[priority],\n                  '&.Mui-checked': {\n                    color: priorityStyles[priority],\n                  },\n                  '&.Mui-checked .MuiSvgIcon-root': {\n                    fontSize: '17px',\n                  },\n                  '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                    fontSize: '14px',\n                    backgroundColor: priorityStyles[priority],\n                    borderRadius: '50%',\n                  },\n                }}\n              />\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <LocalizationProvider dateAdapter={AdapterDayjs}> {/* dateAdapter={AdapterDayjs} - вказуємо, що під капотом використовуємо бібліотеку Day.js (її методи) */}\n            <DatePicker\n              open={isCalendarOpen}\n              onClose={() => setIsCalendarOpen(false)} // закриття календаря\n              onChange={(date) => setSelectedDate(date)}   //Material UA в date записує обрану з календаря дату \n              // M {$L: 'en', $u: undefined, $d: Fri Sep 01 2023 09:13:29 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n              value={selectedDate}\n              format= {dateFormat} // приймає рядок\n              disablePast={true}   // минулі дати не обируться\n              outsideCurrentMonth={true} // початок наступного місяця невидимий\n              dayOfWeekFormatter={(day) => day.slice(0, 2).toUpperCase()} // видимі перші 2 літери назви дня тижня\n              slots={{\n                openPickerButton: () => null, // приховуємо дефолтну кнопку-іконку календаря\n              }}\n              slotProps={{\n                popper: { \n                  placement: 'bottom-start',\n                  sx: {\n                    '.MuiPickersPopper-root': {\n                      top: '50%',\n                      left: '50%',\n                      transform: 'translate(-50%, -50%)',\n                    },\n                    '.css-71vzt-MuiPaper-root-MuiPickersPopper-paper': { // полотно календаря\n                      // backgroundColor: 'red', // працює\n                      border: '1px solid #5255BC',\n                      borderRadius: '8px',\n                      padding: '18px',\n                      width: '233px',\n                      height: '254px',\n                    },\n                    '.MuiPickersLayout-root.': {\n                      width: '197px',\n                      // hight: '110px',\n                    },\n                    '.MuiDateCalendar-root': { // полотно календаря без зовнішніх падінгів\n                      // backgroundColor: 'orange',\n                      width: '197px',\n                      hight: '166px',\n                    },\n                    '.css-cwhad8-MuiDateCalendar-root': {  // полотно календаря без зовнішніх падінгів\n                      height: '215px',\n                    },\n                    '.MuiPickersLayout-contentWrapper': {\n                      width: '197px',\n                      // hight: '166px',\n                    },\n                    '.MuiPickersCalendarHeader-root': { // місяць і дата\n                      // backgroundColor: 'yellowgreen',\n                      textAlign: 'center',\n                      borderBottom: '1px solid rgba(22, 22, 22, 0.20)',\n                    },\n                    '.MuiPickersCalendarHeader-label': {\n                      margin: 0,\n                    },\n                    '.MuiTypography-root': { // дні тижня\n                      // backgroundColor: 'violet',\n                      marginTop: '14px',\n                      width: '23px',\n                      height: '23px',\n                    },\n                    '.MuiDayCalendar-monthContainer': { // полотно дат\n                      // backgroundColor: 'red',\n                      width: '197px',\n                      hight: '166px',\n                    },\n                    '.MuiDayCalendar-weekContainer': {\n                      // backgroundColor: 'blue',\n                      marginBottom: '3px',\n                    },\n                    '.MuiPickersDay-dayWithMargin': { // дні іншого місяця\n                      width: '23px',\n                      height: '23px',\n                    },\n                    '.MuiButtonBase-root': { // один день\n                       width: '23px',\n                       height: '23px',\n                    },\n                    '.MuiPickersDay-root': { // усі дні\n                      // backgroundColor: 'green',\n                      fontFamily: 'Poppins',\n                      fontSize: '14px',\n                      fontweight: '400',\n                      lineHeight: '18px', \n                    },\n                    '.MuiPickersDay-root.Mui-selected': { // вибраний день\n                      backgroundColor: user.theme === 'violet' ? '#585bbe' : '#bedfad',\n                      '&:hover': {\n                        backgroundColor: user.theme === 'violet' ? '#8d8fc9' : '#9fd186',\n                      }\n                    },\n                  },\n                },\n                calendarHeader: {\n                  sx: {\n                    '.MuiPickersCalendarHeader-root': {\n                       position: 'relative',\n                    },\n                    '.MuiPickersCalendarHeader-labelContainer': { // це тільки місяць і рік\n                        // backgroundColor: 'green',\n                        fontFamily: 'Poppins, sans-serif',\n                        fontSize: '16px',\n                        fontWeight: 500,\n                        letterSpacing: '-0.32px',\n                        display: \"grid\", // тепер місяць і рік центровані\n                    },\n                    '.MuiPickersCalendarHeader-label': {\n                      display: 'inline-block',\n                    },\n                    '.MuiPickersCalendarHeader-switchViewButton': {\n                        display: 'none', // прибираємо стрілку вниз поряд з місяцем і роком\n                    },\n                    '.MuiIconButton-edgeEnd': { // кнопка <\n                      position: 'absolute',\n                      top: '17px',\n                      left: '14px',\n                    },\n                    '.MuiIconButton-edgeStart': { // кнопка >\n                      position: 'absolute',\n                      top: '17px',\n                      right: '12px',\n                    },\n                  },\n                  style: {\n                    display: 'inline',\n                    margin: 0,\n                    padding: 0,\n                  },\n                },\n\n                previousIconButton: { \n                  sx: { stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', },\n                },\n                nextIconButton: { \n                  sx: { stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', },\n                },\n\n                textField: {\n                  fullWidth: false,\n                  onClick: () => setIsCalendarOpen(true), // інпут стає клікабельним; по кліку відкривається календар (picker)\n                  variant: 'standard',\n                  size: 'small',\n                  sx: {\n                    width: inputWidth,\n                    minWidth: '130px',        \n                    '.css-nz481w-MuiInputBase-input-MuiInput-input': { // інпут без кнопки\n                      padding: 0, \n                    },\n                  },\n                  InputProps: {\n                    disableUnderline: true,  // прибирає дефолтний нижній бордер, встановлений variant: 'standard'\n                    'aria-label': 'deadline',\n                    style: {\n                      fontSize: '14px', \n                      fontFamily: 'Poppins, sans-serif',\n                      color: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', // колір тексту\n                      fontWeight: 500,              \n                    },\n                    endAdornment: (   // розташування іконки - в кінці інпуту (є і startAdornment)\n                     <InputAdornment position=\"start\" sx={{ cursor: 'pointer'}}>\n                        <svg className={scss.OBAddDateIcon} width='18px'>\n                            <use \n                              href={SvgSprite + '#icon-chevron-down'} // стрілка вниз в календарі  \n                              aria-label=\"open calendar\" \n                              edge=\"start\" \n                            />       \n                        </svg>\n                     </InputAdornment>\n                    ),\n                  },\n                },              \n              }}\n            >\n            </DatePicker>            \n          </LocalizationProvider>\n        </div>\n\n        <button type='submit' className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddSubmitIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// export default AddCard;","import { useState } from 'react';\n// import { useDispatch } from 'react-redux'\nimport dayjs from 'dayjs';\nimport { Modal } from '../Modal/Modal'\nimport { AddCard } from '../AddCard/AddCard';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\n\nconst getBgColor = priority => {\n  switch (priority) {\n   case 'low':\n     return '#8FA1D0';\n   case 'medium':\n     return 'rgba(224, 156, 181, 1)';\n   case 'high':\n     return '#BEDBB0';\n   case 'without':\n     return 'rgba(22, 22, 22, 0.30)';\n   default:\n    break;\n  }    \n }\n\n\nconst Card = ({ id, cardTitle, description, priority, deadline }) => {\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n   // const dispatch = useDispatch();\n   const deadlineIsToday = dayjs().format('DD/MM/YYYY') === deadline; // dayjs().format('DD/MM/YYYY') - сьогоднішня дата у визначеному форматі\n   \n   const handleOpenModal = () => {\n     setIsModalOpen(true);\n   };\n\n   const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div style={{ borderLeftColor: getBgColor(priority) }} className={scss.OBCardContainer}>\n      <h4 className={scss.OBCardTitle}>{cardTitle}</h4>\n      <p className={scss.OBCardDescription}>{description}</p>\n\n      <hr className={scss.OBCardSeparator} />\n\n      <div className={scss.OBCardFooterContainer}>\n        <table className={scss.OBCardValuesContainer}>\n          <thead>\n            <tr>\n              <th className={scss.OBCardProreties}>Priority</th>\n              <th className={scss.OBCardProreties}>Deadline</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <div style={{ backgroundColor: getBgColor(priority) }} className={scss.OBCardPriorityCircle}></div>\n              </td>\n              <td className={scss.OBCardDate}>{deadline}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        {/* --------------------------- іконки --------------------------- */}\n\n        <div className={scss.OBCardIconsWrapper}>\n          {deadlineIsToday &&\n            <svg className={scss.OBCardBellIcon} width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-bell'} />\n            </svg>            \n          }\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='edit task' onClick={handleOpenModal}>\n            <svg width=\"16\" height=\"16\"> \n              <use href={SvgSprite + '#icon-pencil'} />\n            </svg>            \n          </button>\n          {isModalOpen && (\n            <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n                <AddCard modalTitle={'Edit card'} id={id} cardTitle={cardTitle} description={description} priority={priority} deadline={deadline} modalBtnTitle={'Edit'} /> \n            </Modal>             \n          )}\n          {/* <button type='button' className={scss.OBCardBtnIcon} aria-label='move task to another column'>\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-arrow'} />\n            </svg>\n          </button > */}\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='delete task' /*onClick={() => dispatch(deleteCard(id))}*/ >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-trash'} />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","import { Filters } from './Filters';\nimport styles from 'styles/index.module.scss';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { Modal } from '../Modal/Modal';\nimport { useState } from 'react';\nimport { PopColumn } from '../PopColumn/PopColumn';\nimport {\n  addColumn,\n  deleteColumn,\n  editColumn,\n} from 'redux/board/boardOperations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useBoards } from 'hooks';\n// import { useParams } from 'react-router-dom';\nimport SvgSprite from 'images/sprite.svg';\nimport { BtnAddCard } from './BtnAddCard';\nimport { AddCard } from 'components/AddCard/AddCard';\nimport { Card } from 'components/Card';\n\nexport const MainDashboard = () => {\n  const { columns } = useBoards();\n\n  // console.log('columns', columns);\n  // console.log('tasksyraaa', tasks);\n  const st = useSelector(state => state);\n  console.log('state :>> ', st);\n\n  const [isModalAddOpen, setIsModalAddOpen] = useState(false);\n  const [isModalEditOpen, setIsModalEditOpen] = useState(false);\n  const [isModalAddCardOpen, setIsModalAddCardOpen] = useState(false);\n  const [activeColumnId, setActiveColumnId] = useState('');\n  const [titleColumnId, setTitleColumnId] = useState('');\n  // console.log('activeColumnId565 :>> ', activeColumnId);\n  const dispatch = useDispatch();\n  // const  boardId = useParams();\n  //!! Тут на всі відкриття і закриття модалок можна зробити switch, але не стала витрачати на че час\n  const handleOpenAddModal = () => {\n    setIsModalAddOpen(true);\n  };\n  const handleCloseAddModal = () => {\n    setIsModalAddOpen(false);\n  };\n\n  const handleOpenEditModal = () => {\n    setIsModalEditOpen(true);\n  };\n  const handleCloseEditModal = () => {\n    setIsModalEditOpen(false);\n  };\n\n  const handleOpenAddCardModal = () => {\n    setIsModalAddCardOpen(true);\n  };\n  const handleCloseAddCardModal = () => {\n    setIsModalAddCardOpen(false);\n  };\n\n  const clickOnColumnItemHandle = columnId => {\n    setActiveColumnId(columnId);\n  };\n\n  const clickOnColumnTitleHandle = title => {\n    setTitleColumnId(title);\n  };\n\n  return (\n    <>\n      <Filters className={styles.KkFilters} />\n      {/* <button onClick={click}>click</button> */}\n\n      <ul className={styles.KkColums}>\n        {columns &&\n          columns.map(({ _id, title, tasks }) => (\n            <li key={_id}>\n              <p>title Column: {title}</p>\n              <div className={styles.boardsListItemButtons}>\n                <button\n                  type=\"button\"\n                  className={styles.boardsListItemButton}\n                  onClick={() => {\n                    handleOpenEditModal();\n                    clickOnColumnItemHandle(_id);\n                    clickOnColumnTitleHandle(title);\n                  }}\n                >\n                  <svg\n                    className={styles.boardsListItemSvg}\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <use href={`${SvgSprite}#icon-pencil`}></use>\n                  </svg>\n                </button>\n                <button\n                  type=\"button\"\n                  className={styles.boardsListItemButton}\n                  onClick={() => dispatch(deleteColumn(_id))}\n                >\n                  <svg\n                    className={styles.boardsListItemSvg}\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <use href={`${SvgSprite}#icon-trash`}></use>\n                  </svg>\n                </button>\n              </div>\n              {tasks && (\n                <ul>\n                  {tasks.map(({title: titleCard, description, priority, deadLine} ) => {\n                    return (<li>\n                      <Card\n                        cardTitle={titleCard}\n                        id={_id}\n                        description={description}\n                        priority={priority}\n                        deadline={deadLine}\n                      />\n                    </li>)\n                  })}\n                </ul>\n              )}\n              <BtnAddCard\n                className={styles.KkBtnAddColumnMain}\n                title={'Add another card'}\n                theme={'light'}\n                onClick={() => {\n                  handleOpenAddCardModal();\n                  clickOnColumnItemHandle(_id);\n                }}\n              />\n            </li>\n          ))}\n        <BtnAddColumn\n          className={styles.KkBtnAddColumnMain}\n          title={'Add another column'}\n          theme={'light'}\n          onClick={handleOpenAddModal}\n        />\n      </ul>\n      {isModalAddOpen && (\n        <Modal isOpen={isModalAddOpen} onClose={handleCloseAddModal}>\n          <PopColumn\n            modalTitle={'Add column'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseAddModal}\n            operation={addColumn}\n          />\n        </Modal>\n      )}\n      {isModalEditOpen && (\n        <Modal isOpen={isModalEditOpen} onClose={handleCloseEditModal}>\n          <PopColumn\n            modalTitle={'Edit column'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseEditModal}\n            idColumn={activeColumnId}\n            infoData={{ title: titleColumnId }}\n            operation={editColumn}\n          />\n        </Modal>\n      )}\n      {isModalAddCardOpen && (\n        <Modal isOpen={isModalAddCardOpen} onClose={handleCloseAddCardModal}>\n          <AddCard\n            modalTitle={'Add card'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseAddCardModal}\n            idColumn={activeColumnId}\n            // infoData={{title: titleColumnId}}\n            // operation={editColumn}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\n// // 💙💛 Kostiantyn Koshyk\n// import styles from 'styles/index.module.scss';\n// import { BtnAddColumn } from './BtnAddColumn';\n// import { Filters } from './Filters';\n// import { TaskColumn } from './TaskColumn';\n// // import { useEffect } from 'react';\n// // import { useBoards } from 'hooks';\n// import {\n//   useDispatch,\n//   // , useSelector\n// } from 'react-redux';\n// import {\n//   addBoards,\n//   // deleteBoards,\n//   // getAllBoards,\n//   // getBoardById,\n//   // updateBoard,\n// } from 'redux/board/boardOperations';\n// // import {\n//   // addColumn,\n//   // deleteColumn,\n//   // getColumnById,\n//   // getColumns,\n//   // updateColumn,\n// // } from 'redux/column/columnOperations';\n// // import { useColumns } from 'hooks/useColumns';\n// import {\n//   // addTask,\n//   // deleteTask,\n//   // getTasks,\n//   // updateTask,\n// } from 'redux/task/taskOperations';\n// // import { colors } from '@mui/material';\n\n// export const MainDashboard = () => {\n//   // const idBoard = '64f494c005baf51a1e771ede';\n//   // const {\n//   //   // allBoards,\n//   //   boardById,\n//   // } = useBoards();\n//   // const {\n//   //   allColumns,\n//   //   // , columnById, allTasks\n//   // } = useColumns();\n//   // const dispatch = useDispatch();\n\n//   // useEffect(() => {\n//   //   dispatch(getBoardById(idBoard));\n//   //   dispatch(getColumns(idBoard));\n//   //   dispatch(getAllBoards());\n//   //   dispatch(getTasks('64f3b37f79cb8e4510358ae7'));\n//   // }, [dispatch]);\n\n//   // const click = () => {\n//     // ======================================================== Board\n//     // 1. Создать Board\n//     // dispatch(\n//     //   addBoards({\n//     //     title: 'New Board',\n//     //     icon: 'icon-project',\n//     //     background: 'background2',\n//     //   })\n//     // );\n//     // // 2. Удалить Board\n//     // dispatch(deleteBoards('64f39de379cb8e4510358425'));\n//     // 3 Обновить Board\n//     // dispatch(\n//     //   updateBoard({\n//     //     _id: '64f39d8079cb8e45103583f2',\n//     //     title: 'Board update',\n//     //     icon: 'icon-colors',\n//     //     background: 'background1',\n//     //   })\n//     // );\n//     // 4 Получить все Boards\n//     // dispatch(getAllBoards());\n//     // 5 Получить все Boards\n//     // dispatch(getBoardById('64f39de379cb8e4510358425'));\n//     // ============================================================= Column\n//     // 1. Создать Column\n//     // dispatch(\n//     //   addColumn({\n//     //     title: 'New Column',\n//     //     board: '64f3ccb879cb8e4510359091',\n//     //   })\n//     // );\n//     // 2. Удалить Column (передать id колонки)\n//     // dispatch(deleteColumn('64f3cd3c79cb8e45103590af'));\n//     // 3 Обновить Column\n//     // dispatch(\n//     //   updateColumn({ id: '64f3a60f79cb8e45103586b0', title: 'New Column 1' })\n//     // );\n//     // 4 Получить все Column\n//     // dispatch(getColumns());\n//     // 5 Получить колонку по id\n//     // dispatch(getColumnById('64f3a60f79cb8e45103586b0'));\n//     // =============================================================== Tasks\n//     // 1. Создать Task\n//     // dispatch(\n//     //   addTask({\n//     //     title: 'New Task 1',\n//     //     taskOwner: '64f3b37f79cb8e4510358ae7',\n//     //     description: 'task description',\n//     //   })\n//     // );\n//     // 2. Удалить Task (передать id колонки)\n//     // dispatch(deleteTask('64f3a6ba79cb8e451035877c'));\n//     // 3 Обновить Task\n//     // dispatch(\n//     //   updateTask({\n//     //     taskId: '64f237418ad71f5d5364dc4f',\n//     //     title: 'Linda',\n//     //     description: '',\n//     //     priority: '',\n//     //     deadLine: '',\n//     //   })\n//     // );\n//     // 4 Получить все Tsks\n//     // dispatch(getTasks('64f3b37f79cb8e4510358ae7'));\n//   // };\n\n//   // console.log('allBoards :>>>>>>>>>>>>>>>>>> ', allBoards);\n//   // console.log('allColumns :>>>>>>>>>>>>>>>>> ', allColumns);\n//   // console.log('allTasks :>>>>>>>>>>>>>>>>> ', allTasks);\n\n//   // if (!boardById) return;\n\n//   // const { title } = boardById;\n\n//   // const onAddColumn = () => {\n//   //   console.log('Add Column click');\n//   // };\n\n//   return (\n//     <>\n//       <Filters className={styles.KkFilters} />\n//       {/* <button onClick={click}>click</button> */}\n\n//       <ul className={styles.KkColums}>\n//         {/* {allColumns.map(({ _id, title }) => (\n//           <li key={_id}>\n//             <TaskColumn\n//               className={styles.KkTaskColumn}\n//               titleCards={title}\n//               idColumn={_id}\n//             />\n//             <p>id Column: {_id}</p>\n//           </li>\n//         ))} */}\n//         <BtnAddColumn\n//           className={styles.KkBtnAddColumnMain}\n//           title={'Add column'}\n//           theme={'light'}\n//           // onClick={onAddColumn}\n//         />\n//       </ul>\n//     </>\n//   );\n//         }\n","import { useEffect } from 'react';\nimport {\n  useDispatch,\n  // useSelector\n} from 'react-redux';\nimport { getAllBoards, getBoardById } from 'redux/board/boardOperations';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\nimport { useParams } from 'react-router-dom';\n// import EditProfile from 'components/EditProfile/EditProfile';\n// import { useAuth } from 'hooks'; // s\n// import AddBoard from './testAddBoard';\n// import { AddCard } from 'components/AddCard';\n// import { Card } from 'components/Card';\n// import NewBoard from 'components/ModalBoard/NewBoard';\n// import { PopColumn } from 'components/PopColumn';\n\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  const {boardName} = useParams()\n  // console.log('idBoard :>> ', boardName);\n  //   const { user } = useAuth();\n  //   console.log(user)\n  useEffect(() => {\n    dispatch(getAllBoards());\n    dispatch(getBoardById(boardName));\n  }, [boardName, dispatch]);\n\n  return (\n    <section>\n      <MainDashboard />\n      {/* <EditProfile/> */}\n      {/* <AddBoard /> */}\n      {/* <AddCard /> */}\n      {/* <Card /> */}\n      {/* <NewBoard /> */}\n      {/* <PopColumn /> */}\n    </section>\n  );\n};\n//   return (\n//     <section className={styles.YMScreenReg}>\n//       <div className={styles.AfWelcomRegWr}>\n//         <MainDashboard />\n//         {/* <EditProfile/> */}\n//         <AddBoard />\n//         {/* <AddCard /> */}\n//         {/* <Card /> */}\n//         {/* <NewBoard /> */}\n//         {/* <PopColumn /> */}\n//       </div>\n//     </section>\n//   );\n// };\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <ScreensPage />\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["Filters","_ref","className","boardById","useBoards","_jsx","children","_jsxs","styles","title","onClick","console","log","width","height","href","concat","SvgSprite","BtnAddColumn","theme","clsx","PopColumn","modalTitle","modalBtnTitle","onClose","operation","idColumn","infoData","user","useAuth","boardId","useParams","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","valueInput","setvalueInput","scss","onSubmit","e","preventDefault","dataSubmit","board","boardName","autoComplete","type","name","placeholder","autoFocus","required","value","onChange","event","_event$target","target","prev","_objectSpread","_defineProperty","BtnAddCard","AddCard","cardTitle","id","description","priority","deadline","titleValue","setTitleValue","_useState3","_useState4","descriptionValue","setDescriptionValue","_useState5","_useState6","selectedPriority","setSelectedPriority","_useState7","_useState8","inputWidth","setInputWidth","_useState9","_useState10","isCalendarOpen","setIsCalendarOpen","_useState11","dayjs","_useState12","selectedDate","setSelectedDate","dateFormat","format","priorityStyles","low","indigo","medium","pink","high","lightGreen","without","grey","useEffect","contentWidth","length","cardData","elements","trim","addTasks","reset","currentTarget","document","body","style","overflow","defaultValue","Object","keys","map","Radio","item","checked","inputProps","sx","color","fontSize","backgroundColor","borderRadius","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","open","date","disablePast","outsideCurrentMonth","dayOfWeekFormatter","day","slice","toUpperCase","slots","openPickerButton","slotProps","popper","placement","top","left","transform","border","padding","hight","textAlign","borderBottom","margin","marginTop","marginBottom","fontFamily","fontweight","lineHeight","calendarHeader","position","fontWeight","letterSpacing","display","right","previousIconButton","stroke","nextIconButton","textField","fullWidth","variant","size","minWidth","InputProps","disableUnderline","endAdornment","InputAdornment","cursor","edge","getBgColor","isModalOpen","setIsModalOpen","deadlineIsToday","borderLeftColor","Modal","isOpen","MainDashboard","columns","st","useSelector","state","isModalAddOpen","setIsModalAddOpen","isModalEditOpen","setIsModalEditOpen","isModalAddCardOpen","setIsModalAddCardOpen","activeColumnId","setActiveColumnId","titleColumnId","setTitleColumnId","handleCloseAddModal","handleCloseEditModal","handleCloseAddCardModal","clickOnColumnItemHandle","columnId","_Fragment","_id","tasks","clickOnColumnTitleHandle","deleteColumn","_ref2","titleCard","deadLine","Card","addColumn","editColumn","getAllBoards","getBoardById","ScreensPage"],"sourceRoot":""}