{"version":3,"file":"static/js/472.d2efae9b.chunk.js","mappings":"gPAKaA,EAAU,SAAHC,GAAuB,IAAjBC,EAASD,EAATC,UAChBC,GAAcC,EAAAA,EAAAA,KAAdD,UAQR,OACEE,EAAAA,EAAAA,KAAA,OAAKH,UAAWA,EAAUI,UACxBC,EAAAA,EAAAA,MAAA,OAAKL,UAAWM,EAAAA,EAAAA,cAAqBF,SAAA,EACnCD,EAAAA,EAAAA,KAAA,MACEH,UAAWM,EAAAA,EAAAA,QACXC,MAAO,CAAEC,SAAUP,EAAUQ,YAAc,OAAQL,SAElDH,EAAUS,SAIbL,EAAAA,EAAAA,MAAA,UAAQL,UAAWM,EAAAA,EAAAA,aAAqBK,QAjB5B,WAChBC,QAAQC,IACN,kNAEJ,EAaiET,SAAA,EACzDD,EAAAA,EAAAA,KAAA,OAAKW,MAAM,OAAOC,OAAO,OAAMX,UAC7BD,EAAAA,EAAAA,KAAA,OAAKa,KAAI,GAAAC,OAAKC,EAAAA,EAAS,qBAGzBf,EAAAA,EAAAA,KAAA,KAAAC,SAAG,mBAKb,E,UC9Bae,EAAe,SAAHpB,GAA8C,IAAxCC,EAASD,EAATC,UAAWU,EAAKX,EAALW,MAAOU,EAAKrB,EAALqB,MAAOT,EAAOZ,EAAPY,QACtD,OACER,EAAAA,EAAAA,KAAA,OAAKH,UAAWA,EAAUI,UACxBC,EAAAA,EAAAA,MAAA,UACEL,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAAA,YAAoBA,EAAAA,EAAOc,IAC3CT,QAASA,EAAQP,SAAA,EAEjBD,EAAAA,EAAAA,KAAA,OAAKH,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAAA,iBAAyBA,EAAAA,EAAOc,IAAQhB,UAC3DD,EAAAA,EAAAA,KAAA,OAAKH,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAOc,IAASN,MAAM,OAAOC,OAAO,OAAMX,UAC7DD,EAAAA,EAAAA,KAAA,OAAKa,KAAI,GAAAC,OAAKC,EAAAA,EAAS,qBAG3Bf,EAAAA,EAAAA,KAAA,KAAGH,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAOc,IAAQhB,SAAEM,QAI5C,E,wCCdaY,EAAY,SAAHvB,GAOf,IANLwB,EAAUxB,EAAVwB,WACAC,EAAazB,EAAbyB,cACAC,EAAO1B,EAAP0B,QACAC,EAAS3B,EAAT2B,UACAC,EAAQ5B,EAAR4B,SACAC,EAAQ7B,EAAR6B,SAEQC,GAASC,EAAAA,EAAAA,KAATD,KACFE,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MACjBC,GAAoCC,EAAAA,EAAAA,UAClCR,EAAW,CAAElB,MAAOkB,EAASlB,OAAU,CAAEA,MAAO,KACjD2B,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAFMI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GA4BhC,OACEhC,EAAAA,EAAAA,MAAA,OAAKL,UAAWyC,EAAAA,EAAAA,kBAAwB,aAAYZ,EAAKT,MAAMhB,SAAA,EAC7DD,EAAAA,EAAAA,KAAA,MAAIH,UAAWyC,EAAAA,EAAAA,cAAmBrC,SAAEmB,KACpClB,EAAAA,EAAAA,MAAA,QAAMqC,SApBW,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAalB,EACf,CACEjB,MAAO6B,EAAW7B,MAClBiB,SAAUA,GAEZ,CACEjB,MAAO6B,EAAW7B,MAClBoC,MAAOf,EAAQgB,WAErBd,EAASP,EAAUmB,IAEnBpB,GACF,EAKkCuB,aAAa,MAAK5C,SAAA,EAC9CD,EAAAA,EAAAA,KAAA,SAAAC,UACED,EAAAA,EAAAA,KAAA,SACE8C,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,WAAS,EACTC,UAAQ,EACRrD,UAAWyC,EAAAA,EAAAA,cACXa,MAAOf,EAAW7B,OAAS,GAC3B6C,SAtCW,SAAAC,GACnB,IAAAC,EAAwBD,EAAME,OAAtBR,EAAIO,EAAJP,KAAMI,EAAKG,EAALH,MACdd,GAAc,SAAAmB,GAAI,OAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACbD,GAAI,IAAAE,EAAAA,EAAAA,GAAA,GACNX,EAAOI,GAAK,GAEjB,OAmCMjD,EAAAA,EAAAA,MAAA,UAAQ4C,KAAK,SAASjD,UAAWyC,EAAAA,EAAAA,YAAiBrC,SAAA,EAChDD,EAAAA,EAAAA,KAAA,OAAKH,UAAWyC,EAAAA,EAAAA,qBAA0BrC,UACxCD,EAAAA,EAAAA,KAAA,OAAKH,UAAWyC,EAAAA,EAAAA,YAAiBrC,UAC/BD,EAAAA,EAAAA,KAAA,OAAKa,KAAME,EAAAA,EAAY,mBAG1BM,UAKX,ECpEasC,EAAa,SAAH/D,GAA8C,IAAxCW,EAAKX,EAALW,MAAOV,EAASD,EAATC,UAAWoB,EAAKrB,EAALqB,MAAOT,EAAOZ,EAAPY,QACpD,OACER,EAAAA,EAAAA,KAAA,OAAKH,UAAWA,EAAUI,UACxBC,EAAAA,EAAAA,MAAA,UACEL,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAAA,UAAkBA,EAAAA,EAAOc,IACzCT,QAASA,EAAQP,SAAA,EAEjBD,EAAAA,EAAAA,KAAA,OAAKH,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAAA,eAAuBA,EAAAA,EAAOc,IAAQhB,UACzDD,EAAAA,EAAAA,KAAA,OAAKH,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAOc,IAASN,MAAM,OAAOC,OAAO,OAAMX,UAC7DD,EAAAA,EAAAA,KAAA,OAAKa,KAAI,GAAAC,OAAKC,EAAAA,EAAS,qBAG3Bf,EAAAA,EAAAA,KAAA,KAAGH,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAOc,IAAQhB,SAAEM,QAI5C,E,6GCRaqD,EAAU,SAAHhE,GAWb,IAVLwB,EAAUxB,EAAVwB,WACAI,EAAQ5B,EAAR4B,SACAqC,EAAEjE,EAAFiE,GACAC,EAASlE,EAATkE,UACAC,EAAWnE,EAAXmE,YACAC,EAAQpE,EAARoE,SACAC,EAAQrE,EAARqE,SACA5C,EAAazB,EAAbyB,cACAC,EAAO1B,EAAP0B,QACAC,EAAS3B,EAAT2B,UAEQG,GAASC,EAAAA,EAAAA,KAATD,KACFI,GAAWC,EAAAA,EAAAA,MACTa,GAAcf,EAAAA,EAAAA,MAAde,UAERZ,GAAoCC,EAAAA,EAAAA,UAAS6B,GAAU5B,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDkC,EAAUhC,EAAA,GAAEiC,EAAajC,EAAA,GAChCkC,GAAgDnC,EAAAA,EAAAA,UAAS8B,GAAYM,GAAAlC,EAAAA,EAAAA,GAAAiC,EAAA,GAA9DE,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAC5CG,GAAgDvC,EAAAA,EAAAA,UAC9C+B,GAAsB,WACvBS,GAAAtC,EAAAA,EAAAA,GAAAqC,EAAA,GAFME,EAAgBD,EAAA,GAAEE,EAAmBF,EAAA,GAG5CG,GAAoC3C,EAAAA,EAAAA,UAAS,QAAO4C,GAAA1C,EAAAA,EAAAA,GAAAyC,EAAA,GAA7CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA4C/C,EAAAA,EAAAA,WAAS,GAAMgD,GAAA9C,EAAAA,EAAAA,GAAA6C,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAAwCnD,EAAAA,EAAAA,UACtCgC,EAAWoB,IAAMpB,EAAU,cAAgBoB,OAC5CC,IAAAnD,EAAAA,EAAAA,GAAAiD,EAAA,GAFMG,GAAYD,GAAA,GAAEE,GAAeF,GAAA,GAc9BG,GACJJ,IAAME,IAAcG,OAAO,kBAC3BL,MAAQK,OAAO,gBACX,kBACA,eAwDAC,GAAiB,CACrBC,IAAKC,EAAAA,EAAAA,KACLC,OAAQC,EAAAA,EAAAA,KACRC,KAAMC,EAAAA,EAAAA,KACNC,QAASC,EAAAA,EAAAA,MASX,OALAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAwD,EAAzCd,GAAaG,OAAOD,IAAYa,OACrDvB,EAAc,GAADjE,OAAIuF,EAAY,MAC/B,GAAG,CAACd,GAAcE,MAGhBvF,EAAAA,EAAAA,MAAA,OAAKL,UAAWyC,EAAAA,EAAAA,eAAqB,aAAYZ,EAAKT,MAAMhB,SAAA,EAC1DD,EAAAA,EAAAA,KAAA,MAAIH,UAAWyC,EAAAA,EAAAA,WAAgBrC,SAAEmB,KACjClB,EAAAA,EAAAA,MAAA,QAAMqC,SApEe,SAAAc,GAEvBA,EAAMZ,iBAEN,IAKM8D,EAAW,CAEfhG,MAPiB8C,EAAME,OAAOiD,SAASjG,MAAM4C,MAAMsD,OAQnD1C,YAPuBV,EAAME,OAAOiD,SAASzC,YAAYZ,MAAMsD,OAQ/DzC,SAPoBX,EAAME,OAAOiD,SAASxC,SAASb,MAQnDuD,SAPoBrB,IAAME,IAAcG,OAAO,eAY/C5D,EACEP,EAFAsC,GAESJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACN8C,GAAQ,IACXI,UAAWnF,EACXoF,OAAQ/C,EACRjC,QAASgB,KAKFa,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI8C,GAAQ,IAAEI,UAAWnF,EAAUI,QAASgB,MAI3DS,EAAME,OAAOsD,QAETxD,EAAMyD,gBAAkBzD,EAAME,SAChCjC,IACAyF,SAASC,KAAK5G,MAAM6G,SAAW,UAEnC,EA6BsCpE,aAAa,MAAK5C,SAAA,EAClDD,EAAAA,EAAAA,KAAA,SAAAC,UACED,EAAAA,EAAAA,KAAA,SACE8C,KAAK,OACLC,KAAK,QACLC,YAAY,QACZC,WAAS,EACTC,UAAQ,EACRrD,UAAWyC,EAAAA,EAAAA,WACX4E,aAAchD,EACdd,SAAU,SAAAZ,GAAC,OAAI2B,EAAc3B,EAAEe,OAAOJ,MAAM,OAGhDnD,EAAAA,EAAAA,KAAA,SAAAC,UACED,EAAAA,EAAAA,KAAA,YACE8C,KAAK,OACLC,KAAK,cACLC,YAAY,cACZnD,UAAS,GAAAiB,OAAKwB,EAAAA,EAAAA,WAAe,KAAAxB,OAAIwB,EAAAA,EAAAA,kBACjC4E,aAAc5C,EACdlB,SAAU,SAAAZ,GAAC,OAAI+B,EAAoB/B,EAAEe,OAAOJ,MAAM,OAItDjD,EAAAA,EAAAA,MAAA,OAAKL,UAAWyC,EAAAA,EAAAA,WAAgBrC,SAAA,CAAC,eAE/BD,EAAAA,EAAAA,KAAA,OAAKH,UAAWyC,EAAAA,EAAAA,gBAAqBrC,SAClCkH,OAAOC,KAAKzB,IAAgB0B,KAC3B,SACErD,GAAS,OAEThE,EAAAA,EAAAA,KAACsH,EAAAA,GAAK7D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACJ5D,UAAWyC,EAAAA,EAAAA,eAzDG,CAE5Ba,MAFmBoE,EA2DYvD,EAxD/BZ,SAAU,SAAAZ,GAAC,OAAImC,EAAoBnC,EAAEe,OAAOJ,MAAM,EAClDqE,QAAS9C,IAAqB6C,EAC9BxE,KAAM,WACN0E,WAAY,CAAE,aAAcF,KAqDY,IAC1BG,GAAI,CACFC,MAAOhC,GAAe3B,GACtB,gBAAiB,CACf2D,MAAOhC,GAAe3B,IAExB,iCAAkC,CAChC4D,SAAU,QAEZ,uCAAwC,CACtCA,SAAU,OACVC,gBAAiBlC,GAAe3B,GAChC8D,aAAc,UAbb9D,GA1DA,IAAAuD,CA0EL,UAMVrH,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,KAAGH,UAAWyC,EAAAA,EAAAA,WAAgBrC,SAAC,cAC/BD,EAAAA,EAAAA,KAAC+H,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAahI,UAE9CD,EAAAA,EAAAA,KAACkI,EAAAA,EAAU,CACTC,KAAMjD,EACN5D,QAAS,kBAAM6D,GAAkB,EAAM,EACvC/B,SAAU,SAAAgF,GAAI,OAAI5C,GAAgB4C,EAAK,EAEvCjF,MAAOoC,GACPG,OAAQD,GACR4C,aAAa,EACbC,qBAAqB,EACrBC,mBAAoB,SAAAC,GAAG,OAAIA,EAAIC,MAAM,EAAG,GAAGC,aAAa,EACxDC,MAAO,CACLC,iBAAkB,kBAAM,IAAI,GAE9BC,UAAW,CACTC,OAAQ,CACNC,UAAW,eACXrB,GAAI,CACF,kDAAmD,CAEjDsB,OAAQ,YACRC,YAA4B,WAAfvH,EAAKT,MAAqB,UAAY,UACnD6G,aAAc,MACdzH,QAAS,OACTM,MAAO,QACPC,OAAQ,SAEV,0BAA2B,CACzBD,MAAO,SAGT,wBAAyB,CAGvBA,MAAO,QACPuI,MAAO,SAGT,mCAAoC,CAElCtI,OAAQ,SAEV,mCAAoC,CAClCD,MAAO,SAGT,iCAAkC,CAGhCwI,UAAW,SACXC,aAAc,oCAEhB,kCAAmC,CACjCC,OAAQ,GAEV,sBAAuB,CAGrBC,UAAW,OACX3I,MAAO,OACPC,OAAQ,QAEV,iCAAkC,CAGhCD,MAAO,QACPuI,MAAO,SAET,gCAAiC,CAE/BK,aAAc,OAEhB,+BAAgC,CAE9B5I,MAAO,OACPC,OAAQ,QAEV,sBAAuB,CAErBD,MAAO,OACPC,OAAQ,QAEV,sBAAuB,CAGrB4I,WAAY,UACZ5B,SAAU,OACV6B,WAAY,MACZC,WAAY,QAEd,mCAAoC,CAElC7B,gBACiB,WAAfnG,EAAKT,MAAqB,UAAY,UACxC,UAAW,CACT4G,gBACiB,WAAfnG,EAAKT,MAAqB,UAAY,cAKhD0I,eAAgB,CACdjC,GAAI,CACF,iCAAkC,CAChCkC,SAAU,YAEZ,2CAA4C,CAG1CJ,WAAY,sBACZ5B,SAAU,OACViC,WAAY,IACZC,cAAe,UACfC,QAAS,QAEX,kCAAmC,CACjCA,QAAS,gBAEX,6CAA8C,CAC5CA,QAAS,QAEX,yBAA0B,CAExBH,SAAU,WACVI,IAAK,OACLC,KAAM,QAER,2BAA4B,CAE1BL,SAAU,WACVI,IAAK,OACLE,MAAO,SAGX9J,MAAO,CACL2J,QAAS,SACTV,OAAQ,EACRhJ,QAAS,IAIb8J,mBAAoB,CAClBzC,GAAI,CACF0C,OAAuB,WAAf1I,EAAKT,MAAqB,UAAY,YAGlDoJ,eAAgB,CACd3C,GAAI,CACF0C,OAAuB,WAAf1I,EAAKT,MAAqB,UAAY,YAIlDqJ,UAAW,CACTC,WAAW,EACX/J,QAAS,kBAAM2E,GAAkB,EAAK,EACtCqF,QAAS,WACTC,KAAM,QACN/C,GAAI,CACF/G,MAAOmE,EACP4F,SAAU,QACV,gDAAiD,CAE/CrK,QAAS,IAGbsK,WAAY,CACVC,kBAAkB,EAClB,aAAc,WACdxK,MAAO,CACLwH,SAAU,OACV4B,WAAY,sBACZ7B,MAAsB,WAAfjG,EAAKT,MAAqB,UAAY,UAC7C4I,WAAY,KAGdgB,cACE7K,EAAAA,EAAAA,KAAC8K,EAAAA,EAAc,CACblB,SAAS,QACTlC,GAAI,CAAEqD,OAAQ,WAAY9K,UAE1BD,EAAAA,EAAAA,KAAA,OAAKH,UAAWyC,EAAAA,EAAAA,cAAoB3B,MAAM,OAAMV,UAC9CD,EAAAA,EAAAA,KAAA,OACEa,KAAME,EAAAA,EAAY,qBAClB,aAAW,gBACXiK,KAAK,yBAYzB9K,EAAAA,EAAAA,MAAA,UAAQ4C,KAAK,SAASjD,UAAWyC,EAAAA,EAAAA,eAAoBrC,SAAA,EACnDD,EAAAA,EAAAA,KAAA,OAAKH,UAAWyC,EAAAA,EAAAA,iBAAsBrC,UACpCD,EAAAA,EAAAA,KAAA,OAAKH,UAAWyC,EAAAA,EAAAA,gBAAqBrC,UACnCD,EAAAA,EAAAA,KAAA,OAAKa,KAAME,EAAAA,EAAY,mBAG1BM,UAKX,EC7XM4J,EAAa,SAAAjH,GACjB,OAAQA,GACP,IAAK,MACH,MAAO,UACT,IAAK,SACH,MAAO,yBACT,IAAK,OACH,MAAO,UACT,IAAK,UACH,MAAO,yBAIX,EAuGD,EApGa,SAAHpE,GAAsE,IAAhEiE,EAAEjE,EAAFiE,GAAIC,EAASlE,EAATkE,UAAWC,EAAWnE,EAAXmE,YAAaC,EAAQpE,EAARoE,SAAUC,EAAQrE,EAARqE,SAAUzC,EAAQ5B,EAAR4B,SACtDE,GAASC,EAAAA,EAAAA,KAATD,KACAkB,GAAcf,EAAAA,EAAAA,MAAde,UACRZ,GAAsCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9CkJ,EAAWhJ,EAAA,GAAEiJ,EAAcjJ,EAAA,GAC5BJ,GAAWC,EAAAA,EAAAA,MACXqJ,EAAkB/F,MAAQK,OAAO,gBAAkBzB,EAMnDoH,EAAmB,WACvBF,GAAe,EACjB,EAEA,OACEjL,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEkL,gBAAiBL,EAAWjH,IAAanE,UAAWyC,EAAAA,EAAAA,gBAAsB,aAAYZ,EAAKT,MAAMhB,SAAA,EAE7GD,EAAAA,EAAAA,KAAA,MAAIH,UAAWyC,EAAAA,EAAAA,YAAiBrC,SAAE6D,KAClC9D,EAAAA,EAAAA,KAAA,KAAGH,UAAWyC,EAAAA,EAAAA,kBAAuBrC,SAAE8D,KAEvC/D,EAAAA,EAAAA,KAAA,MAAIH,UAAWyC,EAAAA,EAAAA,mBAEfpC,EAAAA,EAAAA,MAAA,OAAKL,UAAWyC,EAAAA,EAAAA,sBAA2BrC,SAAA,EACzCC,EAAAA,EAAAA,MAAA,SAAOL,UAAWyC,EAAAA,EAAAA,sBAA2BrC,SAAA,EAC3CD,EAAAA,EAAAA,KAAA,SAAAC,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAIH,UAAWyC,EAAAA,EAAAA,gBAAqBrC,SAAC,cACrCD,EAAAA,EAAAA,KAAA,MAAIH,UAAWyC,EAAAA,EAAAA,gBAAqBrC,SAAC,mBAGzCD,EAAAA,EAAAA,KAAA,SAAAC,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAAA,OACEI,MAAO,CAAEyH,gBAAiBoD,EAAWjH,IACrCnE,UAAWyC,EAAAA,EAAAA,0BAGftC,EAAAA,EAAAA,KAAA,MAAIH,UAAWyC,EAAAA,EAAAA,WAAgBrC,SAAEgE,aAOvC/D,EAAAA,EAAAA,MAAA,OAAKL,UAAWyC,EAAAA,EAAAA,mBAAwBrC,SAAA,CACrCmL,IACEpL,EAAAA,EAAAA,KAAA,OAAKH,UAAWyC,EAAAA,EAAAA,eAAqB3B,MAAM,KAAKC,OAAO,KAAKR,MAAO,CAAEgK,OAAuB,WAAf1I,EAAKT,MAAqB,UAAY,WAAYhB,UAE9HD,EAAAA,EAAAA,KAAA,OAAKa,KAAME,EAAAA,EAAY,kBAG3Bf,EAAAA,EAAAA,KAAA,UACE8C,KAAK,SACLjD,UAAWyC,EAAAA,EAAAA,cACX,aAAW,YACX9B,QAlDc,WACtB2K,GAAe,EACjB,EAgDmClL,UAEzBD,EAAAA,EAAAA,KAAA,OAAKW,MAAM,KAAKC,OAAO,KAAIX,UACzBD,EAAAA,EAAAA,KAAA,OAAKa,KAAME,EAAAA,EAAY,qBAG1BmK,IACClL,EAAAA,EAAAA,KAACuL,EAAAA,EAAK,CAACC,OAAQN,EAAa5J,QAAS+J,EAAiBpL,UACpDD,EAAAA,EAAAA,KAAC4D,EAAO,CACNpC,SAAUA,EACVJ,WAAY,YACZyC,GAAIA,EACJC,UAAWA,EACXC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACV5C,cAAe,OACfE,UAAWkK,EAAAA,GACXnK,QAAS+J,OASfrL,EAAAA,EAAAA,KAAA,UACE8C,KAAK,SACLjD,UAAWyC,EAAAA,EAAAA,cACX,aAAW,cACX9B,QAAS,kBAAMsB,GAAS4J,EAAAA,EAAAA,IAAY,CAAE7H,GAAAA,EAAIjB,UAAAA,IAAa,EAAC3C,UAExDD,EAAAA,EAAAA,KAAA,OAAKW,MAAM,KAAKC,OAAO,KAAIX,UACzBD,EAAAA,EAAAA,KAAA,OAAKa,KAAME,EAAAA,EAAY,4BAOrC,ECtHa4K,EAAa,SAAH/L,GAAsD,IAAhDC,EAASD,EAATC,UAAWU,EAAKX,EAALW,MAAOU,EAAKrB,EAALqB,MAAO2K,EAAMhM,EAANgM,OAAQC,EAAOjM,EAAPiM,QAS5D,OACE7L,EAAAA,EAAAA,KAAA,OAAKH,UAAWA,EAAUI,UACxBC,EAAAA,EAAAA,MAAA,OAAKL,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAAA,iBAAyBA,EAAAA,EAAOc,IAAQhB,SAAA,EAC3DC,EAAAA,EAAAA,MAAA,KAAGL,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAOc,IAAQhB,SAAA,CAAC,IAAEM,MACrCL,EAAAA,EAAAA,MAAA,OAAKL,UAAWM,EAAAA,EAAAA,gBAAuBF,SAAA,EACrCD,EAAAA,EAAAA,KAAA,UAAQH,UAAWM,EAAAA,EAAAA,WAAmBK,QAASoL,EAAO3L,UACpDD,EAAAA,EAAAA,KAAA,OAAKH,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAOc,IAASN,MAAM,OAAOC,OAAO,OAAMX,UAC7DD,EAAAA,EAAAA,KAAA,OAAKa,KAAI,GAAAC,OAAKC,EAAAA,EAAS,uBAI3Bf,EAAAA,EAAAA,KAAA,UAAQH,UAAWM,EAAAA,EAAAA,WAAmBK,QAASqL,EAAQ5L,UACrDD,EAAAA,EAAAA,KAAA,OAAKH,WAAWqB,EAAAA,EAAAA,GAAKf,EAAAA,EAAOc,IAASN,MAAM,OAAOC,OAAO,OAAMX,UAC7DD,EAAAA,EAAAA,KAAA,OAAKa,KAAI,GAAAC,OAAKC,EAAAA,EAAS,4BAOrC,ECda+K,EAAgB,WAC3B,IAAQC,GAAYhM,EAAAA,EAAAA,KAAZgM,QACFjK,GAAWC,EAAAA,EAAAA,MAEjBC,GAA4CC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDgK,EAAc9J,EAAA,GAAE+J,EAAiB/J,EAAA,GACxCkC,GAA8CnC,EAAAA,EAAAA,WAAS,GAAMoC,GAAAlC,EAAAA,EAAAA,GAAAiC,EAAA,GAAtD8H,EAAe7H,EAAA,GAAE8H,EAAkB9H,EAAA,GAC1CG,GAAoDvC,EAAAA,EAAAA,WAAS,GAAMwC,GAAAtC,EAAAA,EAAAA,GAAAqC,EAAA,GAA5D4H,EAAkB3H,EAAA,GAAE4H,EAAqB5H,EAAA,GAChDG,GAA4C3C,EAAAA,EAAAA,UAAS,IAAG4C,GAAA1C,EAAAA,EAAAA,GAAAyC,EAAA,GAAjD0H,EAAczH,EAAA,GAAE0H,EAAiB1H,EAAA,GACxCG,GAA0C/C,EAAAA,EAAAA,UAAS,IAAGgD,GAAA9C,EAAAA,EAAAA,GAAA6C,EAAA,GAA/CwH,EAAavH,EAAA,GAAEwH,EAAgBxH,EAAA,GAMhCyH,EAAsB,WAC1BT,GAAkB,EACpB,EAKMU,EAAuB,WAC3BR,GAAmB,EACrB,EAKMS,EAA0B,WAC9BP,GAAsB,EACxB,EAEMQ,EAA0B,SAAAC,GAC9BP,EAAkBO,EACpB,EAMA,OACE5M,EAAAA,EAAAA,MAAA,OAAKL,UAAWM,EAAAA,EAAAA,uBAA8BF,SAAA,EAC5CD,EAAAA,EAAAA,KAACL,EAAO,CAACE,UAAWM,EAAAA,EAAAA,aAEpBD,EAAAA,EAAAA,MAAA,MAAIL,UAAWM,EAAAA,EAAAA,SAAgBF,SAAA,CAC5B8L,GACCA,EAAQ1E,KAAI,SAAAzH,GAAA,IAAGmN,EAAGnN,EAAHmN,IAAKxM,EAAKX,EAALW,MAAOyM,EAAKpN,EAALoN,MAAK,OAC9B9M,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EAEED,EAAAA,EAAAA,KAAC2L,EAAU,CACT9L,UAAWM,EAAAA,EAAAA,WACXI,MAAOA,EACPqL,OAAQ,WAjCpBO,GAAmB,GAmCLU,EAAwBE,GAlBP,SAAAxM,GAC/BkM,EAAiBlM,EACnB,CAiBgB0M,CAAyB1M,EAC3B,EACAsL,QAAS,kBAAM/J,GAASoL,EAAAA,EAAAA,IAAaH,GAAK,IAoC3CC,IACChN,EAAAA,EAAAA,KAAA,MAAIH,UAAWM,EAAAA,EAAAA,QAAeF,SAC3B+M,EAAM3F,KACL,SAAA8F,GAMO,IALEC,EAASD,EAAhB5M,MACAwD,EAAWoJ,EAAXpJ,YACAC,EAAQmJ,EAARnJ,SACA0C,EAAQyG,EAARzG,SACK2G,EAAMF,EAAXJ,IAEA,OACE/M,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACsN,EAAI,CACHxJ,UAAWsJ,EACXvJ,GAAIwJ,EACJtJ,YAAaA,EACbC,SAAUA,EACVC,SAAUyC,EACVlF,SAAUuL,KAPLM,EAWb,OAINrN,EAAAA,EAAAA,KAAC2D,EACC,CACA9D,UAAWM,EAAAA,EAAAA,aACXI,MAAO,mBACPU,MAAO,QACPT,QAAS,WAlGrB6L,GAAsB,GAoGRQ,EAAwBE,EAC1B,MAhFKA,EAkFJ,KAET/M,EAAAA,EAAAA,KAACgB,EAAY,CACXnB,UAAWM,EAAAA,EAAAA,mBACXI,MAAO,qBACPU,MAAO,QACPT,QA5HmB,WACzByL,GAAkB,EACpB,OA6HKD,IACChM,EAAAA,EAAAA,KAACuL,EAAAA,EAAK,CAACC,OAAQQ,EAAgB1K,QAASoL,EAAoBzM,UAC1DD,EAAAA,EAAAA,KAACmB,EAAS,CACRC,WAAY,aACZC,cAAe,MACfC,QAASoL,EACTnL,UAAWgM,EAAAA,OAIhBrB,IACClM,EAAAA,EAAAA,KAACuL,EAAAA,EAAK,CAACC,OAAQU,EAAiB5K,QAASqL,EAAqB1M,UAC5DD,EAAAA,EAAAA,KAACmB,EAAS,CACRC,WAAY,cACZC,cAAe,MACfC,QAASqL,EACTnL,SAAU8K,EACV7K,SAAU,CAAElB,MAAOiM,GACnBjL,UAAWiM,EAAAA,OAIhBpB,IACCpM,EAAAA,EAAAA,KAACuL,EAAAA,EAAK,CAACC,OAAQY,EAAoB9K,QAASsL,EAAwB3M,UAClED,EAAAA,EAAAA,KAAC4D,EAAO,CACNxC,WAAY,WACZC,cAAe,MACfC,QAASsL,EACTpL,SAAU8K,EACV/K,UAAWkM,EAAAA,SAMvB,EC7KA,EAfoB,WAClB,IAAM3L,GAAWC,EAAAA,EAAAA,MACTa,GAAcf,EAAAA,EAAAA,MAAde,UAOR,OALAwD,EAAAA,EAAAA,YAAU,WACRtE,GAAS4L,EAAAA,EAAAA,OACT5L,GAAS6L,EAAAA,EAAAA,IAAa/K,GACxB,GAAG,CAACA,EAAWd,KAGb9B,EAAAA,EAAAA,KAAA,WAAAC,UACED,EAAAA,EAAAA,KAAC8L,EAAa,KAGpB,ECXA,EAPiB,WACf,OACE9L,EAAAA,EAAAA,KAAA4N,EAAAA,SAAA,CAAA3N,UACED,EAAAA,EAAAA,KAAC6N,EAAW,KAGlB,C","sources":["components/MainDashboard/Filters.jsx","components/MainDashboard/BtnAddColumn.jsx","components/PopColumn/PopColumn.jsx","components/MainDashboard/BtnAddCard.jsx","components/AddCard/AddCard.jsx","components/Card/Card.jsx","components/MainDashboard/TitleCards.jsx","components/MainDashboard/MainDashboard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useBoards } from 'hooks';\n\nexport const Filters = ({ className }) => {\n  const { boardById } = useBoards();\n\n  const onFilters = () => {\n    console.log(\n      'Filters ckick меня кликнули в компоненте Filters.jsx 10 строка'\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2\n          className={styles.KkTitle}\n          style={{ padding: !boardById.background && '4px' }}\n        >\n          {boardById.title}\n        </h2>\n        {/* <h2 className={styles.KkTitle}>{boardById.title}</h2> */}\n\n        <button className={styles.KkBtnFilters} onClick={onFilters}>\n          <svg width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n\n          <p>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddColumn = ({ className, title, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnColumn, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAuth } from 'hooks';\n\nexport const PopColumn = ({\n  modalTitle,\n  modalBtnTitle,\n  onClose,\n  operation,\n  idColumn,\n  infoData,\n}) => {\n  const { user } = useAuth();\n  const boardId = useParams();\n  const dispatch = useDispatch();\n  const [valueInput, setvalueInput] = useState(\n    infoData ? { title: infoData.title } : { title: '' }\n  );\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInput(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const dataSubmit = idColumn\n      ? {\n          title: valueInput.title,\n          idColumn: idColumn,\n        }\n      : {\n          title: valueInput.title,\n          board: boardId.boardName,\n        };\n    dispatch(operation(dataSubmit));\n\n    onClose();\n  };\n\n  return (\n    <div className={scss.AAColumnContainer} data-theme={user.theme}>\n      <h4 className={scss.AAColumnTitle}>{modalTitle}</h4>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.AAColumnInput}\n            value={valueInput.title || ''}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={scss.AAColumnBtn}>\n          <div className={scss.AAColumnSvgContainer}>\n            <svg className={scss.AAColumnSvg}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// export default PopColumn;\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddCard = ({ title, className, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnCard, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusCard, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useAuth } from 'hooks';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { Radio, InputAdornment } from '@mui/material';\nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { useParams } from 'react-router-dom';\n\nexport const AddCard = ({\n  modalTitle,\n  idColumn,\n  id,\n  cardTitle,\n  description,\n  priority,\n  deadline,\n  modalBtnTitle,\n  onClose,\n  operation,\n}) => {\n  const { user } = useAuth();\n  const dispatch = useDispatch();\n  const { boardName } = useParams();\n\n  const [titleValue, setTitleValue] = useState(cardTitle); // для редагування\n  const [descriptionValue, setDescriptionValue] = useState(description); // для редагування\n  const [selectedPriority, setSelectedPriority] = useState(\n    priority ? priority : 'without'\n  );\n  const [inputWidth, setInputWidth] = useState('auto');\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(\n    deadline ? dayjs(deadline, 'DD/MM/YYYY') : dayjs()\n  ); // dayjs() - currentDate\n\n  //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  // deadline ? dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\") : dayjs()\n\n  // console.log(deadline) //01/09/2023\n  // console.log(dayjs(deadline)) // M {... Mon Jan 09 2023 00:00:00 ...} - міняє день і місяць місцями\n  // console.log(dayjs(deadline, 'DD/MM/YYYY')); // M {... Fri Sep 01 2023 00:00:00 ...} - тепер все Ок\n  // Тепер бібліотека Material UA застосує формат \"dddd, MMMM D\" і отримаємо те, що треба:\n  // console.log(dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\")); // Thursday, August 31\n\n  // \"Today, September 01\" або \"Saturday, September 02\"\n  const dateFormat =\n    dayjs(selectedDate).format('dddd, MMMM D') ===\n    dayjs().format('dddd, MMMM D')\n      ? '[Today,] MMMM D'\n      : 'dddd, MMMM D';\n\n  //------------------------------------- Submit -------------------------------------------\n\n  const handleFormSubmit = event => {\n    // відправка даних\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    const inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n    const inputDeadline = dayjs(selectedDate).format('DD/MM/YYYY'); //   29/11/2023\n\n    const cardData = {\n\n      title: inputTitle,\n      description: inputDescription,\n      priority: inputPriority,\n      deadLine: inputDeadline,\n    };\n    // {title: 'The Watch Spot Design', description: \"Create a visually stunning and eye-catching watch dial design that embodies our brand's\", priority: 'without', deadline: '11/10/2023', taskOwner: '64f548eb24765a1e4837366e'}\n    // відправка на бекенд, а потім в стор редакса\n    if (id) {\n      dispatch(\n        operation({\n          ...cardData,\n          taskOwner: idColumn,\n          idTask: id,\n          boardId: boardName,\n        })\n      );\n    } else {\n      dispatch(\n        operation({ ...cardData, taskOwner: idColumn, boardId: boardName })\n      );\n    }\n\n    event.target.reset();\n\n    if (event.currentTarget === event.target) {\n      onClose();\n      document.body.style.overflow = 'visible'; //body почне скролитися після закриття модалки\n    }\n  };\n\n  // --------------- пріоритетність ----------------------\n\n  const controlProps = item => ({\n    // low, medium, high, without\n    value: item,\n    onChange: e => setSelectedPriority(e.target.value),\n    checked: selectedPriority === item,\n    name: 'priority',\n    inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n    low: indigo[200],\n    medium: pink[200],\n    high: lightGreen[200],\n    without: grey[400],\n  };\n\n  //------------------ Ширина інпута DatePicker---------------------\n  useEffect(() => {\n    const contentWidth = selectedDate.format(dateFormat).length * 9;\n    setInputWidth(`${contentWidth}px`);\n  }, [selectedDate, dateFormat]);\n\n  return (\n    <div className={scss.OBAddContainer} data-theme={user.theme}>\n      <h4 className={scss.OBAddTitle}>{modalTitle}</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n            defaultValue={titleValue} // для редагування\n            onChange={e => setTitleValue(e.target.value)} // для редагування\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n            defaultValue={descriptionValue} // для редагування\n            onChange={e => setDescriptionValue(e.target.value)} // для редагування\n          />\n        </label>\n\n        <div className={scss.OBAddlabel}>\n          Label color\n          <div className={scss.OBAddRadioGroup}>\n            {Object.keys(priorityStyles).map(\n              (\n                priority //['low', 'medium', 'high', 'without']\n              ) => (\n                <Radio\n                  className={scss.OBAddradioBtn}\n                  key={priority}\n                  {...controlProps(priority)}\n                  sx={{\n                    color: priorityStyles[priority],\n                    '&.Mui-checked': {\n                      color: priorityStyles[priority],\n                    },\n                    '&.Mui-checked .MuiSvgIcon-root': {\n                      fontSize: '17px',\n                    },\n                    '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                      fontSize: '14px',\n                      backgroundColor: priorityStyles[priority],\n                      borderRadius: '50%',\n                    },\n                  }}\n                />\n              )\n            )}\n          </div>\n        </div>\n\n        <div>\n          <p className={scss.OBAddlabel}>Deadline</p>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            {/* dateAdapter={AdapterDayjs} - вказуємо, що під капотом використовуємо бібліотеку Day.js (її методи) */}\n            <DatePicker\n              open={isCalendarOpen}\n              onClose={() => setIsCalendarOpen(false)} // закриття календаря\n              onChange={date => setSelectedDate(date)} //Material UA в date записує обрану з календаря дату\n              // M {$L: 'en', $u: undefined, $d: Fri Sep 01 2023 09:13:29 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n              value={selectedDate}\n              format={dateFormat} // приймає рядок\n              disablePast={true} // минулі дати не обируться\n              outsideCurrentMonth={true} // початок наступного місяця невидимий\n              dayOfWeekFormatter={day => day.slice(0, 2).toUpperCase()} // видимі перші 2 літери назви дня тижня\n              slots={{\n                openPickerButton: () => null, // приховуємо дефолтну кнопку-іконку календаря\n              }}\n              slotProps={{\n                popper: {\n                  placement: 'bottom-start',\n                  sx: {\n                    '.css-71vzt-MuiPaper-root-MuiPickersPopper-paper': { // полотно календаря\n                      // backgroundColor: 'red', // працює\n                      border: '1px solid',\n                      borderColor: user.theme === 'violet' ? '#585bbe' : '#bedfad',\n                      borderRadius: '8px',\n                      padding: '18px',\n                      width: '233px',\n                      height: '254px',\n                    },\n                    '.MuiPickersLayout-root.': {\n                      width: '197px',\n                      // hight: '110px',\n                    },\n                    '.MuiDateCalendar-root': {\n                      // полотно календаря без зовнішніх падінгів\n                      // backgroundColor: 'orange',\n                      width: '197px',\n                      hight: '166px',\n                    },\n\n                    '.css-cwhad8-MuiDateCalendar-root': {  // полотно календаря без зовнішніх падінгів\n\n                      height: '215px',\n                    },\n                    '.MuiPickersLayout-contentWrapper': {\n                      width: '197px',\n                      // hight: '166px',\n                    },\n                    '.MuiPickersCalendarHeader-root': {\n                      // місяць і дата\n                      // backgroundColor: 'yellowgreen',\n                      textAlign: 'center',\n                      borderBottom: '1px solid rgba(22, 22, 22, 0.20)',\n                    },\n                    '.MuiPickersCalendarHeader-label': {\n                      margin: 0,\n                    },\n                    '.MuiTypography-root': {\n                      // дні тижня\n                      // backgroundColor: 'violet',\n                      marginTop: '14px',\n                      width: '23px',\n                      height: '23px',\n                    },\n                    '.MuiDayCalendar-monthContainer': {\n                      // полотно дат\n                      // backgroundColor: 'red',\n                      width: '197px',\n                      hight: '166px',\n                    },\n                    '.MuiDayCalendar-weekContainer': {\n                      // backgroundColor: 'blue',\n                      marginBottom: '3px',\n                    },\n                    '.MuiPickersDay-dayWithMargin': {\n                      // дні іншого місяця\n                      width: '23px',\n                      height: '23px',\n                    },\n                    '.MuiButtonBase-root': {\n                      // один день\n                      width: '23px',\n                      height: '23px',\n                    },\n                    '.MuiPickersDay-root': {\n                      // усі дні\n                      // backgroundColor: 'green',\n                      fontFamily: 'Poppins',\n                      fontSize: '14px',\n                      fontweight: '400',\n                      lineHeight: '18px',\n                    },\n                    '.MuiPickersDay-root.Mui-selected': {\n                      // вибраний день\n                      backgroundColor:\n                        user.theme === 'violet' ? '#585bbe' : '#bedfad',\n                      '&:hover': {\n                        backgroundColor:\n                          user.theme === 'violet' ? '#8d8fc9' : '#9fd186',\n                      },\n                    },\n                  },\n                },\n                calendarHeader: {\n                  sx: {\n                    '.MuiPickersCalendarHeader-root': {\n                      position: 'relative',\n                    },\n                    '.MuiPickersCalendarHeader-labelContainer': {\n                      // це тільки місяць і рік\n                      // backgroundColor: 'green',\n                      fontFamily: 'Poppins, sans-serif',\n                      fontSize: '16px',\n                      fontWeight: 500,\n                      letterSpacing: '-0.32px',\n                      display: 'grid', // тепер місяць і рік центровані\n                    },\n                    '.MuiPickersCalendarHeader-label': {\n                      display: 'inline-block',\n                    },\n                    '.MuiPickersCalendarHeader-switchViewButton': {\n                      display: 'none', // прибираємо стрілку вниз поряд з місяцем і роком\n                    },\n                    '.MuiIconButton-edgeEnd': {\n                      // кнопка <\n                      position: 'absolute',\n                      top: '17px',\n                      left: '14px',\n                    },\n                    '.MuiIconButton-edgeStart': {\n                      // кнопка >\n                      position: 'absolute',\n                      top: '17px',\n                      right: '12px',\n                    },\n                  },\n                  style: {\n                    display: 'inline',\n                    margin: 0,\n                    padding: 0,\n                  },\n                },\n\n                previousIconButton: {\n                  sx: {\n                    stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0',\n                  },\n                },\n                nextIconButton: {\n                  sx: {\n                    stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0',\n                  },\n                },\n\n                textField: {\n                  fullWidth: false,\n                  onClick: () => setIsCalendarOpen(true), // інпут стає клікабельним; по кліку відкривається календар (picker)\n                  variant: 'standard',\n                  size: 'small',\n                  sx: {\n                    width: inputWidth,\n                    minWidth: '130px',\n                    '.css-nz481w-MuiInputBase-input-MuiInput-input': {\n                      // інпут без кнопки\n                      padding: 0,\n                    },\n                  },\n                  InputProps: {\n                    disableUnderline: true, // прибирає дефолтний нижній бордер, встановлений variant: 'standard'\n                    'aria-label': 'deadline',\n                    style: {\n                      fontSize: '14px',\n                      fontFamily: 'Poppins, sans-serif',\n                      color: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', // колір тексту\n                      fontWeight: 500,\n                    },\n                    // розташування іконки - в кінці інпуту (є і startAdornment)\n                    endAdornment: (\n                      <InputAdornment\n                        position=\"start\"\n                        sx={{ cursor: 'pointer' }}\n                      >\n                        <svg className={scss.OBAddDateIcon} width=\"18px\">\n                          <use\n                            href={SvgSprite + '#icon-chevron-down'} // стрілка вниз в календарі\n                            aria-label=\"open calendar\"\n                            edge=\"start\"\n                          />\n                        </svg>\n                      </InputAdornment>\n                    ),\n                  },\n                },\n              }}\n            ></DatePicker>\n          </LocalizationProvider>\n        </div>\n\n        <button type=\"submit\" className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddSubmitIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport dayjs from 'dayjs';\nimport { Modal } from '../Modal/Modal';\nimport { AddCard } from '../AddCard/AddCard';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { deleteTasks, updateTasks } from 'redux/board/boardOperations';\nimport { useParams } from 'react-router-dom';\nimport { useAuth } from 'hooks';\nconst getBgColor = priority => {\n  switch (priority) {\n   case 'low':\n     return '#8FA1D0';\n   case 'medium':\n     return 'rgba(224, 156, 181, 1)';\n   case 'high':\n     return '#BEDBB0';\n   case 'without':\n     return 'rgba(22, 22, 22, 0.30)';\n   default:\n    break;\n  }    \n }\n\n\nconst Card = ({ id, cardTitle, description, priority, deadline, idColumn }) => {\n  const { user } = useAuth();\n  const { boardName } = useParams();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const dispatch = useDispatch();\n  const deadlineIsToday = dayjs().format('DD/MM/YYYY') === deadline; // dayjs().format('DD/MM/YYYY') - сьогоднішня дата у визначеному форматі\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div style={{ borderLeftColor: getBgColor(priority) }} className={scss.OBCardContainer} data-theme={user.theme}>\n\n      <h4 className={scss.OBCardTitle}>{cardTitle}</h4>\n      <p className={scss.OBCardDescription}>{description}</p>\n\n      <hr className={scss.OBCardSeparator} />\n\n      <div className={scss.OBCardFooterContainer}>\n        <table className={scss.OBCardValuesContainer}>\n          <thead>\n            <tr>\n              <th className={scss.OBCardProreties}>Priority</th>\n              <th className={scss.OBCardProreties}>Deadline</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <div\n                  style={{ backgroundColor: getBgColor(priority) }}\n                  className={scss.OBCardPriorityCircle}\n                ></div>\n              </td>\n              <td className={scss.OBCardDate}>{deadline}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        {/* --------------------------- іконки --------------------------- */}\n\n        <div className={scss.OBCardIconsWrapper}>\n          {deadlineIsToday &&\n            (<svg className={scss.OBCardBellIcon} width=\"16\" height=\"16\" style={{ stroke: user.theme === 'violet' ? '#585bbe' : '#bedfad' }}>\n\n              <use href={SvgSprite + '#icon-bell'} />\n            </svg>\n          )}\n          <button\n            type=\"button\"\n            className={scss.OBCardBtnIcon}\n            aria-label=\"edit task\"\n            onClick={handleOpenModal}\n          >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-pencil'} />\n            </svg>\n          </button>\n          {isModalOpen && (\n            <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n              <AddCard\n                idColumn={idColumn}\n                modalTitle={'Edit card'}\n                id={id}\n                cardTitle={cardTitle}\n                description={description}\n                priority={priority}\n                deadline={deadline}\n                modalBtnTitle={'Edit'}\n                operation={updateTasks}\n                onClose={handleCloseModal}\n              />\n            </Modal>\n          )}\n          {/* <button type='button' className={scss.OBCardBtnIcon} aria-label='move task to another column'>\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-arrow'} />\n            </svg>\n          </button > */}\n          <button\n            type=\"button\"\n            className={scss.OBCardBtnIcon}\n            aria-label=\"delete task\"\n            onClick={() => dispatch(deleteTasks({ id, boardName }))}\n          >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-trash'} />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n// import { cleanDigitSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\n\nexport const TitleCards = ({ className, title, theme, onEdit, onTrash }) => {\n  // const onIconPensil = () => {\n  //   console.log('icon pensil click');\n  // };\n\n  // const onIconTrash = () => {\n  //   console.log('icon trash click');\n  // };\n\n  return (\n    <div className={className}>\n      <div className={clsx(styles.KkWrapTitleCards, styles[theme])}>\n        <p className={clsx(styles[theme])}> {title}</p>\n        <div className={styles.KkSvgTitleCards}>\n          <button className={styles.KkBtnIcons} onClick={onEdit}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-pencil`}></use>\n            </svg>\n          </button>\n\n          <button className={styles.KkBtnIcons} onClick={onTrash}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-trash`}></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport { Filters } from './Filters';\nimport styles from 'styles/index.module.scss';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { Modal } from '../Modal/Modal';\nimport { useState } from 'react';\nimport { PopColumn } from '../PopColumn/PopColumn';\nimport {\n  addColumn,\n  addTasks,\n  deleteColumn,\n  editColumn,\n} from 'redux/board/boardOperations';\nimport { useDispatch } from 'react-redux';\nimport { useBoards } from 'hooks';\n// import SvgSprite from 'images/sprite.svg';\nimport { BtnAddCard } from './BtnAddCard';\nimport { AddCard } from 'components/AddCard/AddCard';\nimport { Card } from 'components/Card';\nimport { TitleCards } from './TitleCards';\n\nexport const MainDashboard = () => {\n  const { columns } = useBoards();\n  const dispatch = useDispatch();\n\n  const [isModalAddOpen, setIsModalAddOpen] = useState(false);\n  const [isModalEditOpen, setIsModalEditOpen] = useState(false);\n  const [isModalAddCardOpen, setIsModalAddCardOpen] = useState(false);\n  const [activeColumnId, setActiveColumnId] = useState('');\n  const [titleColumnId, setTitleColumnId] = useState('');\n\n  //!! Тут на всі відкриття і закриття модалок можна зробити switch\n  const handleOpenAddModal = () => {\n    setIsModalAddOpen(true);\n  };\n  const handleCloseAddModal = () => {\n    setIsModalAddOpen(false);\n  };\n\n  const handleOpenEditModal = () => {\n    setIsModalEditOpen(true);\n  };\n  const handleCloseEditModal = () => {\n    setIsModalEditOpen(false);\n  };\n\n  const handleOpenAddCardModal = () => {\n    setIsModalAddCardOpen(true);\n  };\n  const handleCloseAddCardModal = () => {\n    setIsModalAddCardOpen(false);\n  };\n\n  const clickOnColumnItemHandle = columnId => {\n    setActiveColumnId(columnId);\n  };\n\n  const clickOnColumnTitleHandle = title => {\n    setTitleColumnId(title);\n  };\n\n  return (\n    <div className={styles.KkSectionMainDashboard}>\n      <Filters className={styles.KkFilters} />\n\n      <ul className={styles.KkColums}>\n        {columns &&\n          columns.map(({ _id, title, tasks }) => (\n            <li key={_id}>\n              {/* <p>title Column: {title}</p> */}\n              <TitleCards\n                className={styles.TitleCards}\n                title={title}\n                onEdit={() => {\n                  handleOpenEditModal();\n                  clickOnColumnItemHandle(_id);\n                  clickOnColumnTitleHandle(title);\n                }}\n                onTrash={() => dispatch(deleteColumn(_id))}\n              />\n\n              {/* <div className={styles.boardsListItemButtons}>\n                <button\n                  type=\"button\"\n                  className={styles.boardsListItemButton}\n                  onClick={() => {\n                    handleOpenEditModal();\n                    clickOnColumnItemHandle(_id);\n                    clickOnColumnTitleHandle(title);\n                  }}\n                >\n                  <svg\n                    className={styles.boardsListItemSvg}\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <use href={`${SvgSprite}#icon-pencil`}></use>\n                  </svg>\n                </button>\n                <button\n                  type=\"button\"\n                  className={styles.boardsListItemButton}\n                  onClick={() => dispatch(deleteColumn(_id))}\n                >\n                  <svg\n                    className={styles.boardsListItemSvg}\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <use href={`${SvgSprite}#icon-trash`}></use>\n                  </svg>\n                </button>\n              </div> */}\n\n              {tasks && (\n                <ul className={styles.KkCards}>\n                  {tasks.map(\n                    ({\n                      title: titleCard,\n                      description,\n                      priority,\n                      deadLine,\n                      _id: idCard,\n                    }) => {\n                      return (\n                        <li key={idCard}>\n                          <Card\n                            cardTitle={titleCard}\n                            id={idCard}\n                            description={description}\n                            priority={priority}\n                            deadline={deadLine}\n                            idColumn={_id}\n                          />\n                        </li>\n                      );\n                    }\n                  )}\n                </ul>\n              )}\n              <BtnAddCard\n                // className={styles.KkBtnAddColumnMain}\n                className={styles.KkBtnAddCard}\n                title={'Add another card'}\n                theme={'light'}\n                onClick={() => {\n                  handleOpenAddCardModal();\n                  clickOnColumnItemHandle(_id);\n                }}\n              />\n            </li>\n          ))}\n        <BtnAddColumn\n          className={styles.KkBtnAddColumnMain}\n          title={'Add another column'}\n          theme={'light'}\n          onClick={handleOpenAddModal}\n        />\n      </ul>\n      {isModalAddOpen && (\n        <Modal isOpen={isModalAddOpen} onClose={handleCloseAddModal}>\n          <PopColumn\n            modalTitle={'Add column'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseAddModal}\n            operation={addColumn}\n          />\n        </Modal>\n      )}\n      {isModalEditOpen && (\n        <Modal isOpen={isModalEditOpen} onClose={handleCloseEditModal}>\n          <PopColumn\n            modalTitle={'Edit column'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseEditModal}\n            idColumn={activeColumnId}\n            infoData={{ title: titleColumnId }}\n            operation={editColumn}\n          />\n        </Modal>\n      )}\n      {isModalAddCardOpen && (\n        <Modal isOpen={isModalAddCardOpen} onClose={handleCloseAddCardModal}>\n          <AddCard\n            modalTitle={'Add card'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseAddCardModal}\n            idColumn={activeColumnId}\n            operation={addTasks}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllBoards, getBoardById } from 'redux/board/boardOperations';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\nimport { useParams } from 'react-router-dom';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  const { boardName } = useParams();\n\n  useEffect(() => {\n    dispatch(getAllBoards());\n    dispatch(getBoardById(boardName));\n  }, [boardName, dispatch]);\n\n  return (\n    <section>\n      <MainDashboard />\n    </section>\n  );\n};\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <ScreensPage />\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["Filters","_ref","className","boardById","useBoards","_jsx","children","_jsxs","styles","style","padding","background","title","onClick","console","log","width","height","href","concat","SvgSprite","BtnAddColumn","theme","clsx","PopColumn","modalTitle","modalBtnTitle","onClose","operation","idColumn","infoData","user","useAuth","boardId","useParams","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","valueInput","setvalueInput","scss","onSubmit","e","preventDefault","dataSubmit","board","boardName","autoComplete","type","name","placeholder","autoFocus","required","value","onChange","event","_event$target","target","prev","_objectSpread","_defineProperty","BtnAddCard","AddCard","id","cardTitle","description","priority","deadline","titleValue","setTitleValue","_useState3","_useState4","descriptionValue","setDescriptionValue","_useState5","_useState6","selectedPriority","setSelectedPriority","_useState7","_useState8","inputWidth","setInputWidth","_useState9","_useState10","isCalendarOpen","setIsCalendarOpen","_useState11","dayjs","_useState12","selectedDate","setSelectedDate","dateFormat","format","priorityStyles","low","indigo","medium","pink","high","lightGreen","without","grey","useEffect","contentWidth","length","cardData","elements","trim","deadLine","taskOwner","idTask","reset","currentTarget","document","body","overflow","defaultValue","Object","keys","map","Radio","item","checked","inputProps","sx","color","fontSize","backgroundColor","borderRadius","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","open","date","disablePast","outsideCurrentMonth","dayOfWeekFormatter","day","slice","toUpperCase","slots","openPickerButton","slotProps","popper","placement","border","borderColor","hight","textAlign","borderBottom","margin","marginTop","marginBottom","fontFamily","fontweight","lineHeight","calendarHeader","position","fontWeight","letterSpacing","display","top","left","right","previousIconButton","stroke","nextIconButton","textField","fullWidth","variant","size","minWidth","InputProps","disableUnderline","endAdornment","InputAdornment","cursor","edge","getBgColor","isModalOpen","setIsModalOpen","deadlineIsToday","handleCloseModal","borderLeftColor","Modal","isOpen","updateTasks","deleteTasks","TitleCards","onEdit","onTrash","MainDashboard","columns","isModalAddOpen","setIsModalAddOpen","isModalEditOpen","setIsModalEditOpen","isModalAddCardOpen","setIsModalAddCardOpen","activeColumnId","setActiveColumnId","titleColumnId","setTitleColumnId","handleCloseAddModal","handleCloseEditModal","handleCloseAddCardModal","clickOnColumnItemHandle","columnId","_id","tasks","clickOnColumnTitleHandle","deleteColumn","_ref2","titleCard","idCard","Card","addColumn","editColumn","addTasks","getAllBoards","getBoardById","_Fragment","ScreensPage"],"sourceRoot":""}