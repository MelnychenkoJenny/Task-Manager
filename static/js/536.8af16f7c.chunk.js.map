{"version":3,"file":"static/js/536.8af16f7c.chunk.js","mappings":"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","sources":["redux/board/boardSelectors.js","components/ScreensPage/testAddBoard.jsx","components/MainDashboard/BtnAddColumn.jsx","components/MainDashboard/Filters.jsx","components/MainDashboard/MainDashboard.jsx","components/AddCard/AddCard.jsx","components/Card/Card.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["export const selectBoards = state => state.boards.allBoards;","import styles from 'styles/index.module.scss';\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addBoards, deleteBoards } from 'redux/board/boardOperations';\n\n// import { object, string } from 'yup';\nimport { selectBoards } from 'redux/board/boardSelectors';\n\n// const initialValues = {\n//   title: '',\n//   icon: '',\n//   background: '',\n// };\n\n// const boardSchema = object({\n//   title: string().required('Name is required'),\n//   icon: string(),\n//   background: string(),\n// });\n\nconst AddBoard = () => {\n  const dispatch = useDispatch();\n  const  boards  = useSelector(selectBoards);\n\n  // const handleSubmit = async (e) => {\n    // console.log(e)\n    // const dataBoard = { ...values };\n    // console.log(1, dataBoard);\n    // if (boards) {\n    //   const res = await dispatch(addBoards(dataBoard));\n    //   if (res.error) {\n    //     console.log(res.payload);\n    //   }\n    //   return res;\n    // }\n    // resetForm();\n    // console.log(3);\n  // };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const {title, icon, background} = event.target.elements;\n    \nconst dataBoard = {title: title.value, icon: icon.value, background: background.value}\n    dispatch(addBoards(dataBoard))\n    form.reset();\n  };\n\n  return (\n    <div>\n      {boards.length !==0 && (\n        <ul style={{ display: 'flex', gap: '20px' }}>\n          {boards.map(({ title, _id }) => {\n            return (\n              <li\n                key={_id}\n                style={{ padding: '5px', border: 'grey solid 2px' }}\n              >\n                <p>{title}</p>\n                <button onClick={() => dispatch(deleteBoards(_id))}>\n                  DELETE\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      <form onSubmit={handleSubmit} className={styles.AfWelcomRegForm}>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n          required\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n              Add new board\n            </button>\n      </form>\n\n      {/* <Formik\n        validationSchema={boardSchema}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n      >\n        {({ handleChange, values }) => (\n          <Form className={styles.AfWelcomRegForm}>\n            <div className={styles.AfWelcomRegFormInCn}>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  autoFocus\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  onChange={handleChange('title')}\n                  value={values.title || ''}\n                  required\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"icon\"\n                  placeholder=\"Icon\"\n                  onChange={handleChange('icon')}\n                  value={values.icon || ''}\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"background\"\n                  placeholder=\"background\"\n                  onChange={handleChange('background')}\n                  value={values.background || ''}\n                />\n              </div>\n            </div>\n            <ErrorMessage\n              className={styles.AfWelcomRegFormError}\n              name=\"password\"\n              component=\"div\"\n            />\n            <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n              Add new board\n            </button>\n          </Form>\n        )}\n      </Formik> */}\n    </div>\n  );\n};\nexport default AddBoard;\n","// import scss from 'styles/index.module.scss';\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nexport const BtnAddColumn = ({ title, className }) => {\n  return (\n    <div className={className}>\n      <button className={styles.KkBtn}>\n        <div className={styles.KkIconPlus}>\n          <svg width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nexport const Filters = ({ className }) => {\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2 className={styles.KkTitle}>Project office</h2>\n        <button className={styles.KkBtnFilters}>\n          <svg width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n          <p>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import styles from 'styles/index.module.scss';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { Filters } from './Filters';\n\nexport const MainDashboard = () => {\n  return (\n    <section className={styles.KkSectionMainDashboard}>\n      <Filters className={styles.KkFilters} />\n      <BtnAddColumn className={styles.TestTest} title={'Add another column'} />\n      <BtnAddColumn className={styles.TestTest} title={'Add column'} />\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { Radio } from '@mui/material';\n \nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n// import KeyboardArrowLeftIcon from '@mui/icons-material/KeyboardArrowLeft';\n// import KeyboardArrowRightIcon from '@mui/icons-material/KeyboardArrowRight';\n\n\n\nconst AddCard = () => {\n\n  const [selectedDate, setSelectedDate] = useState(dayjs()); // dayjs() - currentDate\n  //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  const [selectedPriority, setSelectedPriority] = useState('without');\n\n  // const formatDate = (date) => {\n  //   const currentDate = dayjs(); \n  //   if (date.isSame(currentDate, 'day')) {\n  //     return 'Today'; // Display \"Today\" for the current date\n  //   }\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    const inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n    const inputDate = dayjs(selectedDate).format('DD/MM/YYYY'); //   29/11/2023\n\n    console.log(`inputTitle: ${inputTitle}, inputDescription: ${inputDescription}, inputPriority: ${inputPriority}, inputDate: ${inputDate}`)\n    // checkNameClone(inputTitle, inputDescription, inputPriority); // відправка на бек\n    event.target.reset();\n  };\n\n  // --------------- ф-ції для пріоритетності ----------------------\n  const handleChange = (event) => {\n      setSelectedPriority(event.target.value);\n  };\n  \n  const controlProps = (item) => ({ // low, medium, high, without\n      value: item,\n      onChange: handleChange,\n      checked: selectedPriority === item,\n      name: 'priority',\n      inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n      low: indigo[200],\n      medium: pink[200],\n      high: lightGreen[200],\n      without: grey[400],\n  };\n\n  return (\n    <div className={scss.OBAddContainer}>\n      <h4 className={scss.OBAddTitle}>Add card</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n          />\n        </label>\n\n        <div className={scss.OBAddlabel}> \n            Label color \n          <div className={scss.OBAddRadioGroup}>  \n            {Object.keys(priorityStyles).map((priority) => ( //['low', 'medium', 'high', 'without']\n              <Radio className={scss.OBAddradioBtn}\n                key={priority}\n                {...controlProps(priority)}\n                sx={{\n                  color: priorityStyles[priority],\n                  '&.Mui-checked': {\n                    color: priorityStyles[priority],\n                  },\n                  '&.Mui-checked .MuiSvgIcon-root': {\n                    fontSize: '17px',\n                  },\n                  '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                    fontSize: '14px',\n                    backgroundColor: priorityStyles[priority],\n                    borderRadius: '50%',\n                  },\n                }}\n              />\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <DatePicker\n              className={scss.OBAddDeadline}\n              onChange={(date) => setSelectedDate(date)}   //Material UA в date записує обрану з календаря дату \n              value={selectedDate}\n              format=\"dddd, MMMM D\"\n              disablePast={true}   // минулі дати не обируться\n              outsideCurrentMonth={true} // початок наступного місяця невидимий\n              dayOfWeekFormatter={(day) => day.slice(0, 2).toUpperCase()} // видимі перші 2 літери назви дня тижня\n              // showDaysOutsideCurrentMonth='true'\n              // slotProps={}\n              // slots={}\n              // sx={{\n              // }}\n              // actionBar\n              // calendarHeader=\"year\"\n              // today={true}\n              // leftArrowIcon={<KeyboardArrowLeftIcon />} //<CustomLeftArrowIcon />\n              // nextIconButton={<KeyboardArrowRightIcon />}\n              // nextIconButton={<CustomNextArrowIcon />}\n              // previousIconButton\n              // rightArrowIcon\n              // switchViewButton\n              // switchViewIcon\n\n          \n              // format={\n              //   selectedDate.isSame(dayjs(), 'day')\n              //     ? 'Today'\n              //     : 'dddd, MMMM D'\n              // }\n            />\n          </LocalizationProvider>\n          {/* <svg className={scss.OBCardIcon}>\n          <use href={SvgSprite + '#icon-chevron-down'} /> // стрілка вниз в календарі\n        </svg> */}\n        </div>\n\n        <button className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          Add\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddCard;","import scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nconst Card = () => {\n\n    return (\n        <div className={scss.OBCardContainer}>\n            <h4 className={scss.OBCardTitle}>Design and Prototyping SoYummy</h4>\n            <p>Create visually appealing and functional design prototypes based on the approved concepts,</p>\n            \n            <hr className={scss.OBCardSeparator} />\n            \n            <div className={scss.OBCardFooterContainer}>\n                <table className={scss.OBCardValuesContainer}>\n                    <thead>\n                        <tr>\n                            <th className={scss.OBCardProreties}>Priority</th>\n                            <th className={scss.OBCardProreties}>Deadline</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td><div className={scss.OBCardPriorityCircle}></div></td>\n                            <td className={scss.OBCardDate}>12/05/2023</td>\n                        </tr>\n                    </tbody>\n                </table>\n    \n                <div className={scss.OBCardIconsWrapper}>\n                    <svg className={scss.OBCardIcon} width='16' height='16'>\n                    <use href={SvgSprite + '#icon-bell'} />\n                    </svg>\n                    <svg className={scss.OBCardIcon} width='16' height='16'>\n                    <use href={SvgSprite + '#icon-pencil'} />\n                    </svg>\n                    <svg className={scss.OBCardIcon} width='16' height='16'>\n                    <use href={SvgSprite + '#icon-arrow'} />\n                    </svg>        \n                    <svg className={scss.OBCardIcon} width='16' height='16'>\n                    <use href={SvgSprite + '#icon-trash'} width='16' height='16' />\n                    </svg>\n                </div>\n            </div>\n      </div>\n    );\n};\n\nexport default Card;","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from 'styles/index.module.scss';\nimport { getAllBoards } from 'redux/board/boardOperations';\n\nimport AddBoard from './testAddBoard';\n\n\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\nimport { AddCard } from 'components/AddCard';\nimport { Card } from 'components/Card'\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n  return (\n    <section className={styles.AfWelcomReg}>\n      <div className={styles.AfWelcomRegWr}>\n\n        <AddBoard />\n        <MainDashboard />\n        <AddCard />\n          <Card />\n      </div>\n    </section>\n  );\n};\nexport default ScreensPage;","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <ScreensPage />\n    </>\n  );\n};\nexport default HomePage;"],"names":["selectBoards","state","boards","allBoards","dispatch","useDispatch","useSelector","_jsxs","children","length","_jsx","style","display","gap","map","_ref","title","_id","padding","border","onClick","deleteBoards","onSubmit","event","preventDefault","form","target","_event$target$element","elements","icon","background","dataBoard","value","addBoards","reset","className","styles","autoFocus","type","name","placeholder","required","BtnAddColumn","width","height","href","concat","SvgSprite","Filters","MainDashboard","_useState","useState","dayjs","_useState2","_slicedToArray","selectedDate","setSelectedDate","_useState3","_useState4","selectedPriority","setSelectedPriority","handleChange","priorityStyles","low","indigo","medium","pink","high","lightGreen","without","grey","scss","inputTitle","trim","inputDescription","description","inputPriority","priority","inputDate","format","console","log","autoComplete","Object","keys","Radio","_objectSpread","item","onChange","checked","inputProps","sx","color","fontSize","backgroundColor","borderRadius","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","date","disablePast","outsideCurrentMonth","dayOfWeekFormatter","day","slice","toUpperCase","useEffect","getAllBoards","AddBoard","AddCard","Card","_Fragment","ScreensPage"],"sourceRoot":""}