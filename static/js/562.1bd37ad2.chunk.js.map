{"version":3,"file":"static/js/562.1bd37ad2.chunk.js","mappings":"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","sources":["components/ScreensPage/testAddBoard.jsx","components/MainDashboard/Filters.jsx","components/Card/Card.jsx","components/MainDashboard/BtnAddColumn.jsx","components/MainDashboard/BtnAddCard.jsx","components/MainDashboard/TitleCards.jsx","components/MainDashboard/TaskColumn.jsx","components/MainDashboard/MainDashboard.jsx","components/AddCard/AddCard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["import styles from 'styles/index.module.scss';\nimport scss from '../../styles/index.module.scss';\nimport sprite from '../../images/sprite.svg';\n\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  addBoards,\n  deleteBoards,\n  getBoardById,\n  updateBoard,\n} from 'redux/board/boardOperations';\nimport { useBoards } from 'hooks';\nimport { useEffect, useState } from 'react';\n// import { object, string } from 'yup';\nimport { useAuth } from 'hooks';\nimport { updateTheme } from 'redux/auth/authOperations';\n\n// const initialValues = {\n//   title: '',\n//   icon: '',\n//   background: '',\n// };\n\n// const boardSchema = object({\n//   title: string().required('Name is required'),\n//   icon: string(),\n//   background: string(),\n// });\n\nconst AddBoard = () => {\n  const [themeActive, setThemeActive] = useState(false);\n\n  const { allBoards, boardById } = useBoards();\n  const { user } = useAuth();\n  console.log('user', user);\n  const dispatch = useDispatch();\n  const [valueInputUpdate, setvalueInputUpdate] = useState({\n    title: '',\n    icon: '',\n    background: '',\n  });\n  const [avatarURL, setAvatarURL] = useState('');\n  const [currentImage, setCurrentImage] = useState(user.avatarURL);\n\n  useEffect(() => {\n    setvalueInputUpdate({\n      title: boardById.title,\n      icon: boardById.icon,\n      background: boardById.background,\n    });\n  }, [boardById]);\n\n  // const handleSubmit = async (e) => {\n  // console.log(e)\n  // const dataBoard = { ...values };\n  // console.log(1, dataBoard);\n  // if (boards) {\n  //   const res = await dispatch(addBoards(dataBoard));\n  //   if (res.error) {\n  //     console.log(res.payload);\n  //   }\n  //   return res;\n  // }\n  // resetForm();\n  // console.log(3);\n  // };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    dispatch(addBoards(dataBoard));\n    form.reset();\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInputUpdate(prevBoard => ({\n      ...prevBoard,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmitUpdate = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      _id: boardById._id,\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    console.log(dataBoard);\n    dispatch(updateBoard(dataBoard));\n    form.reset();\n  };\n\n  function handleFileChange(event) {\n    const file = event;\n    if (!file) {\n      return;\n    }\n    setAvatarURL(file);\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      setCurrentImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  const handleClick = () => {\n    setThemeActive(!themeActive);\n  };\n\n  const handleClickTheme = theme => {\n    if (theme === 'light' || theme === 'dark' || theme === 'violet') {\n      if(theme === user.theme) {\n        return\n      }\n      dispatch(updateTheme(theme));\n    }\n  };\n\n  return (\n    <div>\n      <div className={scss.dropdownThemeWrap}>\n        <div className={scss.themeHeaderWrap}>\n          <p className={scss.themeText}>Theme</p>\n          <button\n            type=\"button\"\n            className={scss.btnThemeOpen}\n            onClick={handleClick}\n          >\n            <svg className={scss.svgTheme} width=\"16\" height=\"16\">\n              <use href={`${sprite}#icon-chevron-down`}></use>\n            </svg>\n          </button>\n        </div>\n        {themeActive && (\n          <div\n            className={scss.dropdownThemeMenu}\n            style={{ position: 'relative' }}\n          >\n            <ul className={scss.dropdownThemeList}>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('light');\n                }}\n              >\n                Light\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('dark');\n                }}\n              >\n                Dark\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('violet');\n                }}\n              >\n                Violet\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n\n      <div>{boardById && <p>Title active board:{boardById.title}</p>}</div>\n      <input\n        type=\"file\"\n        name=\"avatarURL\"\n        onChange={event => {\n          handleFileChange(event.currentTarget.files[0]);\n        }}\n        accept=\"image/*,.png,.jpg,.gif,.web\"\n      ></input>\n      <img\n        alt=\"user avatar\"\n        src={currentImage || avatarURL}\n        srcSet={currentImage || `${avatarURL} 1x, ${avatarURL} 2x`}\n      />\n\n      {allBoards?.length !== 0 && (\n        <ul style={{ display: 'flex', gap: '20px' }}>\n          {allBoards?.map(({ title, _id, icon, background }) => {\n            return (\n              <li\n                key={_id}\n                style={{ padding: '5px', border: 'grey solid 2px' }}\n                onClick={() => dispatch(getBoardById(_id))}\n              >\n                <p>Title: {title}</p>\n                <p>{icon}</p>\n                <p>{background}</p>\n                <button onClick={() => dispatch(deleteBoards(_id))}>\n                  DELETE\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      <form onSubmit={handleSubmitUpdate} className={styles.AfWelcomRegForm}>\n        <h2 style={{ color: 'white' }}>Update board</h2>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder={'Title'}\n          value={valueInputUpdate.title || ''}\n          onChange={handleChange}\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n          value={valueInputUpdate.icon || ''}\n          onChange={handleChange}\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n          value={valueInputUpdate.background || ''}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Update board\n        </button>\n      </form>\n\n      <form onSubmit={handleSubmit} className={styles.AfWelcomRegForm}>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Add new board\n        </button>\n      </form>\n\n      {/* <Formik\n        validationSchema={boardSchema}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n      >\n        {({ handleChange, values }) => (\n          <Form className={styles.AfWelcomRegForm}>\n            <div className={styles.AfWelcomRegFormInCn}>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  autoFocus\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  onChange={handleChange('title')}\n                  value={values.title || ''}\n                  required\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"icon\"\n                  placeholder=\"Icon\"\n                  onChange={handleChange('icon')}\n                  value={values.icon || ''}\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"background\"\n                  placeholder=\"background\"\n                  onChange={handleChange('background')}\n                  value={values.background || ''}\n                />\n              </div>\n            </div>\n            <ErrorMessage\n              className={styles.AfWelcomRegFormError}\n              name=\"password\"\n              component=\"div\"\n            />\n            <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n              Add new board\n            </button>\n          </Form>\n        )}\n      </Formik> */}\n    </div>\n  );\n};\nexport default AddBoard;\n","import styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const Filters = ({ className, titleBoard, theme }) => {\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2 className={clsx(styles.KkTitle, styles[theme])}>{titleBoard}</h2>\n        <button className={clsx(styles.KkBtnFilters, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n          <p className={clsx(styles[theme])}>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nconst Card = () => {\n\n    return (\n        <div className={scss.OBCardContainer}>\n            <h4 className={scss.OBCardTitle}>Design and Prototyping SoYummy</h4>\n            <p>Create visually appealing and functional design prototypes based on the approved concepts,</p>\n            \n            <hr className={scss.OBCardSeparator} />\n            \n            <div className={scss.OBCardFooterContainer}>\n                <table className={scss.OBCardValuesContainer}>\n                    <thead>\n                        <tr>\n                            <th className={scss.OBCardProreties}>Priority</th>\n                            <th className={scss.OBCardProreties}>Deadline</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td><div className={scss.OBCardPriorityCircle}></div></td>\n                            <td className={scss.OBCardDate}>12/05/2023</td>\n                        </tr>\n                    </tbody>\n                </table>\n    \n                <div className={scss.OBCardIconsWrapper}>\n                    <svg className={scss.OBCardIcon} width='16' height='16'>\n                    <use href={SvgSprite + '#icon-bell'} />\n                    </svg>\n                    <svg className={scss.OBCardIcon} width='16' height='16'>\n                    <use href={SvgSprite + '#icon-pencil'} />\n                    </svg>\n                    <svg className={scss.OBCardIcon} width='16' height='16'>\n                    <use href={SvgSprite + '#icon-arrow'} />\n                    </svg>        \n                    <svg className={scss.OBCardIcon} width='16' height='16'>\n                    <use href={SvgSprite + '#icon-trash'} width='16' height='16' />\n                    </svg>\n                </div>\n            </div>\n      </div>\n    );\n};\n\nexport default Card;","// import scss from 'styles/index.module.scss';\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddColumn = ({ title, className, theme }) => {\n  return (\n    <div className={className}>\n      <button className={clsx(styles.KkBtnColumn, styles[theme])}>\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n  // return (\n  //   <div className={className}>\n  //     <button\n  //       className={\n  //         (color === 'dark' && styles.KkBtnDark) ||\n  //         (color === 'green' && styles.KkBtnGreen)\n  //       }\n  //     >\n  //       <div className={styles.KkIconPlus}>\n  //         <svg width=\"14px\" height=\"14px\">\n  //           <use href={`${SvgSprite}#icon-plus`}></use>\n  //         </svg>\n  //       </div>\n  //       <p>{title}</p>\n  //     </button>\n  //   </div>\n  // );\n};\n","// import scss from 'styles/index.module.scss';\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddCard = ({ title, className, theme }) => {\n  return (\n    <div className={className}>\n      <button className={clsx(styles.KkBtnCard, styles[theme])}>\n        <div className={clsx(styles.KkIconPlusCard, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n  // return (\n  //   <div className={className}>\n  //     <button\n  //       className={\n  //         (color === 'dark' && styles.KkBtnDark) ||\n  //         (color === 'green' && styles.KkBtnGreen)\n  //       }\n  //     >\n  //       <div className={styles.KkIconPlus}>\n  //         <svg width=\"14px\" height=\"14px\">\n  //           <use href={`${SvgSprite}#icon-plus`}></use>\n  //         </svg>\n  //       </div>\n  //       <p>{title}</p>\n  //     </button>\n  //   </div>\n  // );\n};\n","import styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n// import { cleanDigitSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\n\nexport const TitleCards = ({ className, title, theme }) => {\n  return (\n    <div className={className}>\n      <div className={clsx(styles.KkWrapTitleCards, styles[theme])}>\n        <p className={clsx(styles[theme])}> {title}</p>\n        <div className={styles.KkSvgTitleCards}>\n          <button\n            className={styles.KkBtnIcons}\n            onClick={() => {\n              console.log('icon pensil click');\n            }}\n          >\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-pencil`}></use>\n            </svg>\n          </button>\n\n          <button\n            className={styles.KkBtnIcons}\n            onClick={() => {\n              console.log('icon trash click');\n            }}\n          >\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-trash`}></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import styles from 'styles/index.module.scss';\n// import SvgSprite from 'images/sprite.svg';\nimport { Card } from 'components/Card';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { BtnAddCard } from './BtnAddCard';\nimport { TitleCards } from './TitleCards';\nimport { useState } from 'react';\n\nexport const TaskColumn = ({ className }) => {\n  const [themeColor, /*useThemeColor*/] = useState('light');\n\n  return (\n    <div className={className}>\n      <TitleCards\n        className={styles.TitleCards}\n        title={'Title Cards'}\n        theme={themeColor}\n      />\n      <Card />\n      <BtnAddColumn\n        className={styles.TestTest}\n        title={'Add column'}\n        theme={themeColor}\n      />\n      <BtnAddCard\n        className={styles.TestTest}\n        title={'Add another card'}\n        theme={themeColor}\n      />\n    </div>\n  );\n};\n","import styles from 'styles/index.module.scss';\n// import { BtnAddColumn } from './BtnAddColumn';\nimport { Filters } from './Filters';\nimport { TaskColumn } from './TaskColumn';\n\nexport const MainDashboard = () => {\n  return (\n    <section className={styles.KkSectionMainDashboard}>\n      <Filters\n        className={styles.KkFilters}\n        titleBoard={'Title Board'}\n        theme={'light'}\n      />\n\n      <TaskColumn className={styles.KkTaskColumn} />\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nimport { nanoid } from 'nanoid';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { Radio, /*ThemeProvider, createTheme,*/ InputAdornment } from '@mui/material';\n\nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n\n\n\nconst AddCard = () => {\n\n  // const dispatch = useDispatch();\n  const [selectedPriority, setSelectedPriority] = useState('without');\n  const [selectedDate, setSelectedDate] = useState(dayjs()); // dayjs() - currentDate\n  //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    const inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n    const inputDeadline = dayjs(selectedDate).format('DD/MM/YYYY'); //   29/11/2023\n\n    const cardData = {\n      'id': nanoid(),\n      'title': inputTitle, \n      'description': inputDescription, \n      'priority': inputPriority,\n      'deadline': inputDeadline,\n    }\n\n    console.log(cardData);\n\n    // dispatch(addBoards(cardData));  // відправка на бекенд, а потім в стор редакса\n\n    event.target.reset();\n  };\n\n  // --------------- ф-ції для пріоритетності ----------------------\n  const handleChange = (event) => {\n      setSelectedPriority(event.target.value);\n  };\n  \n  const controlProps = (item) => ({ // low, medium, high, without\n      value: item,\n      onChange: handleChange,\n      checked: selectedPriority === item,\n      name: 'priority',\n      inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n      low: indigo[200],\n      medium: pink[200],\n      high: lightGreen[200],\n      without: grey[400],\n  };\n\n\n\n  return (\n    <div className={scss.OBAddContainer}>\n      <h4 className={scss.OBAddTitle}>Add card</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n          />\n        </label>\n\n        <div className={scss.OBAddlabel}> \n            Label color \n          <div className={scss.OBAddRadioGroup}>  \n            {Object.keys(priorityStyles).map((priority) => ( //['low', 'medium', 'high', 'without']\n              <Radio className={scss.OBAddradioBtn}\n                key={priority}\n                {...controlProps(priority)}\n                sx={{\n                  color: priorityStyles[priority],\n                  '&.Mui-checked': {\n                    color: priorityStyles[priority],\n                  },\n                  '&.Mui-checked .MuiSvgIcon-root': {\n                    fontSize: '17px',\n                  },\n                  '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                    fontSize: '14px',\n                    backgroundColor: priorityStyles[priority],\n                    borderRadius: '50%',\n                  },\n                }}\n              />\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            <DatePicker\n              open={isCalendarOpen}\n              onClose={() => setIsCalendarOpen(false)} // закриття календаря\n              className={scss.OBAddDeadline}\n              onChange={(date) => setSelectedDate(date)}   //Material UA в date записує обрану з календаря дату \n              value={selectedDate}\n              format=\"dddd, MMMM D\"\n              disablePast={true}   // минулі дати не обируться\n              outsideCurrentMonth={true} // початок наступного місяця невидимий\n              dayOfWeekFormatter={(day) => day.slice(0, 2).toUpperCase()} // видимі перші 2 літери назви дня тижня\n              slots={{\n                openPickerButton: () => null, // приховуємо дефолтну кнопку-іконку календаря\n               }}\n              slotProps={{\n                textField: {\n                  onClick: () => setIsCalendarOpen(true), // інпут стає клікабельним; по кліку відкривається календар (picker)\n                  variant: 'standard',\n                  size: 'small',\n                  InputProps: {\n                    disableUnderline: true,  // прибирає дефолтний нижній бордер, встановлений variant: 'standard'\n                    'aria-label': 'deadline',\n                    endAdornment: (   // прикраса в кінці інпуту - іконка (є і endAdornment)\n                     <InputAdornment\n                        sx={{\n                          color: \"rgba(82, 85, 188, 1)\",\n                          cursor: 'pointer', \n                        }}\n                        position=\"start\"\n                     >\n                        <svg className={scss.OBCardIcon} width='18px'>\n                            <use \n                              href={SvgSprite + '#icon-chevron-down'} // стрілка вниз в календарі  \n                              aria-label=\"open calendar\" \n                              edge=\"start\" \n                            />       \n                        </svg>\n                     </InputAdornment>\n                    ),\n                   },\n                },              \n              }}\n            />             \n          </LocalizationProvider>\n        </div>\n\n        <button className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          Add\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddCard;","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from 'styles/index.module.scss';\nimport { getAllBoards } from 'redux/board/boardOperations';\n\nimport AddBoard from './testAddBoard';\n\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\nimport { AddCard } from 'components/AddCard';\nimport { Card } from 'components/Card'\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n  return (\n    <section className={styles.YMScreenReg} >\n      <div className={styles.AfWelcomRegWr} style={{display: 'flex', flexWrap: 'wrap'}}>\n        <AddBoard />\n        <MainDashboard />\n        <AddCard />\n        <Card />\n      </div>\n    </section>\n  );\n  // return (\n  //   <section className={styles.AfWelcomReg}>\n  //     <div className={styles.AfWelcomRegWr}>\n\n  //       <AddBoard />\n  //       <MainDashboard />\n  //     </div>\n  //   </section>\n  // );\n};\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\nimport { useAuth } from 'hooks';\n\n\nconst HomePage = () => {\n  \n  const { user } = useAuth();\n\n  \n  // !!!!!!!!!!!!!ЗМІНА ТЕМИ!!!!!!!!!!!!!!!!!\n\n\n  return (\n    <div data-theme={user.theme}>\n      <ScreensPage />\n    </div>\n  );\n};\nexport default HomePage;"],"names":["_useState","useState","_useState2","_slicedToArray","themeActive","setThemeActive","_useBoards","useBoards","allBoards","boardById","user","useAuth","console","log","dispatch","useDispatch","_useState3","title","icon","background","_useState4","valueInputUpdate","setvalueInputUpdate","_useState5","_useState6","avatarURL","setAvatarURL","_useState7","_useState8","currentImage","setCurrentImage","useEffect","handleChange","event","_event$target","target","name","value","prevBoard","_objectSpread","_defineProperty","handleClickTheme","theme","updateTheme","_jsxs","children","className","scss","_jsx","type","onClick","width","height","href","concat","sprite","style","position","onChange","file","reader","FileReader","onload","e","result","readAsDataURL","handleFileChange","currentTarget","files","accept","alt","src","srcSet","length","display","gap","map","_ref","_id","padding","border","getBoardById","deleteBoards","onSubmit","preventDefault","form","_event$target$element2","elements","dataBoard","updateBoard","reset","styles","color","autoFocus","placeholder","required","_event$target$element","addBoards","Filters","titleBoard","clsx","SvgSprite","BtnAddColumn","BtnAddCard","TitleCards","TaskColumn","themeColor","Card","MainDashboard","selectedPriority","setSelectedPriority","dayjs","selectedDate","setSelectedDate","isCalendarOpen","setIsCalendarOpen","priorityStyles","low","indigo","medium","pink","high","lightGreen","without","grey","inputTitle","trim","inputDescription","description","inputPriority","priority","inputDeadline","format","cardData","nanoid","autoComplete","Object","keys","Radio","item","checked","inputProps","sx","fontSize","backgroundColor","borderRadius","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","open","onClose","date","disablePast","outsideCurrentMonth","dayOfWeekFormatter","day","slice","toUpperCase","slots","openPickerButton","slotProps","textField","variant","size","InputProps","disableUnderline","endAdornment","InputAdornment","cursor","edge","getAllBoards","flexWrap","AddBoard","AddCard","ScreensPage"],"sourceRoot":""}