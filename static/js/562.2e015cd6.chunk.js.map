{"version":3,"file":"static/js/562.2e015cd6.chunk.js","mappings":"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","sources":["components/MainDashboard/BtnAddColumn.jsx","components/MainDashboard/Filters.jsx","components/AddCard/AddCard.jsx","components/Card/Card.jsx","components/MainDashboard/BtnAddCard.jsx","components/MainDashboard/TitleCards.jsx","components/MainDashboard/TaskColumn.jsx","components/MainDashboard/MainDashboard.jsx","components/ScreensPage/testAddBoard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddColumn = ({ className, title, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnColumn, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const Filters = ({ className, titleBoard, theme }) => {\n  const onFilters = () => {\n    console.log('Filters ckick');\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2 className={clsx(styles.KkTitle, styles[theme])}>{titleBoard}</h2>\n        <button\n          className={clsx(styles.KkBtnFilters, styles[theme])}\n          onClick={onFilters}\n        >\n          <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n          <p className={clsx(styles[theme])}>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nimport { nanoid } from 'nanoid';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { Radio, /*ThemeProvider, createTheme,*/ InputAdornment } from '@mui/material';\n\nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n\n\n\nconst AddCard = ({ modalTitle, id, cardTitle, description, priority, deadline, modalBtnTitle }) => {\n  // const dispatch = useDispatch();\n\n  const [titleValue, setTitleValue] = useState(cardTitle); // для редагування\n  const [descriptionValue, setDescriptionValue] = useState(description); // для редагування\n  const [selectedPriority, setSelectedPriority] = useState(priority ? priority : 'without');\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(deadline ? dayjs(deadline, 'DD/MM/YYYY') : dayjs()); // dayjs() - currentDate\n  //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  // deadline ? dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\") : dayjs()\n\n  // console.log(deadline) //01/09/2023\n  // console.log(dayjs(deadline)) // M {... Mon Jan 09 2023 00:00:00 ...} - міняє день і місяць місцями\n  // console.log(dayjs(deadline, 'DD/MM/YYYY')); // M {... Fri Sep 01 2023 00:00:00 ...} - тепер все Ок\n  // Тепер бібліотека Material UA застосує формат \"dddd, MMMM D\" і отримаємо те, що треба:\n  // console.log(dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\")); // Thursday, August 31\n  \n\n  // \"Today, September 01\" або \"Saturday, September 02\"\n  const dateFormat = dayjs(selectedDate).format(\"dddd, MMMM D\") === dayjs().format(\"dddd, MMMM D\") ? '[Today,] MMMM D' : \"dddd, MMMM D\";\n\n\n  const handleFormSubmit = event => { // відправка даних\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    const inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n    const inputDeadline = dayjs(selectedDate).format('DD/MM/YYYY'); //   29/11/2023\n\n    const cardData = {\n      'id': nanoid(),\n      'title': inputTitle, \n      'description': inputDescription, \n      'priority': inputPriority,\n      'deadline': inputDeadline,\n    }\n\n    console.log(cardData);\n\n    // dispatch(addBoards(cardData));  // відправка на бекенд, а потім в стор редакса\n\n    event.target.reset();\n  };\n\n  // --------------- пріоритетність ----------------------\n  \n  const controlProps = (item) => ({ // low, medium, high, without\n      value: item,\n      onChange: (e) => setSelectedPriority(e.target.value),\n      checked: selectedPriority === item,\n      name: 'priority',\n      inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n      low: indigo[200],\n      medium: pink[200],\n      high: lightGreen[200],\n      without: grey[400],\n  };\n\n  \n\n  return (\n    <div className={scss.OBAddContainer}>\n      <h4 className={scss.OBAddTitle}>{modalTitle}</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n            defaultValue={titleValue} // для редагування\n            onChange={(e) => setTitleValue(e.target.value)}  // для редагування\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n            defaultValue={descriptionValue} // для редагування\n            onChange={(e) => setDescriptionValue(e.target.value)}  // для редагування\n          />\n        </label>\n\n        <div className={scss.OBAddlabel}> \n            Label color \n          <div className={scss.OBAddRadioGroup}>  \n            {Object.keys(priorityStyles).map((priority) => ( //['low', 'medium', 'high', 'without']\n              <Radio className={scss.OBAddradioBtn}\n                key={priority}\n                {...controlProps(priority)}\n                sx={{\n                  color: priorityStyles[priority],\n                  '&.Mui-checked': {\n                    color: priorityStyles[priority],\n                  },\n                  '&.Mui-checked .MuiSvgIcon-root': {\n                    fontSize: '17px',\n                  },\n                  '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                    fontSize: '14px',\n                    backgroundColor: priorityStyles[priority],\n                    borderRadius: '50%',\n                  },\n                }}\n              />\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <LocalizationProvider dateAdapter={AdapterDayjs}> \n          {/* dateAdapter={AdapterDayjs} - вказуємо, що під капотом використовуємо бібліотеку Day.js (її методи) */}\n            <DatePicker\n              open={isCalendarOpen}\n              onClose={() => setIsCalendarOpen(false)} // закриття календаря\n              onChange={(date) => setSelectedDate(date)}   //Material UA в date записує обрану з календаря дату \n              // M {$L: 'en', $u: undefined, $d: Fri Sep 01 2023 09:13:29 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n              value={selectedDate}\n              format= {dateFormat} // приймає рядок\n              disablePast={true}   // минулі дати не обируться\n              outsideCurrentMonth={true} // початок наступного місяця невидимий\n              dayOfWeekFormatter={(day) => day.slice(0, 2).toUpperCase()} // видимі перші 2 літери назви дня тижня\n              className={scss.OBAddCalendar}\n              slots={{\n                openPickerButton: () => null, // приховуємо дефолтну кнопку-іконку календаря\n              }}\n              slotProps={{\n                calendarHeader: {\n                  style: {\n                    backgroundColor: 'red',\n                    // '.MuiPickersCalendarHeader-label': {\n                    //   fontSize: '50px',\n                    // }\n                  },\n                },\n                textField: {\n                  onClick: () => setIsCalendarOpen(true), // інпут стає клікабельним; по кліку відкривається календар (picker)\n                  variant: 'standard',\n                  size: 'small',\n                  InputProps: {\n                    disableUnderline: true,  // прибирає дефолтний нижній бордер, встановлений variant: 'standard'\n                    'aria-label': 'deadline',\n                    style: {\n                      fontSize: '14px', \n                      fontFamily: 'Poppins, sans-serif',\n                      color: '#5255BC',\n                      fontWeight: 500,\n                      letterSpacing: '-0.28px',                   \n                    },\n                    endAdornment: (   // прикраса в кінці інпуту - іконка (є і startAdornment)\n                     <InputAdornment\n                        position=\"start\"\n                        sx={{\n                          color: \"rgba(82, 85, 188, 1)\",\n                          cursor: 'pointer', \n                        }}\n                     >\n                        <svg className={scss.OBAddIcon} width='18px'>\n                            <use \n                              href={SvgSprite + '#icon-chevron-down'} // стрілка вниз в календарі  \n                              aria-label=\"open calendar\" \n                              edge=\"start\" \n                            />       \n                        </svg>\n                     </InputAdornment>\n                    ),\n                   },\n                },              \n              }}\n            />             \n          </LocalizationProvider>\n        </div>\n\n        <button className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddCard;","import { useState } from 'react';\n// import { useDispatch } from 'react-redux'\nimport dayjs from 'dayjs';\nimport { Modal } from '../Modal/Modal.jsx'\nimport { AddCard } from 'components/AddCard';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\n\nconst getBgColor = priority => {\n  switch (priority) {\n   case 'low':\n     return '#8FA1D0';\n   case 'medium':\n     return 'rgba(224, 156, 181, 1)';\n   case 'high':\n     return '#BEDBB0';\n   case 'without':\n     return 'rgba(22, 22, 22, 0.30)';\n   default:\n    break;\n  }    \n }\n\n\nconst Card = ({ id, cardTitle, description, priority, deadline }) => {\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n   // const dispatch = useDispatch();\n   const deadlineIsToday = dayjs().format('DD/MM/YYYY') === deadline; // dayjs().format('DD/MM/YYYY') - сьогоднішня дата у визначеному форматі\n   \n   const handleOpenModal = () => {\n     setIsModalOpen(true);\n   };\n\n   const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div style={{ borderLeftColor: getBgColor(priority) }} className={scss.OBCardContainer}>\n      <h4 className={scss.OBCardTitle}>{cardTitle}</h4>\n      <p className={scss.OBCardDescription}>{description}</p>\n\n      <hr className={scss.OBCardSeparator} />\n\n      <div className={scss.OBCardFooterContainer}>\n        <table className={scss.OBCardValuesContainer}>\n          <thead>\n            <tr>\n              <th className={scss.OBCardProreties}>Priority</th>\n              <th className={scss.OBCardProreties}>Deadline</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <div style={{ backgroundColor: getBgColor(priority) }} className={scss.OBCardPriorityCircle}></div>\n              </td>\n              <td className={scss.OBCardDate}>{deadline}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        {/* --------------------------- іконки --------------------------- */}\n\n        <div className={scss.OBCardIconsWrapper}>\n          {deadlineIsToday &&\n            <svg className={scss.OBCardBellIcon} width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-bell'} />\n            </svg>            \n          }\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='edit task' onClick={handleOpenModal}>\n            <svg width=\"16\" height=\"16\"> \n              <use href={SvgSprite + '#icon-pencil'} />\n            </svg>            \n          </button>\n          {isModalOpen && (\n            <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n                <AddCard modalTitle={'Edit card'} id={id} cardTitle={cardTitle} description={description} priority={priority} deadline={deadline} modalBtnTitle={'Edit'} /> \n            </Modal>             \n          )}\n          {/* <button type='button' className={scss.OBCardBtnIcon} aria-label='move task to another column'>\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-arrow'} />\n            </svg>\n          </button > */}\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='delete task' /*onClick={() => dispatch(deleteCard(id))}*/ >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-trash'} />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddCard = ({ title, className, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnCard, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusCard, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n// import { cleanDigitSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\n\nexport const TitleCards = ({ className, title, theme }) => {\n  const onIconPensil = () => {\n    console.log('icon pensil click');\n  };\n\n  const onIconTrash = () => {\n    console.log('icon trash click');\n  };\n\n  return (\n    <div className={className}>\n      <div className={clsx(styles.KkWrapTitleCards, styles[theme])}>\n        <p className={clsx(styles[theme])}> {title}</p>\n        <div className={styles.KkSvgTitleCards}>\n          <button className={styles.KkBtnIcons} onClick={onIconPensil}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-pencil`}></use>\n            </svg>\n          </button>\n\n          <button className={styles.KkBtnIcons} onClick={onIconTrash}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-trash`}></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport { Modal } from '../Modal/Modal';\nimport { Card } from 'components/Card';\nimport { AddCard } from 'components/AddCard';\nimport { BtnAddCard } from './BtnAddCard';\nimport { TitleCards } from './TitleCards';\nimport { useState } from 'react';\n\nexport const TaskColumn = ({ className, titleCards, cards }) => {\n  const [themeColor] = useState('light');\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div className={className}>\n      <TitleCards\n        className={styles.TitleCards}\n        title={titleCards}\n        theme={themeColor}\n      />\n\n      <ul className={styles.KkCards}>\n        {cards.map(({ id, titleCard, description, priority, deadline }) => (\n          <li key={id}>\n            <Card\n              cardTitle={titleCard}\n              description={description}\n              priority={priority}\n              deadline={deadline}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <BtnAddCard\n        className={styles.KkBtnAddCard}\n        title={'Add another card'}\n        onClick={handleOpenModal}\n        theme={themeColor}\n      />\n      {isModalOpen && (\n        <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n          <AddCard modalTitle={'Add card'} modalBtnTitle={'Add'} />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { Filters } from './Filters';\nimport { TaskColumn } from './TaskColumn';\nimport { useState } from 'react';\n\nexport const MainDashboard = () => {\n  // ниже имитация store (Redux) --------- temp temp\n  const [columns] = useState([\n    {\n      id: '01',\n      titleCards: 'Column Title 01',\n      cards: [\n        {\n          id: '01',\n          titleCard: 'Card Title 01',\n          description:\n            'Create visually appealing and functional design prototypes based on the pproved concepts',\n          priority: 'medium',\n          deadline: '31/08/2023',\n        },\n        {\n          id: '02',\n          titleCard: 'Card Title 02',\n          description:\n            'Conduct in-depth research and analysis on the project topic, gather relevant data, and identify',\n          priority: 'without',\n          deadline: '01/09/2023',\n        },\n        {\n          id: '03',\n          titleCard: 'Card Title 03',\n          description:\n            'In this example, the .limited-text class is applied to the <p> element. The max-height is set to the height of two lines of text (you might need to adjust this value based on your font size and line height). The overflow: hidden hides any content that overflows the specified height, and text-overflow: ellipsis adds the three dots (...) to indicate overflow.',\n          priority: 'medium',\n          deadline: '02/09/2023',\n        },\n        {\n          id: '04',\n          titleCard: 'Card Title 04',\n          description:\n            'Conduct in-depth research and analysis on the project topic, gather relevant data, and identify',\n          priority: 'medium',\n          deadline: '02/09/2023',\n        },\n        {\n          id: '05',\n          titleCard: 'Card Title 05',\n          description:\n            'Conduct in-depth research and analysis on the project topic, gather relevant data, and identify',\n          priority: 'low',\n          deadline: '31/08/2023',\n        },\n      ],\n    },\n    {\n      id: '02',\n      titleCards: 'Column Title 02',\n      cards: [\n        {\n          id: '01',\n          titleCard: 'Card Title 01',\n          description:\n            'Create visually appealing and functional design prototypes based on the pproved concepts',\n          priority: 'high',\n          deadline: '01/09/2023',\n        },\n        {\n          id: '02',\n          titleCard: 'Card Title 02',\n          description:\n            'Conduct in-depth research and analysis on the project topic, gather relevant data, and identify',\n          priority: 'low',\n          deadline: '31/08/2023',\n        },\n      ],\n    },\n    {\n      id: '03',\n      titleCards: 'Column Title 03',\n      cards: [\n        {\n          id: '01',\n          titleCard: 'Card Title 01',\n          description:\n            'Create visually appealing and functional design prototypes based on the pproved concepts',\n          priority: 'low',\n          deadline: '31/08/2023',\n        },\n        {\n          id: '02',\n          titleCard: 'Card Title 02',\n          description:\n            'Conduct in-depth research and analysis on the project topic, gather relevant data, and identify',\n          priority: 'high',\n          deadline: '01/09/2023',\n        },\n      ],\n    },\n    {\n      id: '04',\n      titleCards: 'Column Title 04',\n      cards: [\n        {\n          id: '01',\n          titleCard: 'Card Title 01',\n          description:\n            'Create visually appealing and functional design prototypes based on the pproved concepts',\n          priority: 'without',\n          deadline: '01/09/2023',\n        },\n      ],\n    },\n  ]);\n\n  const onAddColumn = () => {\n    console.log('Add Column click');\n  };\n\n  return (\n    <section className={styles.KkSectionMainDashboard}>\n      <Filters\n        className={styles.KkFilters}\n        titleBoard={'Board Title'}\n        theme={'light'}\n      />\n\n      <ul className={styles.KkColums}>\n        {columns.map(({ id, titleCards, cards }) => (\n          <li key={id}>\n            <TaskColumn\n              className={styles.KkTaskColumn}\n              titleCards={titleCards}\n              cards={cards}\n            />\n          </li>\n        ))}\n        <BtnAddColumn\n          className={styles.KkBtnAddColumnMain}\n          title={'Add column'}\n          theme={'light'}\n          onClick={onAddColumn}\n        />\n      </ul>\n    </section>\n  );\n};\n","import styles from 'styles/index.module.scss';\nimport scss from '../../styles/index.module.scss';\nimport sprite from '../../images/sprite.svg';\n\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  addBoards,\n  deleteBoards,\n  getBoardById,\n  updateBoard,\n} from 'redux/board/boardOperations';\nimport { useBoards } from 'hooks';\nimport { useEffect, useState } from 'react';\n// import { object, string } from 'yup';\nimport { useAuth } from 'hooks';\nimport { updateTheme } from 'redux/auth/authOperations';\n\n// const initialValues = {\n//   title: '',\n//   icon: '',\n//   background: '',\n// };\n\n// const boardSchema = object({\n//   title: string().required('Name is required'),\n//   icon: string(),\n//   background: string(),\n// });\n\nconst AddBoard = () => {\n  const [themeActive, setThemeActive] = useState(false);\n\n  const { allBoards, boardById } = useBoards();\n  const { user } = useAuth();\n\n  const dispatch = useDispatch();\n  const [valueInputUpdate, setvalueInputUpdate] = useState({\n    title: '',\n    icon: '',\n    background: '',\n  });\n  const [avatarURL, setAvatarURL] = useState('');\n  const [currentImage, setCurrentImage] = useState(user.avatarURL);\n\n  useEffect(() => {\n    setvalueInputUpdate({\n      title: boardById.title,\n      icon: boardById.icon,\n      background: boardById.background,\n    });\n  }, [boardById]);\n\n  // const handleSubmit = async (e) => {\n  // console.log(e)\n  // const dataBoard = { ...values };\n  // console.log(1, dataBoard);\n  // if (boards) {\n  //   const res = await dispatch(addBoards(dataBoard));\n  //   if (res.error) {\n  //     console.log(res.payload);\n  //   }\n  //   return res;\n  // }\n  // resetForm();\n  // console.log(3);\n  // };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    dispatch(addBoards(dataBoard));\n    form.reset();\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInputUpdate(prevBoard => ({\n      ...prevBoard,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmitUpdate = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      _id: boardById._id,\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    console.log(dataBoard);\n    dispatch(updateBoard(dataBoard));\n    form.reset();\n  };\n\n  function handleFileChange(event) {\n    const file = event;\n    if (!file) {\n      return;\n    }\n    setAvatarURL(file);\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      setCurrentImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  const handleClick = () => {\n    setThemeActive(!themeActive);\n  };\n\n  const handleClickTheme = theme => {\n    if (theme === 'light' || theme === 'dark' || theme === 'violet') {\n      if(theme === user.theme && !theme) {\n        return\n      }\n      dispatch(updateTheme(theme));\n    }\n  };\n\n  return (\n    <div>\n      <div className={scss.dropdownThemeWrap}>\n        <div className={scss.themeHeaderWrap}>\n          <p className={scss.themeText}>Theme</p>\n          <button\n            type=\"button\"\n            className={scss.btnThemeOpen}\n            onClick={handleClick}\n          >\n            <svg className={scss.svgTheme} width=\"16\" height=\"16\">\n              <use href={`${sprite}#icon-chevron-down`}></use>\n            </svg>\n          </button>\n        </div>\n        {themeActive && (\n          <div\n            className={scss.dropdownThemeMenu}\n            style={{ position: 'relative' }}\n          >\n            <ul className={scss.dropdownThemeList}>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('light');\n                }}\n              >\n                Light\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('dark');\n                }}\n              >\n                Dark\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('violet');\n                }}\n              >\n                Violet\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n\n      <div>{boardById && <p>Title active board:{boardById.title}</p>}</div>\n      <input\n        type=\"file\"\n        name=\"avatarURL\"\n        onChange={event => {\n          handleFileChange(event.currentTarget.files[0]);\n        }}\n        accept=\"image/*,.png,.jpg,.gif,.web\"\n      ></input>\n      <img\n        alt=\"user avatar\"\n        src={currentImage || avatarURL}\n        srcSet={currentImage || `${avatarURL} 1x, ${avatarURL} 2x`}\n      />\n\n      {allBoards?.length !== 0 && (\n        <ul style={{ display: 'flex', gap: '20px' }}>\n          {allBoards?.map(({ title, _id, icon, background }) => {\n            return (\n              <li\n                key={_id}\n                style={{ padding: '5px', border: 'grey solid 2px' }}\n                onClick={() => dispatch(getBoardById(_id))}\n              >\n                <p>Title: {title}</p>\n                <p>{icon}</p>\n                <p>{background}</p>\n                <button onClick={() => dispatch(deleteBoards(_id))}>\n                  DELETE\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      <form onSubmit={handleSubmitUpdate} className={styles.AfWelcomRegForm}>\n        <h2 style={{ color: 'white' }}>Update board</h2>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder={'Title'}\n          value={valueInputUpdate.title || ''}\n          onChange={handleChange}\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n          value={valueInputUpdate.icon || ''}\n          onChange={handleChange}\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n          value={valueInputUpdate.background || ''}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Update board\n        </button>\n      </form>\n\n      <form onSubmit={handleSubmit} className={styles.AfWelcomRegForm}>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Add new board\n        </button>\n      </form>\n\n      {/* <Formik\n        validationSchema={boardSchema}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n      >\n        {({ handleChange, values }) => (\n          <Form className={styles.AfWelcomRegForm}>\n            <div className={styles.AfWelcomRegFormInCn}>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  autoFocus\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  onChange={handleChange('title')}\n                  value={values.title || ''}\n                  required\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"icon\"\n                  placeholder=\"Icon\"\n                  onChange={handleChange('icon')}\n                  value={values.icon || ''}\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"background\"\n                  placeholder=\"background\"\n                  onChange={handleChange('background')}\n                  value={values.background || ''}\n                />\n              </div>\n            </div>\n            <ErrorMessage\n              className={styles.AfWelcomRegFormError}\n              name=\"password\"\n              component=\"div\"\n            />\n            <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n              Add new board\n            </button>\n          </Form>\n        )}\n      </Formik> */}\n    </div>\n  );\n};\nexport default AddBoard;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from 'styles/index.module.scss';\nimport { getAllBoards } from 'redux/board/boardOperations';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\n// import EditProfile from 'components/EditProfile/EditProfile';\nimport { useAuth } from 'hooks';\nimport AddBoard from './testAddBoard';\n// import { AddCard } from 'components/AddCard';\n// import { Card } from 'components/Card';\n// import NewBoard from 'components/ModalBoard/NewBoard';\n// import { PopColumn } from 'components/PopColumn';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  const user = useAuth();\n  console.log(45465151, user)\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n\n  return (\n    <section className={styles.YMScreenReg}>\n      <div\n        className={styles.AfWelcomRegWr}\n      >\n        <MainDashboard />\n        {/* <EditProfile/> */}\n        <AddBoard />\n        {/* <AddCard /> */}\n        {/* <Card /> */}\n        {/* <NewBoard /> */}\n        {/* <PopColumn /> */}\n      </div>\n    </section>\n  );\n};\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>\n        <ScreensPage />\n      </div>\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["BtnAddColumn","_ref","className","title","theme","onClick","_jsx","children","_jsxs","clsx","styles","width","height","href","concat","SvgSprite","Filters","titleBoard","console","log","modalTitle","cardTitle","id","description","priority","deadline","modalBtnTitle","_useState","useState","_useState2","_slicedToArray","titleValue","setTitleValue","_useState3","_useState4","descriptionValue","setDescriptionValue","_useState5","_useState6","selectedPriority","setSelectedPriority","_useState7","_useState8","isCalendarOpen","setIsCalendarOpen","_useState9","dayjs","_useState10","selectedDate","setSelectedDate","dateFormat","format","priorityStyles","low","indigo","medium","pink","high","lightGreen","without","grey","scss","onSubmit","event","preventDefault","inputTitle","target","elements","value","trim","inputDescription","inputPriority","inputDeadline","cardData","nanoid","reset","autoComplete","type","name","placeholder","autoFocus","required","defaultValue","onChange","e","Object","keys","map","Radio","_objectSpread","item","checked","inputProps","sx","color","fontSize","backgroundColor","borderRadius","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","open","onClose","date","disablePast","outsideCurrentMonth","dayOfWeekFormatter","day","slice","toUpperCase","slots","openPickerButton","slotProps","calendarHeader","style","textField","variant","size","InputProps","disableUnderline","fontFamily","fontWeight","letterSpacing","endAdornment","InputAdornment","position","cursor","edge","getBgColor","isModalOpen","setIsModalOpen","deadlineIsToday","borderLeftColor","Modal","isOpen","AddCard","BtnAddCard","TitleCards","TaskColumn","titleCards","cards","themeColor","_ref2","titleCard","Card","MainDashboard","columns","themeActive","setThemeActive","_useBoards","useBoards","allBoards","boardById","user","useAuth","dispatch","useDispatch","icon","background","valueInputUpdate","setvalueInputUpdate","avatarURL","setAvatarURL","currentImage","setCurrentImage","useEffect","handleChange","_event$target","prevBoard","_defineProperty","handleClickTheme","updateTheme","sprite","file","reader","FileReader","onload","result","readAsDataURL","handleFileChange","currentTarget","files","accept","alt","src","srcSet","length","display","gap","_id","padding","border","getBoardById","deleteBoards","form","_event$target$element2","dataBoard","updateBoard","_event$target$element","addBoards","getAllBoards","AddBoard","_Fragment","ScreensPage"],"sourceRoot":""}