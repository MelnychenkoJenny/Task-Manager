{"version":3,"file":"static/js/583.aaf9e236.chunk.js","mappings":"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","sources":["components/Error/Error.jsx","components/ScreensPage/testAddBoard.jsx","pages/NotFoundPage.jsx"],"sourcesContent":["import styles from 'styles/index.module.scss';\nimport spriteSvg from 'images/sprite.svg';\n\nconst Error = () => {\n  return (\n    <section className={styles.AfErrorS}>\n      <div className={styles.AfErrorSWr}>\n        <svg className={styles.AfErrorSWrSvg}>\n          <use href={spriteSvg + '#icon-error'} />\n        </svg>\n\n        <h2 className={styles.AfErrorSWrTitle}>\n          <span>404</span>\n          <span>Page not found</span>\n        </h2>\n      </div>\n    </section>\n  );\n};\nexport default Error;\n","import styles from 'styles/index.module.scss';\nimport scss from '../../styles/index.module.scss';\nimport sprite from '../../images/sprite.svg';\n\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  addBoards,\n  deleteBoards,\n  getBoardById,\n  updateBoard,\n} from 'redux/board/boardOperations';\nimport { useBoards } from 'hooks';\nimport { useEffect, useState } from 'react';\n// import { object, string } from 'yup';\nimport { useAuth } from 'hooks';\nimport { updateTheme } from 'redux/auth/authOperations';\n\n// const initialValues = {\n//   title: '',\n//   icon: '',\n//   background: '',\n// };\n\n// const boardSchema = object({\n//   title: string().required('Name is required'),\n//   icon: string(),\n//   background: string(),\n// });\n\nconst AddBoard = () => {\n  const [themeActive, setThemeActive] = useState(false);\n\n  const { allBoards, boardById } = useBoards();\n  const { user } = useAuth();\n  console.log('user', user);\n  const dispatch = useDispatch();\n  const [valueInputUpdate, setvalueInputUpdate] = useState({\n    title: '',\n    icon: '',\n    background: '',\n  });\n  const [avatarURL, setAvatarURL] = useState('');\n  const [currentImage, setCurrentImage] = useState(user.avatarURL);\n\n  useEffect(() => {\n    setvalueInputUpdate({\n      title: boardById.title,\n      icon: boardById.icon,\n      background: boardById.background,\n    });\n  }, [boardById]);\n\n  // const handleSubmit = async (e) => {\n  // console.log(e)\n  // const dataBoard = { ...values };\n  // console.log(1, dataBoard);\n  // if (boards) {\n  //   const res = await dispatch(addBoards(dataBoard));\n  //   if (res.error) {\n  //     console.log(res.payload);\n  //   }\n  //   return res;\n  // }\n  // resetForm();\n  // console.log(3);\n  // };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    dispatch(addBoards(dataBoard));\n    form.reset();\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInputUpdate(prevBoard => ({\n      ...prevBoard,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmitUpdate = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      _id: boardById._id,\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    console.log(dataBoard);\n    dispatch(updateBoard(dataBoard));\n    form.reset();\n  };\n\n  function handleFileChange(event) {\n    const file = event;\n    if (!file) {\n      return;\n    }\n    setAvatarURL(file);\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      setCurrentImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  const handleClick = () => {\n    setThemeActive(!themeActive);\n  };\n\n  const handleClickTheme = theme => {\n    if (theme === 'light' || theme === 'dark' || theme === 'violet') {\n      if(theme === user.theme && !theme) {\n        return\n      }\n      dispatch(updateTheme(theme));\n    }\n  };\n\n  return (\n    <div>\n      <div className={scss.dropdownThemeWrap}>\n        <div className={scss.themeHeaderWrap}>\n          <p className={scss.themeText}>Theme</p>\n          <button\n            type=\"button\"\n            className={scss.btnThemeOpen}\n            onClick={handleClick}\n          >\n            <svg className={scss.svgTheme} width=\"16\" height=\"16\">\n              <use href={`${sprite}#icon-chevron-down`}></use>\n            </svg>\n          </button>\n        </div>\n        {themeActive && (\n          <div\n            className={scss.dropdownThemeMenu}\n            style={{ position: 'relative' }}\n          >\n            <ul className={scss.dropdownThemeList}>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('light');\n                }}\n              >\n                Light\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('dark');\n                }}\n              >\n                Dark\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('violet');\n                }}\n              >\n                Violet\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n\n      <div>{boardById && <p>Title active board:{boardById.title}</p>}</div>\n      <input\n        type=\"file\"\n        name=\"avatarURL\"\n        onChange={event => {\n          handleFileChange(event.currentTarget.files[0]);\n        }}\n        accept=\"image/*,.png,.jpg,.gif,.web\"\n      ></input>\n      <img\n        alt=\"user avatar\"\n        src={currentImage || avatarURL}\n        srcSet={currentImage || `${avatarURL} 1x, ${avatarURL} 2x`}\n      />\n\n      {allBoards?.length !== 0 && (\n        <ul style={{ display: 'flex', gap: '20px' }}>\n          {allBoards?.map(({ title, _id, icon, background }) => {\n            return (\n              <li\n                key={_id}\n                style={{ padding: '5px', border: 'grey solid 2px' }}\n                onClick={() => dispatch(getBoardById(_id))}\n              >\n                <p>Title: {title}</p>\n                <p>{icon}</p>\n                <p>{background}</p>\n                <button onClick={() => dispatch(deleteBoards(_id))}>\n                  DELETE\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      <form onSubmit={handleSubmitUpdate} className={styles.AfWelcomRegForm}>\n        <h2 style={{ color: 'white' }}>Update board</h2>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder={'Title'}\n          value={valueInputUpdate.title || ''}\n          onChange={handleChange}\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n          value={valueInputUpdate.icon || ''}\n          onChange={handleChange}\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n          value={valueInputUpdate.background || ''}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Update board\n        </button>\n      </form>\n\n      <form onSubmit={handleSubmit} className={styles.AfWelcomRegForm}>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Add new board\n        </button>\n      </form>\n\n      {/* <Formik\n        validationSchema={boardSchema}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n      >\n        {({ handleChange, values }) => (\n          <Form className={styles.AfWelcomRegForm}>\n            <div className={styles.AfWelcomRegFormInCn}>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  autoFocus\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  onChange={handleChange('title')}\n                  value={values.title || ''}\n                  required\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"icon\"\n                  placeholder=\"Icon\"\n                  onChange={handleChange('icon')}\n                  value={values.icon || ''}\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"background\"\n                  placeholder=\"background\"\n                  onChange={handleChange('background')}\n                  value={values.background || ''}\n                />\n              </div>\n            </div>\n            <ErrorMessage\n              className={styles.AfWelcomRegFormError}\n              name=\"password\"\n              component=\"div\"\n            />\n            <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n              Add new board\n            </button>\n          </Form>\n        )}\n      </Formik> */}\n    </div>\n  );\n};\nexport default AddBoard;\n","import Error from 'components/Error/Error';\nimport AddBoard from 'components/ScreensPage/testAddBoard';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllBoards } from 'redux/board/boardOperations';\n\nconst NotFound = () => {\n  \n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Error />\n      <AddBoard />\n    </>\n  );\n};\nexport default NotFound;\n"],"names":["_jsx","className","styles","children","_jsxs","href","spriteSvg","_useState","useState","_useState2","_slicedToArray","themeActive","setThemeActive","_useBoards","useBoards","allBoards","boardById","user","useAuth","console","log","dispatch","useDispatch","_useState3","title","icon","background","_useState4","valueInputUpdate","setvalueInputUpdate","_useState5","_useState6","avatarURL","setAvatarURL","_useState7","_useState8","currentImage","setCurrentImage","useEffect","handleChange","event","_event$target","target","name","value","prevBoard","_objectSpread","_defineProperty","handleClickTheme","theme","updateTheme","scss","type","onClick","width","height","concat","sprite","style","position","onChange","file","reader","FileReader","onload","e","result","readAsDataURL","handleFileChange","currentTarget","files","accept","alt","src","srcSet","length","display","gap","map","_ref","_id","padding","border","getBoardById","deleteBoards","onSubmit","preventDefault","form","_event$target$element2","elements","dataBoard","updateBoard","reset","color","autoFocus","placeholder","required","_event$target$element","addBoards","getAllBoards","_Fragment","Error","AddBoard"],"sourceRoot":""}