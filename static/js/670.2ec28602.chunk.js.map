{"version":3,"file":"static/js/670.2ec28602.chunk.js","mappings":"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","sources":["components/AddCard/RadioBtns.jsx","components/MainDashboard/FiltersModal.jsx","components/MainDashboard/Filters.jsx","components/MainDashboard/BtnAddColumn.jsx","components/PopColumn/PopColumn.jsx","components/MainDashboard/BtnAddCard.jsx","components/AddCard/AddCard.jsx","components/Card/Card.jsx","components/MainDashboard/TitleCards.jsx","components/MainDashboard/MainDashboard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport scss from 'styles/index.module.scss';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { FormControlLabel, Radio } from '@mui/material';\n\n\nexport const RadioBtns = ({ parentComponent }) => {\n  const [selectedPriority, setSelectedPriority] = useState('low');    // priority ? priority : 'without'\n\n  console.log(selectedPriority);\n\n  // if (id) {\n  //   dispatch(\n  //     operation({\n  //       selectedPriority,\n  //       taskOwner: idColumn,\n  //       idTask: id,\n  //       boardId: boardName,\n  //     })\n  //   );\n  // } else {\n  //   dispatch(\n  //     operation({ selectedPriority, taskOwner: idColumn, boardId: boardName })\n  //   );\n  // }\n\n  const controlProps = item => ({  // low, medium, high, without\n    value: item,\n    onChange: e => setSelectedPriority(e.target.value),\n    checked: selectedPriority === item,\n    name: 'priority',\n    inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n    low: indigo[200],\n    medium: pink[200],\n    high: lightGreen[200],\n    without: grey[400],\n  };\n \n  function capitalizeFirstLetter(priority) {\n    return priority.charAt(0).toUpperCase() + priority.slice(1);\n  }\n\n  return (\n    <div>\n      <p className={scss.OBFiltersModalLabel}>Label color</p>\n      <div className={ `${parentComponent === 'FiltersModal' ? scss.OBFiltersModalRadioGroupV : scss.OBFiltersModalRadioGroupH }`}>\n        {Object.keys(priorityStyles).map((priority) => (       //['low', 'medium', 'high', 'without'])\n          <FormControlLabel\n            key={priority}\n            label={priority === 'without' ? 'Without priority' : capitalizeFirstLetter(priority)}\n            labelPlacement=\"end\"\n            className={scss.OBFiltersModalRadioLabel}\n\n            control={\n              <Radio \n                className={scss.OBFiltersModalRadioBtn}\n                {...controlProps(priority)}\n                sx={{\n                  color: priorityStyles[priority],\n                  '&.Mui-checked': {\n                    color: priorityStyles[priority],\n                  },\n                  '&.Mui-checked .MuiSvgIcon-root': {\n                    fontSize: '17px',\n                  },\n                  '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                    fontSize: '14px',\n                    backgroundColor: priorityStyles[priority],\n                    borderRadius: '50%',\n                  },\n                }}\n              />\n            }\n          />\n        ))}\n      </div>\n  </div>\n  );\n};","import scss from 'styles/index.module.scss';\nimport { RadioBtns } from '../AddCard/RadioBtns';\nimport { useAuth } from 'hooks';\n\nexport const FiltersModal = () => {\n  const { user } = useAuth();\n\n  const handleShowAll = () => {\n    console.log('Filtered tasks will be shown')\n  }\n\n  return (\n    <div className={scss.OBFiltersModalContainer} data-theme={user.theme}>\n        <h4 className={scss.OBFiltersModalTitle}>Filters</h4>\n        <hr />  \n        {/* rgba(22, 22, 22, 0.10);          темна rgba(255, 255, 255, 0.10) */}\n        <div className={scss.OBFiltersModalContent}>\n            <RadioBtns parentComponent={'FiltersModal'} />\n            <p className={scss.OBFiltersModalShow} onClick={handleShowAll}>Show all</p>\n        </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport { useState } from 'react';\nimport { FiltersModal } from './FiltersModal';\nimport { Modal } from '../Modal/Modal'\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useBoards } from 'hooks';\n\n\nexport const Filters = ({ className }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { boardById } = useBoards();\n\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n  \n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2\n          className={styles.KkTitle}\n          style={{ padding: !boardById.background && '4px' }}\n        >\n          {boardById.title}\n        </h2>\n        {/* <h2 className={styles.KkTitle}>{boardById.title}</h2> */}\n\n        <button className={styles.KkBtnFilters} onClick={handleOpenModal}>\n          <svg width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n          {isModalOpen && (\n            <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n              <FiltersModal onClose={handleCloseModal} />\n            </Modal>\n          )}\n          <p>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddColumn = ({ className, title, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnColumn, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useAuth } from 'hooks';\n\nexport const PopColumn = ({\n  modalTitle,\n  modalBtnTitle,\n  onClose,\n  operation,\n  idColumn,\n  infoData,\n}) => {\n  const { user } = useAuth();\n  const boardId = useParams();\n  const dispatch = useDispatch();\n  const [valueInput, setvalueInput] = useState(\n    infoData ? { title: infoData.title } : { title: '' }\n  );\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInput(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const dataSubmit = idColumn\n      ? {\n          title: valueInput.title,\n          idColumn: idColumn,\n        }\n      : {\n          title: valueInput.title,\n          board: boardId.boardName,\n        };\n    dispatch(operation(dataSubmit));\n\n    onClose();\n  };\n\n  return (\n    <div className={scss.AAColumnContainer} data-theme={user.theme}>\n      <h4 className={scss.AAColumnTitle}>{modalTitle}</h4>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.AAColumnInput}\n            value={valueInput.title || ''}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={scss.AAColumnBtn}>\n          <div className={scss.AAColumnSvgContainer}>\n            <svg className={scss.AAColumnSvg}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// export default PopColumn;\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddCard = ({ title, className, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnCard, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusCard, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useAuth } from 'hooks';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { Radio, InputAdornment } from '@mui/material';\nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { useParams } from 'react-router-dom';\n\nexport const AddCard = ({\n  modalTitle,\n  idColumn,\n  id,\n  cardTitle,\n  description,\n  priority,\n  deadline,\n  modalBtnTitle,\n  onClose,\n  operation,\n}) => {\n  const { user } = useAuth();\n  const dispatch = useDispatch();\n  const { boardName } = useParams();\n\n  const [titleValue, setTitleValue] = useState(cardTitle); // для редагування\n  const [descriptionValue, setDescriptionValue] = useState(description); // для редагування\n  const [selectedPriority, setSelectedPriority] = useState(\n    priority ? priority : 'without'\n  );\n  const [inputWidth, setInputWidth] = useState('auto');\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(\n    deadline ? dayjs(deadline, 'DD/MM/YYYY') : dayjs()\n  ); // dayjs() - currentDate\n\n  //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  // deadline ? dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\") : dayjs()\n\n  // console.log(deadline) //01/09/2023\n  // console.log(dayjs(deadline)) // M {... Mon Jan 09 2023 00:00:00 ...} - міняє день і місяць місцями\n  // console.log(dayjs(deadline, 'DD/MM/YYYY')); // M {... Fri Sep 01 2023 00:00:00 ...} - тепер все Ок\n  // Тепер бібліотека Material UA застосує формат \"dddd, MMMM D\" і отримаємо те, що треба:\n  // console.log(dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\")); // Thursday, August 31\n\n  // \"Today, September 01\" або \"Saturday, September 02\"\n  const dateFormat =\n    dayjs(selectedDate).format('dddd, MMMM D') ===\n    dayjs().format('dddd, MMMM D')\n      ? '[Today,] MMMM D'\n      : 'dddd, MMMM D';\n\n  //------------------------------------- Submit -------------------------------------------\n\n  const handleFormSubmit = event => {\n    // відправка даних\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    const inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n    const inputDeadline = dayjs(selectedDate).format('DD/MM/YYYY'); //   29/11/2023\n\n    const cardData = {\n\n      title: inputTitle,\n      description: inputDescription,\n      priority: inputPriority,\n      deadLine: inputDeadline,\n    };\n    // {title: 'The Watch Spot Design', description: \"Create a visually stunning and eye-catching watch dial design that embodies our brand's\", priority: 'without', deadline: '11/10/2023', taskOwner: '64f548eb24765a1e4837366e'}\n    // відправка на бекенд, а потім в стор редакса\n    if (id) {\n      dispatch(\n        operation({\n          ...cardData,\n          taskOwner: idColumn,\n          idTask: id,\n          boardId: boardName,\n        })\n      );\n    } else {\n      dispatch(\n        operation({ ...cardData, taskOwner: idColumn, boardId: boardName })\n      );\n    }\n\n    event.target.reset();\n\n    if (event.currentTarget === event.target) {\n      onClose();\n      document.body.style.overflow = 'visible'; //body почне скролитися після закриття модалки\n    }\n  };\n\n  // --------------- пріоритетність ----------------------\n\n  const controlProps = item => ({\n    // low, medium, high, without\n    value: item,\n    onChange: e => setSelectedPriority(e.target.value),\n    checked: selectedPriority === item,\n    name: 'priority',\n    inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n    low: indigo[200],\n    medium: pink[200],\n    high: lightGreen[200],\n    without: grey[400],\n  };\n\n  //------------------ Ширина інпута DatePicker---------------------\n  useEffect(() => {\n    const contentWidth = selectedDate.format(dateFormat).length * 9;\n    setInputWidth(`${contentWidth}px`);\n  }, [selectedDate, dateFormat]);\n\n  return (\n    <div className={scss.OBAddContainer} data-theme={user.theme}>\n      <h4 className={scss.OBAddTitle}>{modalTitle}</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n            defaultValue={titleValue} // для редагування\n            onChange={e => setTitleValue(e.target.value)} // для редагування\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n            defaultValue={descriptionValue} // для редагування\n            onChange={e => setDescriptionValue(e.target.value)} // для редагування\n          />\n        </label>\n\n        <div className={scss.OBAddlabel}>\n          Label color\n          <div className={scss.OBAddRadioGroup}>\n            {Object.keys(priorityStyles).map(\n              (\n                priority //['low', 'medium', 'high', 'without']\n              ) => (\n                <Radio\n                  className={scss.OBAddradioBtn}\n                  key={priority}\n                  {...controlProps(priority)}\n                  sx={{\n                    color: priorityStyles[priority],\n                    '&.Mui-checked': {\n                      color: priorityStyles[priority],\n                    },\n                    '&.Mui-checked .MuiSvgIcon-root': {\n                      fontSize: '17px',\n                    },\n                    '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                      fontSize: '14px',\n                      backgroundColor: priorityStyles[priority],\n                      borderRadius: '50%',\n                    },\n                  }}\n                />\n              )\n            )}\n          </div>\n        </div>\n\n        <div>\n          <p className={scss.OBAddlabel}>Deadline</p>\n          <LocalizationProvider dateAdapter={AdapterDayjs}>\n            {/* dateAdapter={AdapterDayjs} - вказуємо, що під капотом використовуємо бібліотеку Day.js (її методи) */}\n            <DatePicker\n              open={isCalendarOpen}\n              onClose={() => setIsCalendarOpen(false)} // закриття календаря\n              onChange={date => setSelectedDate(date)} //Material UA в date записує обрану з календаря дату\n              // M {$L: 'en', $u: undefined, $d: Fri Sep 01 2023 09:13:29 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n              value={selectedDate}\n              format={dateFormat} // приймає рядок\n              disablePast={true} // минулі дати не обируться\n              outsideCurrentMonth={true} // початок наступного місяця невидимий\n              dayOfWeekFormatter={day => day.slice(0, 2).toUpperCase()} // видимі перші 2 літери назви дня тижня\n              slots={{\n                openPickerButton: () => null, // приховуємо дефолтну кнопку-іконку календаря\n              }}\n              slotProps={{\n                popper: {\n                  placement: 'bottom-start',\n                  sx: {\n                    '.css-71vzt-MuiPaper-root-MuiPickersPopper-paper': { // полотно календаря\n                      // backgroundColor: 'red', // працює\n                      border: '1px solid',\n                      borderColor: user.theme === 'violet' ? '#585bbe' : '#bedfad',\n                      borderRadius: '8px',\n                      padding: '18px',\n                      width: '233px',\n                      height: '254px',\n                    },\n                    '.MuiPickersLayout-root.': {\n                      width: '197px',\n                      // hight: '110px',\n                    },\n                    '.MuiDateCalendar-root': {\n                      // полотно календаря без зовнішніх падінгів\n                      // backgroundColor: 'orange',\n                      width: '197px',\n                      hight: '166px',\n                    },\n\n                    '.css-cwhad8-MuiDateCalendar-root': {  // полотно календаря без зовнішніх падінгів\n\n                      height: '215px',\n                    },\n                    '.MuiPickersLayout-contentWrapper': {\n                      width: '197px',\n                      // hight: '166px',\n                    },\n                    '.MuiPickersCalendarHeader-root': {\n                      // місяць і дата\n                      // backgroundColor: 'yellowgreen',\n                      textAlign: 'center',\n                      borderBottom: '1px solid rgba(22, 22, 22, 0.20)',\n                    },\n                    '.MuiPickersCalendarHeader-label': {\n                      margin: 0,\n                    },\n                    '.MuiTypography-root': {\n                      // дні тижня\n                      // backgroundColor: 'violet',\n                      marginTop: '14px',\n                      width: '23px',\n                      height: '23px',\n                    },\n                    '.MuiDayCalendar-monthContainer': {\n                      // полотно дат\n                      // backgroundColor: 'red',\n                      width: '197px',\n                      hight: '166px',\n                    },\n                    '.MuiDayCalendar-weekContainer': {\n                      // backgroundColor: 'blue',\n                      marginBottom: '3px',\n                    },\n                    '.MuiPickersDay-dayWithMargin': {\n                      // дні іншого місяця\n                      width: '23px',\n                      height: '23px',\n                    },\n                    '.MuiButtonBase-root': {\n                      // один день\n                      width: '23px',\n                      height: '23px',\n                    },\n                    '.MuiPickersDay-root': {\n                      // усі дні\n                      // backgroundColor: 'green',\n                      fontFamily: 'Poppins',\n                      fontSize: '14px',\n                      fontweight: '400',\n                      lineHeight: '18px',\n                    },\n                    '.MuiPickersDay-root.Mui-selected': {\n                      // вибраний день\n                      backgroundColor:\n                        user.theme === 'violet' ? '#585bbe' : '#bedfad',\n                      '&:hover': {\n                        backgroundColor:\n                          user.theme === 'violet' ? '#8d8fc9' : '#9fd186',\n                      },\n                    },\n                  },\n                },\n                calendarHeader: {\n                  sx: {\n                    '.MuiPickersCalendarHeader-root': {\n                      position: 'relative',\n                    },\n                    '.MuiPickersCalendarHeader-labelContainer': {\n                      // це тільки місяць і рік\n                      // backgroundColor: 'green',\n                      fontFamily: 'Poppins, sans-serif',\n                      fontSize: '16px',\n                      fontWeight: 500,\n                      letterSpacing: '-0.32px',\n                      display: 'grid', // тепер місяць і рік центровані\n                    },\n                    '.MuiPickersCalendarHeader-label': {\n                      display: 'inline-block',\n                    },\n                    '.MuiPickersCalendarHeader-switchViewButton': {\n                      display: 'none', // прибираємо стрілку вниз поряд з місяцем і роком\n                    },\n                    '.MuiIconButton-edgeEnd': {\n                      // кнопка <\n                      position: 'absolute',\n                      top: '17px',\n                      left: '14px',\n                    },\n                    '.MuiIconButton-edgeStart': {\n                      // кнопка >\n                      position: 'absolute',\n                      top: '17px',\n                      right: '12px',\n                    },\n                  },\n                  style: {\n                    display: 'inline',\n                    margin: 0,\n                    padding: 0,\n                  },\n                },\n\n                previousIconButton: {\n                  sx: {\n                    stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0',\n                  },\n                },\n                nextIconButton: {\n                  sx: {\n                    stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0',\n                  },\n                },\n\n                textField: {\n                  fullWidth: false,\n                  onClick: () => setIsCalendarOpen(true), // інпут стає клікабельним; по кліку відкривається календар (picker)\n                  variant: 'standard',\n                  size: 'small',\n                  sx: {\n                    width: inputWidth,\n                    minWidth: '130px',\n                    '.css-nz481w-MuiInputBase-input-MuiInput-input': {\n                      // інпут без кнопки\n                      padding: 0,\n                    },\n                  },\n                  InputProps: {\n                    disableUnderline: true, // прибирає дефолтний нижній бордер, встановлений variant: 'standard'\n                    'aria-label': 'deadline',\n                    style: {\n                      fontSize: '14px',\n                      fontFamily: 'Poppins, sans-serif',\n                      color: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', // колір тексту\n                      fontWeight: 500,\n                    },\n                    // розташування іконки - в кінці інпуту (є і startAdornment)\n                    endAdornment: (\n                      <InputAdornment\n                        position=\"start\"\n                        sx={{ cursor: 'pointer' }}\n                      >\n                        <svg className={scss.OBAddDateIcon} width=\"18px\">\n                          <use\n                            href={SvgSprite + '#icon-chevron-down'} // стрілка вниз в календарі\n                            aria-label=\"open calendar\"\n                            edge=\"start\"\n                          />\n                        </svg>\n                      </InputAdornment>\n                    ),\n                  },\n                },\n              }}\n            ></DatePicker>\n          </LocalizationProvider>\n        </div>\n\n        <button type=\"submit\" className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddSubmitIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport dayjs from 'dayjs';\nimport { Modal } from '../Modal/Modal';\nimport { AddCard } from '../AddCard/AddCard';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { deleteTasks, updateTasks } from 'redux/board/boardOperations';\nimport { useParams } from 'react-router-dom';\nimport { useAuth } from 'hooks';\n\nconst getBgColor = (priority, color) => {\n  switch (priority) {\n   case 'low':\n     return '#8FA1D0';\n   case 'medium':\n     return 'rgba(224, 156, 181, 1)';\n   case 'high':\n     return '#BEDBB0';\n   case 'without':\n     return color; //'rgba(22, 22, 22, 0.30)'; //rgba(255, 255, 255, 0.30)\n   default:\n    break;\n  }    \n }\n\n\nconst Card = ({ id, cardTitle, description, priority, deadline, idColumn }) => {\n  const { user } = useAuth();\n  const { boardName } = useParams();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isOverflowVisible, setOverflowVisible] = useState(false); // управління станом відкриття тексту\n  const dispatch = useDispatch();\n  const deadlineIsToday = dayjs().format('DD/MM/YYYY') === deadline; // dayjs().format('DD/MM/YYYY') - сьогоднішня дата у визначеному форматі\n\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const handleDescClick = () => {\n    setOverflowVisible(!isOverflowVisible);\n  };\n\n  return (\n    <div style={{ borderLeftColor: getBgColor(priority, user.theme === 'dark' ? 'rgba(255, 255, 255, 0.30)' : 'rgba(22, 22, 22, 0.30)') }} className={scss.OBCardContainer} data-theme={user.theme}>\n\n      <h4 className={scss.OBCardTitle}>{cardTitle}</h4>\n      <p className={`${scss.OBCardDescription}  ${isOverflowVisible ? scss.OBCardDescriptionFull : scss.OBCardDescriptionShort}`} onClick={handleDescClick}>{description}</p>\n\n      <hr className={scss.OBCardSeparator} />\n\n      <div className={scss.OBCardFooterContainer}>\n        <table className={scss.OBCardValuesContainer}>\n          <thead>\n            <tr>\n              <th className={scss.OBCardProreties}>Priority</th>\n              <th className={scss.OBCardProreties}>Deadline</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <div\n                  style={{ backgroundColor: getBgColor(priority, user.theme === 'dark' ? 'rgba(255, 255, 255, 0.30)' : 'rgba(22, 22, 22, 0.30)') }}\n                  className={scss.OBCardPriorityCircle}\n                ></div>\n              </td>\n              <td className={scss.OBCardDate}>{deadline}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        {/* --------------------------- іконки --------------------------- */}\n\n        <div className={scss.OBCardIconsWrapper}>\n          {deadlineIsToday &&\n            (<svg className={scss.OBCardBellIcon} width=\"16\" height=\"16\" style={{ stroke: user.theme === 'violet' ? '#585bbe' : '#bedfad' }}>\n\n              <use href={SvgSprite + '#icon-bell'} />\n            </svg>\n          )}\n          <button\n            type=\"button\"\n            className={scss.OBCardBtnIcon}\n            aria-label=\"edit task\"\n            onClick={handleOpenModal}\n          >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-pencil'} />\n            </svg>\n          </button>\n          {isModalOpen && (\n            <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n              <AddCard\n                idColumn={idColumn}\n                modalTitle={'Edit card'}\n                id={id}\n                cardTitle={cardTitle}\n                description={description}\n                priority={priority}\n                deadline={deadline}\n                modalBtnTitle={'Edit'}\n                operation={updateTasks}\n                onClose={handleCloseModal}\n              />\n            </Modal>\n          )}\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='move task to another column'>\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-arrow'} />\n            </svg>\n          </button >\n          <button\n            type=\"button\"\n            className={scss.OBCardBtnIcon}\n            aria-label=\"delete task\"\n            onClick={() => dispatch(deleteTasks({ id, boardName }))}\n          >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-trash'} />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n// import { cleanDigitSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\n\nexport const TitleCards = ({ className, title, theme, onEdit, onTrash }) => {\n  // const onIconPensil = () => {\n  //   console.log('icon pensil click');\n  // };\n\n  // const onIconTrash = () => {\n  //   console.log('icon trash click');\n  // };\n\n  return (\n    <div className={className}>\n      <div className={clsx(styles.KkWrapTitleCards, styles[theme])}>\n        <p className={clsx(styles[theme])}> {title}</p>\n        <div className={styles.KkSvgTitleCards}>\n          <button className={styles.KkBtnIcons} onClick={onEdit}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-pencil`}></use>\n            </svg>\n          </button>\n\n          <button className={styles.KkBtnIcons} onClick={onTrash}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-trash`}></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport { Filters } from './Filters';\nimport styles from 'styles/index.module.scss';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { Modal } from '../Modal/Modal';\nimport { useState } from 'react';\nimport { PopColumn } from '../PopColumn/PopColumn';\nimport {\n  addColumn,\n  addTasks,\n  deleteColumn,\n  editColumn,\n} from 'redux/board/boardOperations';\nimport { useDispatch } from 'react-redux';\nimport { useBoards } from 'hooks';\n// import SvgSprite from 'images/sprite.svg';\nimport { BtnAddCard } from './BtnAddCard';\nimport { AddCard } from 'components/AddCard/AddCard';\nimport { Card } from 'components/Card';\nimport { TitleCards } from './TitleCards';\n\nexport const MainDashboard = () => {\n  const { columns } = useBoards();\n  const dispatch = useDispatch();\n\n  const [isModalAddOpen, setIsModalAddOpen] = useState(false);\n  const [isModalEditOpen, setIsModalEditOpen] = useState(false);\n  const [isModalAddCardOpen, setIsModalAddCardOpen] = useState(false);\n  const [activeColumnId, setActiveColumnId] = useState('');\n  const [titleColumnId, setTitleColumnId] = useState('');\n\n  //!! Тут на всі відкриття і закриття модалок можна зробити switch\n  const handleOpenAddModal = () => {\n    setIsModalAddOpen(true);\n  };\n  const handleCloseAddModal = () => {\n    setIsModalAddOpen(false);\n  };\n\n  const handleOpenEditModal = () => {\n    setIsModalEditOpen(true);\n  };\n  const handleCloseEditModal = () => {\n    setIsModalEditOpen(false);\n  };\n\n  const handleOpenAddCardModal = () => {\n    setIsModalAddCardOpen(true);\n  };\n  const handleCloseAddCardModal = () => {\n    setIsModalAddCardOpen(false);\n  };\n\n  const clickOnColumnItemHandle = columnId => {\n    setActiveColumnId(columnId);\n  };\n\n  const clickOnColumnTitleHandle = title => {\n    setTitleColumnId(title);\n  };\n\n  return (\n    <div className={styles.KkSectionMainDashboard}>\n      <Filters className={styles.KkFilters} />\n\n      <ul className={styles.KkColums}>\n        {columns &&\n          columns.map(({ _id, title, tasks }) => (\n            <li key={_id}>\n              {/* <p>title Column: {title}</p> */}\n              <TitleCards\n                className={styles.TitleCards}\n                title={title}\n                onEdit={() => {\n                  handleOpenEditModal();\n                  clickOnColumnItemHandle(_id);\n                  clickOnColumnTitleHandle(title);\n                }}\n                onTrash={() => dispatch(deleteColumn(_id))}\n              />\n\n              {/* <div className={styles.boardsListItemButtons}>\n                <button\n                  type=\"button\"\n                  className={styles.boardsListItemButton}\n                  onClick={() => {\n                    handleOpenEditModal();\n                    clickOnColumnItemHandle(_id);\n                    clickOnColumnTitleHandle(title);\n                  }}\n                >\n                  <svg\n                    className={styles.boardsListItemSvg}\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <use href={`${SvgSprite}#icon-pencil`}></use>\n                  </svg>\n                </button>\n                <button\n                  type=\"button\"\n                  className={styles.boardsListItemButton}\n                  onClick={() => dispatch(deleteColumn(_id))}\n                >\n                  <svg\n                    className={styles.boardsListItemSvg}\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <use href={`${SvgSprite}#icon-trash`}></use>\n                  </svg>\n                </button>\n              </div> */}\n\n              {tasks && (\n                <ul className={styles.KkCards}>\n                  {tasks.map(\n                    ({\n                      title: titleCard,\n                      description,\n                      priority,\n                      deadLine,\n                      _id: idCard,\n                    }) => {\n                      return (\n                        <li key={idCard}>\n                          <Card\n                            cardTitle={titleCard}\n                            id={idCard}\n                            description={description}\n                            priority={priority}\n                            deadline={deadLine}\n                            idColumn={_id}\n                          />\n                        </li>\n                      );\n                    }\n                  )}\n                </ul>\n              )}\n              <BtnAddCard\n                // className={styles.KkBtnAddColumnMain}\n                className={styles.KkBtnAddCard}\n                title={'Add another card'}\n                theme={'light'}\n                onClick={() => {\n                  handleOpenAddCardModal();\n                  clickOnColumnItemHandle(_id);\n                }}\n              />\n            </li>\n          ))}\n        <BtnAddColumn\n          className={styles.KkBtnAddColumnMain}\n          title={'Add another column'}\n          theme={'light'}\n          onClick={handleOpenAddModal}\n        />\n      </ul>\n      {isModalAddOpen && (\n        <Modal isOpen={isModalAddOpen} onClose={handleCloseAddModal}>\n          <PopColumn\n            modalTitle={'Add column'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseAddModal}\n            operation={addColumn}\n          />\n        </Modal>\n      )}\n      {isModalEditOpen && (\n        <Modal isOpen={isModalEditOpen} onClose={handleCloseEditModal}>\n          <PopColumn\n            modalTitle={'Edit column'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseEditModal}\n            idColumn={activeColumnId}\n            infoData={{ title: titleColumnId }}\n            operation={editColumn}\n          />\n        </Modal>\n      )}\n      {isModalAddCardOpen && (\n        <Modal isOpen={isModalAddCardOpen} onClose={handleCloseAddCardModal}>\n          <AddCard\n            modalTitle={'Add card'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseAddCardModal}\n            idColumn={activeColumnId}\n            operation={addTasks}\n          />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAllBoards, getBoardById } from 'redux/board/boardOperations';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\nimport { useParams } from 'react-router-dom';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  const { boardName } = useParams();\n\n  useEffect(() => {\n    dispatch(getAllBoards());\n    dispatch(getBoardById(boardName));\n  }, [boardName, dispatch]);\n\n  return (\n    <section>\n      <MainDashboard />\n    </section>\n  );\n};\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <ScreensPage />\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["RadioBtns","_ref","parentComponent","_useState","useState","_useState2","_slicedToArray","selectedPriority","setSelectedPriority","console","log","priorityStyles","low","indigo","medium","pink","high","lightGreen","without","grey","capitalizeFirstLetter","priority","charAt","toUpperCase","slice","_jsxs","children","_jsx","className","scss","concat","Object","keys","map","FormControlLabel","label","labelPlacement","control","Radio","_objectSpread","item","value","onChange","e","target","checked","name","inputProps","sx","color","fontSize","backgroundColor","borderRadius","FiltersModal","user","useAuth","theme","onClick","Filters","isModalOpen","setIsModalOpen","boardById","useBoards","handleCloseModal","styles","style","padding","background","title","width","height","href","SvgSprite","Modal","isOpen","onClose","BtnAddColumn","clsx","PopColumn","modalTitle","modalBtnTitle","operation","idColumn","infoData","boardId","useParams","dispatch","useDispatch","valueInput","setvalueInput","onSubmit","preventDefault","dataSubmit","board","boardName","autoComplete","type","placeholder","autoFocus","required","event","_event$target","prev","_defineProperty","BtnAddCard","AddCard","id","cardTitle","description","deadline","titleValue","setTitleValue","_useState3","_useState4","descriptionValue","setDescriptionValue","_useState5","_useState6","_useState7","_useState8","inputWidth","setInputWidth","_useState9","_useState10","isCalendarOpen","setIsCalendarOpen","_useState11","dayjs","_useState12","selectedDate","setSelectedDate","dateFormat","format","useEffect","contentWidth","length","cardData","elements","trim","deadLine","taskOwner","idTask","reset","currentTarget","document","body","overflow","defaultValue","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","open","date","disablePast","outsideCurrentMonth","dayOfWeekFormatter","day","slots","openPickerButton","slotProps","popper","placement","border","borderColor","hight","textAlign","borderBottom","margin","marginTop","marginBottom","fontFamily","fontweight","lineHeight","calendarHeader","position","fontWeight","letterSpacing","display","top","left","right","previousIconButton","stroke","nextIconButton","textField","fullWidth","variant","size","minWidth","InputProps","disableUnderline","endAdornment","InputAdornment","cursor","edge","getBgColor","isOverflowVisible","setOverflowVisible","deadlineIsToday","borderLeftColor","updateTasks","deleteTasks","TitleCards","onEdit","onTrash","MainDashboard","columns","isModalAddOpen","setIsModalAddOpen","isModalEditOpen","setIsModalEditOpen","isModalAddCardOpen","setIsModalAddCardOpen","activeColumnId","setActiveColumnId","titleColumnId","setTitleColumnId","handleCloseAddModal","handleCloseEditModal","handleCloseAddCardModal","clickOnColumnItemHandle","columnId","_id","tasks","clickOnColumnTitleHandle","deleteColumn","_ref2","titleCard","idCard","Card","addColumn","editColumn","addTasks","getAllBoards","getBoardById","_Fragment","ScreensPage"],"sourceRoot":""}