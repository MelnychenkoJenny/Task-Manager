{"version":3,"file":"static/js/822.73e03b32.chunk.js","mappings":"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","sources":["components/ScreensPage/testAddBoard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["import styles from 'styles/index.module.scss';\nimport scss from '../../styles/index.module.scss';\nimport sprite from '../../images/sprite.svg';\n\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  addBoards,\n  deleteBoards,\n  getBoardById,\n  updateBoard,\n} from 'redux/board/boardOperations';\nimport { useBoards } from 'hooks';\nimport { useEffect, useState } from 'react';\n// import { object, string } from 'yup';\nimport { useAuth } from 'hooks';\nimport { updateTheme } from 'redux/auth/authOperations';\n\n// const initialValues = {\n//   title: '',\n//   icon: '',\n//   background: '',\n// };\n\n// const boardSchema = object({\n//   title: string().required('Name is required'),\n//   icon: string(),\n//   background: string(),\n// });\n\nconst AddBoard = () => {\n  const [themeActive, setThemeActive] = useState(false);\n\n  const { allBoards, boardById } = useBoards();\n  const { user } = useAuth();\n\n  const dispatch = useDispatch();\n  const [valueInputUpdate, setvalueInputUpdate] = useState({\n    title: '',\n    icon: '',\n    background: '',\n  });\n  const [avatarURL, setAvatarURL] = useState('');\n  const [currentImage, setCurrentImage] = useState(user.avatarURL);\n\n  useEffect(() => {\n    setvalueInputUpdate({\n      title: boardById.title,\n      icon: boardById.icon,\n      background: boardById.background,\n    });\n  }, [boardById]);\n\n  // const handleSubmit = async (e) => {\n  // console.log(e)\n  // const dataBoard = { ...values };\n  // console.log(1, dataBoard);\n  // if (boards) {\n  //   const res = await dispatch(addBoards(dataBoard));\n  //   if (res.error) {\n  //     console.log(res.payload);\n  //   }\n  //   return res;\n  // }\n  // resetForm();\n  // console.log(3);\n  // };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    dispatch(addBoards(dataBoard));\n    form.reset();\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInputUpdate(prevBoard => ({\n      ...prevBoard,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmitUpdate = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      _id: boardById._id,\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    console.log(dataBoard);\n    dispatch(updateBoard(dataBoard));\n    form.reset();\n  };\n\n  function handleFileChange(event) {\n    const file = event;\n    if (!file) {\n      return;\n    }\n    setAvatarURL(file);\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      setCurrentImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  const handleClick = () => {\n    setThemeActive(!themeActive);\n  };\n\n  const handleClickTheme = theme => {\n    if (theme === 'light' || theme === 'dark' || theme === 'violet') {\n      if(theme === user.theme && !theme) {\n        return\n      }\n      dispatch(updateTheme(theme));\n    }\n  };\n\n  return (\n    <div>\n      <div className={scss.dropdownThemeWrap}>\n        <div className={scss.themeHeaderWrap}>\n          <p className={scss.themeText}>Theme</p>\n          <button\n            type=\"button\"\n            className={scss.btnThemeOpen}\n            onClick={handleClick}\n          >\n            <svg className={scss.svgTheme} width=\"16\" height=\"16\">\n              <use href={`${sprite}#icon-chevron-down`}></use>\n            </svg>\n          </button>\n        </div>\n        {themeActive && (\n          <div\n            className={scss.dropdownThemeMenu}\n            style={{ position: 'relative' }}\n          >\n            <ul className={scss.dropdownThemeList}>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('light');\n                }}\n              >\n                Light\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('dark');\n                }}\n              >\n                Dark\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('violet');\n                }}\n              >\n                Violet\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n\n      <div>{boardById && <p>Title active board:{boardById.title}</p>}</div>\n      <input\n        type=\"file\"\n        name=\"avatarURL\"\n        onChange={event => {\n          handleFileChange(event.currentTarget.files[0]);\n        }}\n        accept=\"image/*,.png,.jpg,.gif,.web\"\n      ></input>\n      <img\n        alt=\"user avatar\"\n        src={currentImage || avatarURL}\n        srcSet={currentImage || `${avatarURL} 1x, ${avatarURL} 2x`}\n      />\n\n      {allBoards?.length !== 0 && (\n        <ul style={{ display: 'flex', gap: '20px' }}>\n          {allBoards?.map(({ title, _id, icon, background }) => {\n            return (\n              <li\n                key={_id}\n                style={{ padding: '5px', border: 'grey solid 2px' }}\n                onClick={() => dispatch(getBoardById(_id))}\n              >\n                <p>Title: {title}</p>\n                <p>{icon}</p>\n                <p>{background}</p>\n                <button onClick={() => dispatch(deleteBoards(_id))}>\n                  DELETE\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      <form onSubmit={handleSubmitUpdate} className={styles.AfWelcomRegForm}>\n        <h2 style={{ color: 'white' }}>Update board</h2>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder={'Title'}\n          value={valueInputUpdate.title || ''}\n          onChange={handleChange}\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n          value={valueInputUpdate.icon || ''}\n          onChange={handleChange}\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n          value={valueInputUpdate.background || ''}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Update board\n        </button>\n      </form>\n\n      <form onSubmit={handleSubmit} className={styles.AfWelcomRegForm}>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Add new board\n        </button>\n      </form>\n\n      {/* <Formik\n        validationSchema={boardSchema}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n      >\n        {({ handleChange, values }) => (\n          <Form className={styles.AfWelcomRegForm}>\n            <div className={styles.AfWelcomRegFormInCn}>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  autoFocus\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  onChange={handleChange('title')}\n                  value={values.title || ''}\n                  required\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"icon\"\n                  placeholder=\"Icon\"\n                  onChange={handleChange('icon')}\n                  value={values.icon || ''}\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"background\"\n                  placeholder=\"background\"\n                  onChange={handleChange('background')}\n                  value={values.background || ''}\n                />\n              </div>\n            </div>\n            <ErrorMessage\n              className={styles.AfWelcomRegFormError}\n              name=\"password\"\n              component=\"div\"\n            />\n            <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n              Add new board\n            </button>\n          </Form>\n        )}\n      </Formik> */}\n    </div>\n  );\n};\nexport default AddBoard;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector} from 'react-redux';\nimport styles from 'styles/index.module.scss';\nimport { getAllBoards } from 'redux/board/boardOperations';\n// import { MainDashboard } from 'components/MainDashboard/MainDashboard';\n// import EditProfile from 'components/EditProfile/EditProfile';\n// import { useAuth } from 'hooks';\nimport AddBoard from './testAddBoard';\n\n// import { AddCard } from 'components/AddCard';\n// import { Card } from 'components/Card';\n// import NewBoard from 'components/ModalBoard/NewBoard';\n// import { PopColumn } from 'components/PopColumn';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  // const { user } = useAuth();\n  // console.log(user)\n  const statE = useSelector(state=>state)\n  console.log(statE)\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n\n  return (\n    <section className={styles.YMScreenReg}>\n      <div\n        className={styles.AfWelcomRegWr}\n      >\n        {/* <MainDashboard /> */}\n        {/* <EditProfile/> */}\n        <AddBoard />\n        {/* <AddCard /> */}\n        {/* <Card /> */}\n        {/* <NewBoard /> */}\n        {/* <PopColumn /> */}\n      </div>\n    </section>\n  );\n};\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>\n        <ScreensPage />\n      </div>\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["_useState","useState","_useState2","_slicedToArray","themeActive","setThemeActive","_useBoards","useBoards","allBoards","boardById","user","useAuth","dispatch","useDispatch","_useState3","title","icon","background","_useState4","valueInputUpdate","setvalueInputUpdate","_useState5","_useState6","avatarURL","setAvatarURL","_useState7","_useState8","currentImage","setCurrentImage","useEffect","handleChange","event","_event$target","target","name","value","prevBoard","_objectSpread","_defineProperty","handleClickTheme","theme","updateTheme","_jsxs","children","className","scss","_jsx","type","onClick","width","height","href","concat","sprite","style","position","onChange","file","reader","FileReader","onload","e","result","readAsDataURL","handleFileChange","currentTarget","files","accept","alt","src","srcSet","length","display","gap","map","_ref","_id","padding","border","getBoardById","deleteBoards","onSubmit","preventDefault","form","_event$target$element2","elements","dataBoard","console","log","updateBoard","reset","styles","color","autoFocus","placeholder","required","_event$target$element","addBoards","statE","useSelector","state","getAllBoards","AddBoard","_Fragment","ScreensPage"],"sourceRoot":""}