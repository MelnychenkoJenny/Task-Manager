{"version":3,"file":"static/js/888.e24db5b4.chunk.js","mappings":"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","sources":["components/MainDashboard/Filters.jsx","../node_modules/clsx/dist/clsx.mjs","components/MainDashboard/BtnAddColumn.jsx","components/PopColumn/PopColumn.jsx","components/MainDashboard/MainDashboard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useBoards } from 'hooks';\n\nexport const Filters = ({ className }) => {\n \nconst {  boardById } = useBoards();\n// console.log(boardById)\n  const onFilters = () => {\n    console.log('Filters ckick');\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2 className={styles.KkTitle}>{boardById.title}</h2>\n\n        <button className={styles.KkBtnFilters} onClick={onFilters}>\n          <svg width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n\n          <p>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddColumn = ({ className, title, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnColumn, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst PopColumn = ({\n  modalTitle,\n  modalBtnTitle,\n  onClose,\n  operation,\n  idColumn,\n  infoData,\n}) => {\n  const boardId = useParams();\n  const dispatch = useDispatch();\n  const [valueInput, setvalueInput] = useState(\n    infoData ? { title: infoData.title } : { title: '' }\n  );\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInput(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  console.log('idColumn :>> ', idColumn);\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const dataSubmit = idColumn\n      ? {\n          title: valueInput.title,\n          idColumn: idColumn,\n        }\n      : {\n          title: valueInput.title,\n          board: boardId.boardName,\n        };\n    dispatch(operation(dataSubmit));\n\n    onClose();\n  };\n\n  return (\n    <div className={scss.AAColumnContainer}>\n      <h4 className={scss.AAColumnTitle}>{modalTitle}</h4>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.AAColumnInput}\n            value={valueInput.title || ''}\n            onChange={handleChange}\n          />\n        </label>\n        <button type=\"submit\" className={scss.AAColumnBtn}>\n          <div className={scss.AAColumnSvgContainer}>\n            <svg className={scss.AAColumnSvg}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default PopColumn;\n","import { Filters } from './Filters';\nimport styles from 'styles/index.module.scss';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { Modal } from '../Modal/Modal';\nimport {  useState } from 'react';\nimport { PopColumn } from 'components/PopColumn';\nimport { addColumn, deleteColumn, editColumn } from 'redux/board/boardOperations';\nimport {  useDispatch, /*useSelector*/ } from 'react-redux';\nimport { useBoards } from 'hooks';\n// import { useParams } from 'react-router-dom';\nimport SvgSprite from 'images/sprite.svg';\n\nexport const MainDashboard = () => {\n  const { columns } = useBoards();\n\n  // const st = useSelector(state => state);\n  // console.log('state :>> ', st);\n\n  const [isModalAddOpen, setIsModalAddOpen] = useState(false);\n  const [isModalEditOpen, setIsModalEditOpen] = useState(false);\n  const [activeColumnId, setActiveColumnId] = useState('');\n  const [titleColumnId, setTitleColumnId] = useState('');\n\n  const dispatch = useDispatch();\n  // const  boardId = useParams();\n\n  const handleOpenAddModal = () => {\n    setIsModalAddOpen(true);\n  };\n  const handleCloseAddModal = () => {\n    setIsModalAddOpen(false);\n  };\n\n  const handleOpenEditModal = () => {\n    setIsModalEditOpen(true);\n  };\n  const handleCloseEditModal = () => {\n    setIsModalEditOpen(false);\n  };\n\n  const clickOnColumnItemHandle = columnId => {\n    setActiveColumnId(columnId);\n  };\n\n  const clickOnColumnTitleHandle = title => {\n    setTitleColumnId(title);\n  };\n\n  return (\n    <>\n      <Filters className={styles.KkFilters} />\n      {/* <button onClick={click}>click</button> */}\n\n      <ul className={styles.KkColums}>\n        {columns &&\n          columns.map(({ _id, title }) => (\n            <li key={_id}>\n              {/* <TaskColumn\n                   className={styles.KkTaskColumn}\n                   titleCards={title}\n                   idColumn={_id}\n                 /> */}\n              <p>title Column: {title}</p>\n              <p>id Column: {_id}</p>\n              <div className={styles.boardsListItemButtons}>\n                <button\n                  type=\"button\"\n                  className={styles.boardsListItemButton}\n                  onClick={() => {\n                    handleOpenEditModal();\n                    clickOnColumnItemHandle(_id);\n                    clickOnColumnTitleHandle(title);\n                  }}\n                >\n                  <svg\n                    className={styles.boardsListItemSvg}\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <use href={`${SvgSprite}#icon-pencil`}></use>\n                  </svg>\n                </button>\n                <button\n                  type=\"button\"\n                  className={styles.boardsListItemButton}\n                  onClick={() => dispatch(deleteColumn(_id))}\n                >\n                  <svg\n                    className={styles.boardsListItemSvg}\n                    width=\"16px\"\n                    height=\"16px\"\n                  >\n                    <use href={`${SvgSprite}#icon-trash`}></use>\n                  </svg>\n                </button>\n              </div>\n            </li>\n          ))}\n        <BtnAddColumn\n          className={styles.KkBtnAddColumnMain}\n          title={'Add another column'}\n          theme={'light'}\n          onClick={handleOpenAddModal}\n        />\n      </ul>\n      {isModalAddOpen && (\n        <Modal isOpen={isModalAddOpen} onClose={handleCloseAddModal}>\n          <PopColumn\n            modalTitle={'Add column'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseAddModal}\n            operation={addColumn}\n          />\n        </Modal>\n      )}\n      {isModalEditOpen && (\n        <Modal isOpen={isModalEditOpen} onClose={handleCloseEditModal}>\n          <PopColumn\n            modalTitle={'Edit column'}\n            modalBtnTitle={'Add'}\n            onClose={handleCloseEditModal}\n            idColumn={activeColumnId}\n            infoData={{title: titleColumnId}}\n            operation={editColumn}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\n// // 💙💛 Kostiantyn Koshyk\n// import styles from 'styles/index.module.scss';\n// import { BtnAddColumn } from './BtnAddColumn';\n// import { Filters } from './Filters';\n// import { TaskColumn } from './TaskColumn';\n// // import { useEffect } from 'react';\n// // import { useBoards } from 'hooks';\n// import {\n//   useDispatch,\n//   // , useSelector\n// } from 'react-redux';\n// import {\n//   addBoards,\n//   // deleteBoards,\n//   // getAllBoards,\n//   // getBoardById,\n//   // updateBoard,\n// } from 'redux/board/boardOperations';\n// // import {\n//   // addColumn,\n//   // deleteColumn,\n//   // getColumnById,\n//   // getColumns,\n//   // updateColumn,\n// // } from 'redux/column/columnOperations';\n// // import { useColumns } from 'hooks/useColumns';\n// import {\n//   // addTask,\n//   // deleteTask,\n//   // getTasks,\n//   // updateTask,\n// } from 'redux/task/taskOperations';\n// // import { colors } from '@mui/material';\n\n// export const MainDashboard = () => {\n//   // const idBoard = '64f494c005baf51a1e771ede';\n//   // const {\n//   //   // allBoards,\n//   //   boardById,\n//   // } = useBoards();\n//   // const {\n//   //   allColumns,\n//   //   // , columnById, allTasks\n//   // } = useColumns();\n//   // const dispatch = useDispatch();\n\n//   // useEffect(() => {\n//   //   dispatch(getBoardById(idBoard));\n//   //   dispatch(getColumns(idBoard));\n//   //   dispatch(getAllBoards());\n//   //   dispatch(getTasks('64f3b37f79cb8e4510358ae7'));\n//   // }, [dispatch]);\n\n//   // const click = () => {\n//     // ======================================================== Board\n//     // 1. Создать Board\n//     // dispatch(\n//     //   addBoards({\n//     //     title: 'New Board',\n//     //     icon: 'icon-project',\n//     //     background: 'background2',\n//     //   })\n//     // );\n//     // // 2. Удалить Board\n//     // dispatch(deleteBoards('64f39de379cb8e4510358425'));\n//     // 3 Обновить Board\n//     // dispatch(\n//     //   updateBoard({\n//     //     _id: '64f39d8079cb8e45103583f2',\n//     //     title: 'Board update',\n//     //     icon: 'icon-colors',\n//     //     background: 'background1',\n//     //   })\n//     // );\n//     // 4 Получить все Boards\n//     // dispatch(getAllBoards());\n//     // 5 Получить все Boards\n//     // dispatch(getBoardById('64f39de379cb8e4510358425'));\n//     // ============================================================= Column\n//     // 1. Создать Column\n//     // dispatch(\n//     //   addColumn({\n//     //     title: 'New Column',\n//     //     board: '64f3ccb879cb8e4510359091',\n//     //   })\n//     // );\n//     // 2. Удалить Column (передать id колонки)\n//     // dispatch(deleteColumn('64f3cd3c79cb8e45103590af'));\n//     // 3 Обновить Column\n//     // dispatch(\n//     //   updateColumn({ id: '64f3a60f79cb8e45103586b0', title: 'New Column 1' })\n//     // );\n//     // 4 Получить все Column\n//     // dispatch(getColumns());\n//     // 5 Получить колонку по id\n//     // dispatch(getColumnById('64f3a60f79cb8e45103586b0'));\n//     // =============================================================== Tasks\n//     // 1. Создать Task\n//     // dispatch(\n//     //   addTask({\n//     //     title: 'New Task 1',\n//     //     taskOwner: '64f3b37f79cb8e4510358ae7',\n//     //     description: 'task description',\n//     //   })\n//     // );\n//     // 2. Удалить Task (передать id колонки)\n//     // dispatch(deleteTask('64f3a6ba79cb8e451035877c'));\n//     // 3 Обновить Task\n//     // dispatch(\n//     //   updateTask({\n//     //     taskId: '64f237418ad71f5d5364dc4f',\n//     //     title: 'Linda',\n//     //     description: '',\n//     //     priority: '',\n//     //     deadLine: '',\n//     //   })\n//     // );\n//     // 4 Получить все Tsks\n//     // dispatch(getTasks('64f3b37f79cb8e4510358ae7'));\n//   // };\n\n//   // console.log('allBoards :>>>>>>>>>>>>>>>>>> ', allBoards);\n//   // console.log('allColumns :>>>>>>>>>>>>>>>>> ', allColumns);\n//   // console.log('allTasks :>>>>>>>>>>>>>>>>> ', allTasks);\n\n//   // if (!boardById) return;\n\n//   // const { title } = boardById;\n\n//   // const onAddColumn = () => {\n//   //   console.log('Add Column click');\n//   // };\n\n//   return (\n//     <>\n//       <Filters className={styles.KkFilters} />\n//       {/* <button onClick={click}>click</button> */}\n\n//       <ul className={styles.KkColums}>\n//         {/* {allColumns.map(({ _id, title }) => (\n//           <li key={_id}>\n//             <TaskColumn\n//               className={styles.KkTaskColumn}\n//               titleCards={title}\n//               idColumn={_id}\n//             />\n//             <p>id Column: {_id}</p>\n//           </li>\n//         ))} */}\n//         <BtnAddColumn\n//           className={styles.KkBtnAddColumnMain}\n//           title={'Add column'}\n//           theme={'light'}\n//           // onClick={onAddColumn}\n//         />\n//       </ul>\n//     </>\n//   );\n//         }\n","import { useEffect } from 'react';\nimport {\n  useDispatch,\n  // useSelector\n} from 'react-redux';\nimport { getAllBoards, getBoardById } from 'redux/board/boardOperations';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\nimport { useParams } from 'react-router-dom';\n// import EditProfile from 'components/EditProfile/EditProfile';\n// import { useAuth } from 'hooks'; // s\n// import AddBoard from './testAddBoard';\n// import { AddCard } from 'components/AddCard';\n// import { Card } from 'components/Card';\n// import NewBoard from 'components/ModalBoard/NewBoard';\n// import { PopColumn } from 'components/PopColumn';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  const {boardName} = useParams()\n  // console.log('idBoard :>> ', boardName);\n  //   const { user } = useAuth();\n  //   console.log(user)\n  useEffect(() => {\n    dispatch(getAllBoards());\n    dispatch(getBoardById(boardName));\n  }, [boardName, dispatch]);\n\n  return (\n    <section>\n      <MainDashboard />\n      {/* <EditProfile/> */}\n      {/* <AddBoard /> */}\n      {/* <AddCard /> */}\n      {/* <Card /> */}\n      {/* <NewBoard /> */}\n      {/* <PopColumn /> */}\n    </section>\n  );\n};\n//   return (\n//     <section className={styles.YMScreenReg}>\n//       <div className={styles.AfWelcomRegWr}>\n//         <MainDashboard />\n//         {/* <EditProfile/> */}\n//         <AddBoard />\n//         {/* <AddCard /> */}\n//         {/* <Card /> */}\n//         {/* <NewBoard /> */}\n//         {/* <PopColumn /> */}\n//       </div>\n//     </section>\n//   );\n// };\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <ScreensPage />\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["Filters","_ref","className","boardById","useBoards","_jsx","children","_jsxs","styles","title","onClick","console","log","width","height","href","concat","SvgSprite","r","e","t","f","n","Array","isArray","length","arguments","BtnAddColumn","theme","clsx","modalTitle","modalBtnTitle","onClose","operation","idColumn","infoData","boardId","useParams","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","valueInput","setvalueInput","scss","onSubmit","preventDefault","dataSubmit","board","boardName","autoComplete","type","name","placeholder","autoFocus","required","value","onChange","event","_event$target","target","prev","_objectSpread","_defineProperty","MainDashboard","columns","isModalAddOpen","setIsModalAddOpen","_useState3","_useState4","isModalEditOpen","setIsModalEditOpen","_useState5","_useState6","activeColumnId","setActiveColumnId","_useState7","_useState8","titleColumnId","setTitleColumnId","handleCloseAddModal","handleCloseEditModal","_Fragment","map","_id","clickOnColumnTitleHandle","deleteColumn","Modal","isOpen","PopColumn","addColumn","editColumn","useEffect","getAllBoards","getBoardById","ScreensPage"],"sourceRoot":""}