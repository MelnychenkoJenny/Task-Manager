{"version":3,"file":"static/js/908.2ec4a967.chunk.js","mappings":"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","sources":["components/ScreensPage/testAddBoard.jsx","components/MainDashboard/BtnAddColumn.jsx","components/MainDashboard/Filters.jsx","components/AddCard/AddCard.jsx","components/Card/Card.jsx","components/MainDashboard/BtnAddCard.jsx","components/MainDashboard/TitleCards.jsx","redux/column/columnSelectors.js","redux/task/taskSelectors.js","hooks/useColumns.js","components/MainDashboard/TaskColumn.jsx","components/MainDashboard/MainDashboard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["import styles from 'styles/index.module.scss';\nimport scss from '../../styles/index.module.scss';\nimport sprite from '../../images/sprite.svg';\n\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  addBoards,\n  deleteBoards,\n  getBoardById,\n  updateBoard,\n} from 'redux/board/boardOperations';\nimport { useBoards } from 'hooks';\nimport { useEffect, useState } from 'react';\n// import { object, string } from 'yup';\nimport { useAuth } from 'hooks';\nimport { updateTheme } from 'redux/auth/authOperations';\n\n// const initialValues = {\n//   title: '',\n//   icon: '',\n//   background: '',\n// };\n\n// const boardSchema = object({\n//   title: string().required('Name is required'),\n//   icon: string(),\n//   background: string(),\n// });\n\nconst AddBoard = () => {\n  const [themeActive, setThemeActive] = useState(false);\n\n  const { allBoards, boardById } = useBoards();\n  const { user } = useAuth();\n\n  const dispatch = useDispatch();\n  const [valueInputUpdate, setvalueInputUpdate] = useState({\n    title: '',\n    icon: '',\n    background: '',\n  });\n  const [avatarURL, setAvatarURL] = useState('');\n  const [currentImage, setCurrentImage] = useState(user.avatarURL);\n\n  useEffect(() => {\n    setvalueInputUpdate({\n      title: boardById.title,\n      icon: boardById.icon,\n      background: boardById.background,\n    });\n  }, [boardById]);\n\n  // const handleSubmit = async (e) => {\n  // console.log(e)\n  // const dataBoard = { ...values };\n  // console.log(1, dataBoard);\n  // if (boards) {\n  //   const res = await dispatch(addBoards(dataBoard));\n  //   if (res.error) {\n  //     console.log(res.payload);\n  //   }\n  //   return res;\n  // }\n  // resetForm();\n  // console.log(3);\n  // };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    dispatch(addBoards(dataBoard));\n    form.reset();\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInputUpdate(prevBoard => ({\n      ...prevBoard,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmitUpdate = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      _id: boardById._id,\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    console.log(dataBoard);\n    dispatch(updateBoard(dataBoard));\n    form.reset();\n  };\n\n  function handleFileChange(event) {\n    const file = event;\n    if (!file) {\n      return;\n    }\n    setAvatarURL(file);\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      setCurrentImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  const handleClick = () => {\n    setThemeActive(!themeActive);\n  };\n\n  const handleClickTheme = theme => {\n    if (theme === 'light' || theme === 'dark' || theme === 'violet') {\n      if(theme === user.theme && !theme) {\n        return\n      }\n      dispatch(updateTheme(theme));\n    }\n  };\n\n  return (\n    <div>\n      <div className={scss.dropdownThemeWrap}>\n        <div className={scss.themeHeaderWrap}>\n          <p className={scss.themeText}>Theme</p>\n          <button\n            type=\"button\"\n            className={scss.btnThemeOpen}\n            onClick={handleClick}\n          >\n            <svg className={scss.svgTheme} width=\"16\" height=\"16\">\n              <use href={`${sprite}#icon-chevron-down`}></use>\n            </svg>\n          </button>\n        </div>\n        {themeActive && (\n          <div\n            className={scss.dropdownThemeMenu}\n            style={{ position: 'relative' }}\n          >\n            <ul className={scss.dropdownThemeList}>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('light');\n                }}\n              >\n                Light\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('dark');\n                }}\n              >\n                Dark\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('violet');\n                }}\n              >\n                Violet\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n\n      <div>{boardById && <p>Title active board:{boardById.title}</p>}</div>\n      <input\n        type=\"file\"\n        name=\"avatarURL\"\n        onChange={event => {\n          handleFileChange(event.currentTarget.files[0]);\n        }}\n        accept=\"image/*,.png,.jpg,.gif,.web\"\n      ></input>\n      <img\n        alt=\"user avatar\"\n        src={currentImage || avatarURL}\n        srcSet={currentImage || `${avatarURL} 1x, ${avatarURL} 2x`}\n      />\n\n      {allBoards?.length !== 0 && (\n        <ul style={{ display: 'flex', gap: '20px' }}>\n          {allBoards?.map(({ title, _id, icon, background }) => {\n            return (\n              <li\n                key={_id}\n                style={{ padding: '5px', border: 'grey solid 2px' }}\n                onClick={() => dispatch(getBoardById(_id))}\n              >\n                <p>Title: {title}</p>\n                <p>{icon}</p>\n                <p>{background}</p>\n                <button onClick={() => dispatch(deleteBoards(_id))}>\n                  DELETE\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      <form onSubmit={handleSubmitUpdate} className={styles.AfWelcomRegForm}>\n        <h2 style={{ color: 'white' }}>Update board</h2>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder={'Title'}\n          value={valueInputUpdate.title || ''}\n          onChange={handleChange}\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n          value={valueInputUpdate.icon || ''}\n          onChange={handleChange}\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n          value={valueInputUpdate.background || ''}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Update board\n        </button>\n      </form>\n\n      <form onSubmit={handleSubmit} className={styles.AfWelcomRegForm}>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Add new board\n        </button>\n      </form>\n\n      {/* <Formik\n        validationSchema={boardSchema}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n      >\n        {({ handleChange, values }) => (\n          <Form className={styles.AfWelcomRegForm}>\n            <div className={styles.AfWelcomRegFormInCn}>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  autoFocus\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  onChange={handleChange('title')}\n                  value={values.title || ''}\n                  required\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"icon\"\n                  placeholder=\"Icon\"\n                  onChange={handleChange('icon')}\n                  value={values.icon || ''}\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"background\"\n                  placeholder=\"background\"\n                  onChange={handleChange('background')}\n                  value={values.background || ''}\n                />\n              </div>\n            </div>\n            <ErrorMessage\n              className={styles.AfWelcomRegFormError}\n              name=\"password\"\n              component=\"div\"\n            />\n            <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n              Add new board\n            </button>\n          </Form>\n        )}\n      </Formik> */}\n    </div>\n  );\n};\nexport default AddBoard;\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddColumn = ({ className, title, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnColumn, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nexport const Filters = ({ className, titleBoard }) => {\n  const onFilters = () => {\n    console.log('Filters ckick');\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2 className={styles.KkTitle}>{titleBoard}</h2>\n\n        <button className={styles.KkBtnFilters} onClick={onFilters}>\n          <svg width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n\n          <p>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n// import { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useAuth } from 'hooks';\n\nimport { nanoid } from 'nanoid';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { Radio, InputAdornment } from '@mui/material';\n\nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n\n\nexport const AddCard = ({ modalTitle, id, cardTitle, description, priority, deadline, modalBtnTitle }) => {\n  // const dispatch = useDispatch();\n  const { user } = useAuth();\n  // import {\n  //   addBoards,\n  //   deleteBoards,\n  //   getBoardById,\n  //   updateBoard,\n  // } from 'redux/board/boardOperations';\n\n\n  const [titleValue, setTitleValue] = useState(cardTitle); // для редагування\n  const [descriptionValue, setDescriptionValue] = useState(description); // для редагування\n  const [selectedPriority, setSelectedPriority] = useState(priority ? priority : 'without');\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(deadline ? dayjs(deadline, 'DD/MM/YYYY') : dayjs()); // dayjs() - currentDate\n  //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  // deadline ? dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\") : dayjs()\n\n  // console.log(deadline) //01/09/2023\n  // console.log(dayjs(deadline)) // M {... Mon Jan 09 2023 00:00:00 ...} - міняє день і місяць місцями\n  // console.log(dayjs(deadline, 'DD/MM/YYYY')); // M {... Fri Sep 01 2023 00:00:00 ...} - тепер все Ок\n  // Тепер бібліотека Material UA застосує формат \"dddd, MMMM D\" і отримаємо те, що треба:\n  // console.log(dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\")); // Thursday, August 31\n  \n\n  // \"Today, September 01\" або \"Saturday, September 02\"\n  const dateFormat = dayjs(selectedDate).format(\"dddd, MMMM D\") === dayjs().format(\"dddd, MMMM D\") ? '[Today,] MMMM D' : \"dddd, MMMM D\";\n\n\n  const handleFormSubmit = event => { // відправка даних\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    const inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n    const inputDeadline = dayjs(selectedDate).format('DD/MM/YYYY'); //   29/11/2023\n\n    const cardData = {\n      'id': id ? id : nanoid(), // якщо id є, то його передамо для редагування - пут-запиту  \n      'title': inputTitle, \n      'description': inputDescription, \n      'priority': inputPriority,\n      'deadline': inputDeadline,\n    }\n\n    console.log(cardData);\n\n    // dispatch(addBoards(cardData));  // відправка на бекенд, а потім в стор редакса\n\n    event.target.reset();\n  };\n\n  // --------------- пріоритетність ----------------------\n  \n  const controlProps = (item) => ({ // low, medium, high, without\n      value: item,\n      onChange: (e) => setSelectedPriority(e.target.value),\n      checked: selectedPriority === item,\n      name: 'priority',\n      inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n      low: indigo[200],\n      medium: pink[200],\n      high: lightGreen[200],\n      without: grey[400],\n  };\n\n  \n\n  return (\n    <div className={scss.OBAddContainer} data-theme={user.theme}>\n      <h4 className={scss.OBAddTitle}>{modalTitle}</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n            defaultValue={titleValue} // для редагування\n            onChange={(e) => setTitleValue(e.target.value)}  // для редагування\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n            defaultValue={descriptionValue} // для редагування\n            onChange={(e) => setDescriptionValue(e.target.value)}  // для редагування\n          />\n        </label>\n\n        <div className={scss.OBAddlabel}> \n            Label color \n          <div className={scss.OBAddRadioGroup}>  \n            {Object.keys(priorityStyles).map((priority) => ( //['low', 'medium', 'high', 'without']\n              <Radio className={scss.OBAddradioBtn}\n                key={priority}\n                {...controlProps(priority)}\n                sx={{\n                  color: priorityStyles[priority],\n                  '&.Mui-checked': {\n                    color: priorityStyles[priority],\n                  },\n                  '&.Mui-checked .MuiSvgIcon-root': {\n                    fontSize: '17px',\n                  },\n                  '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                    fontSize: '14px',\n                    backgroundColor: priorityStyles[priority],\n                    borderRadius: '50%',\n                  },\n                }}\n              />\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <LocalizationProvider dateAdapter={AdapterDayjs}> \n          {/* dateAdapter={AdapterDayjs} - вказуємо, що під капотом використовуємо бібліотеку Day.js (її методи) */}\n            <DatePicker\n              open={isCalendarOpen}\n              onClose={() => setIsCalendarOpen(false)} // закриття календаря\n              onChange={(date) => setSelectedDate(date)}   //Material UA в date записує обрану з календаря дату \n              // M {$L: 'en', $u: undefined, $d: Fri Sep 01 2023 09:13:29 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n              value={selectedDate}\n              format= {dateFormat} // приймає рядок\n              disablePast={true}   // минулі дати не обируться\n              outsideCurrentMonth={true} // початок наступного місяця невидимий\n              dayOfWeekFormatter={(day) => day.slice(0, 2).toUpperCase()} // видимі перші 2 літери назви дня тижня\n              sx={{\n                // backgroundColor: 'red',\n                display: 'inline', // прибирає нижній паддінг інпута \n              }}\n              slots={{\n                openPickerButton: () => null, // приховуємо дефолтну кнопку-іконку календаря\n              }}\n              slotProps={{\n                // popper: { '&.MuiPickersPopper-root': {border: '4px solid yellow'}, },\n                calendarHeader: {\n                  sx: {\n                    '.MuiPickersCalendarHeader-root': {\n                       position: 'relative',\n                    },\n                    '.MuiPickersCalendarHeader-labelContainer': { // це тільки місяць і рік\n                        // backgroundColor: 'green',\n                        fontFamily: 'Poppins, sans-serif',\n                        fontSize: '16px',\n                        fontWeight: 500,\n                        letterSpacing: '-0.32px',\n                        display: \"grid\", // тепер місяць і рік центровані\n                    },\n                    '.MuiPickersCalendarHeader-label': {\n                      // backgroundColor: 'brown',\n                      display: 'inline-block',\n                      marginLeft: '50%',\n                      transform: 'translateX(-50%)',\n                    },\n                    '.MuiPickersCalendarHeader-switchViewButton': {\n                        display: 'none', // прибираємо стрілку вниз поряд з місяцем і роком\n                    },\n                    // '.MuiPickersArrowSwitcher-root': { // 2 кнопки в календарі: < >\n                        // position: 'absolute',\n                        // top: '10px',\n                    //     display: 'flex',\n                    //     justifyContent: \"space-between\", // по краям\n                    // },\n                    '.MuiIconButton-edgeEnd': { // кнопка <\n                      position: 'absolute',\n                      top: '10px',\n                      left: '3px',\n                    },\n                    '.MuiIconButton-edgeStart': { // кнопка >\n                      position: 'absolute',\n                      top: '10px',\n                      right: '3px',\n                    },\n                  },\n                  style: {\n                    marginTop: '18px',\n                    marginBottom: '14px',\n                    display: 'inline',\n                    paddingLeft: '18px',\n                    paddingRight: '18px',\n                    // backgroundColor: 'red', //працює\n                  },\n                },\n\n                previousIconButton: { \n                  sx: { stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', },\n                },\n                nextIconButton: { \n                  sx: { stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', },\n                },\n\n                textField: {\n                  fullWidth: false,\n                  onClick: () => setIsCalendarOpen(true), // інпут стає клікабельним; по кліку відкривається календар (picker)\n                  variant: 'standard',\n                  size: 'small',\n                  InputProps: {\n                    disableUnderline: true,  // прибирає дефолтний нижній бордер, встановлений variant: 'standard'\n                    'aria-label': 'deadline',\n                    style: {\n                      fontSize: '14px', \n                      fontFamily: 'Poppins, sans-serif',\n                      color: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', // колір тексту\n                      fontWeight: 500,\n                      letterSpacing: '-0.28px',                \n                    },\n                    endAdornment: (   // розташування іконки - в кінці інпуту (є і startAdornment)\n                     <InputAdornment position=\"start\" sx={{ cursor: 'pointer'}}>\n                        <svg className={scss.OBAddDateIcon} width='18px'>\n                            <use \n                              href={SvgSprite + '#icon-chevron-down'} // стрілка вниз в календарі  \n                              aria-label=\"open calendar\" \n                              edge=\"start\" \n                            />       \n                        </svg>\n                     </InputAdornment>\n                    ),\n                  },\n                },              \n              }}\n            >\n            </DatePicker>            \n          </LocalizationProvider>\n        </div>\n\n        <button className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddSubmitIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// export default AddCard;","import { useState } from 'react';\n// import { useDispatch } from 'react-redux'\nimport dayjs from 'dayjs';\nimport { Modal } from '../Modal/Modal'\nimport { AddCard } from '../AddCard/AddCard';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\n\nconst getBgColor = priority => {\n  switch (priority) {\n   case 'low':\n     return '#8FA1D0';\n   case 'medium':\n     return 'rgba(224, 156, 181, 1)';\n   case 'high':\n     return '#BEDBB0';\n   case 'without':\n     return 'rgba(22, 22, 22, 0.30)';\n   default:\n    break;\n  }    \n }\n\n\nconst Card = ({ id, cardTitle, description, priority, deadline }) => {\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n   // const dispatch = useDispatch();\n   const deadlineIsToday = dayjs().format('DD/MM/YYYY') === deadline; // dayjs().format('DD/MM/YYYY') - сьогоднішня дата у визначеному форматі\n   \n   const handleOpenModal = () => {\n     setIsModalOpen(true);\n   };\n\n   const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div style={{ borderLeftColor: getBgColor(priority) }} className={scss.OBCardContainer}>\n      <h4 className={scss.OBCardTitle}>{cardTitle}</h4>\n      <p className={scss.OBCardDescription}>{description}</p>\n\n      <hr className={scss.OBCardSeparator} />\n\n      <div className={scss.OBCardFooterContainer}>\n        <table className={scss.OBCardValuesContainer}>\n          <thead>\n            <tr>\n              <th className={scss.OBCardProreties}>Priority</th>\n              <th className={scss.OBCardProreties}>Deadline</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <div style={{ backgroundColor: getBgColor(priority) }} className={scss.OBCardPriorityCircle}></div>\n              </td>\n              <td className={scss.OBCardDate}>{deadline}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        {/* --------------------------- іконки --------------------------- */}\n\n        <div className={scss.OBCardIconsWrapper}>\n          {deadlineIsToday &&\n            <svg className={scss.OBCardBellIcon} width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-bell'} />\n            </svg>            \n          }\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='edit task' onClick={handleOpenModal}>\n            <svg width=\"16\" height=\"16\"> \n              <use href={SvgSprite + '#icon-pencil'} />\n            </svg>            \n          </button>\n          {isModalOpen && (\n            <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n                <AddCard modalTitle={'Edit card'} id={id} cardTitle={cardTitle} description={description} priority={priority} deadline={deadline} modalBtnTitle={'Edit'} /> \n            </Modal>             \n          )}\n          {/* <button type='button' className={scss.OBCardBtnIcon} aria-label='move task to another column'>\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-arrow'} />\n            </svg>\n          </button > */}\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='delete task' /*onClick={() => dispatch(deleteCard(id))}*/ >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-trash'} />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddCard = ({ title, className, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnCard, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusCard, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n// import { cleanDigitSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\n\nexport const TitleCards = ({ className, title, theme }) => {\n  const onIconPensil = () => {\n    console.log('icon pensil click');\n  };\n\n  const onIconTrash = () => {\n    console.log('icon trash click');\n  };\n\n  return (\n    <div className={className}>\n      <div className={clsx(styles.KkWrapTitleCards, styles[theme])}>\n        <p className={clsx(styles[theme])}> {title}</p>\n        <div className={styles.KkSvgTitleCards}>\n          <button className={styles.KkBtnIcons} onClick={onIconPensil}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-pencil`}></use>\n            </svg>\n          </button>\n\n          <button className={styles.KkBtnIcons} onClick={onIconTrash}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-trash`}></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nexport const selectColumns = state => state.columns.allColumns;\nexport const selectColumnById = state => state.columns.columnById;\n","// 💙💛 Kostiantyn Koshyk\nexport const selectTasks = state => state.tasks.allTasks;\nexport const selectTaskById = state => state.tasks.taskById;\n","import { useSelector } from 'react-redux';\nimport { selectColumnById, selectColumns } from 'redux/column/columnSelectors';\nimport { selectTasks } from 'redux/task/taskSelectors';\n\nexport const useColumns = () => {\n  const allColumns = useSelector(selectColumns);\n  const columnById = useSelector(selectColumnById);\n  const allTasks = useSelector(selectTasks);\n\n  return {\n    allColumns,\n    columnById,\n    allTasks,\n  };\n};\n// import { useBoards } from 'hooks';\n// const { allBoards, boardById } = useBoards();\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport { Modal } from '../Modal/Modal';\nimport { Card } from 'components/Card';\nimport { AddCard } from 'components/AddCard';\nimport { BtnAddCard } from './BtnAddCard';\nimport { TitleCards } from './TitleCards';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getTasks } from 'redux/task/taskOperations';\nimport { useColumns } from 'hooks/useColumns';\n\nexport const TaskColumn = ({ className, titleCards, idColumn }) => {\n  const [themeColor] = useState('light');\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { allTasks } = useColumns();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getTasks(idColumn));\n  }, [dispatch, idColumn]);\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div className={className}>\n      <TitleCards\n        className={styles.TitleCards}\n        title={titleCards}\n        theme={themeColor}\n      />\n\n      <ul className={styles.KkCards}>\n        {allTasks &&\n          allTasks.map(({ _id, title, description, priority, deadline }) => (\n            <li key={_id}>\n              <Card\n                cardTitle={title}\n                description={description}\n                priority={priority}\n                deadline={deadline}\n              />\n              <p>id Task: {_id}</p>\n            </li>\n          ))}\n      </ul>\n\n      <BtnAddCard\n        className={styles.KkBtnAddCard}\n        title={'Add another card'}\n        onClick={handleOpenModal}\n        theme={themeColor}\n      />\n      {isModalOpen && (\n        <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n          <AddCard modalTitle={'Add card'} modalBtnTitle={'Add'} />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { Filters } from './Filters';\nimport { TaskColumn } from './TaskColumn';\nimport { useEffect } from 'react';\nimport { useBoards } from 'hooks';\nimport { useDispatch } from 'react-redux';\nimport {\n  // addBoards,\n  // deleteBoards,\n  getAllBoards,\n  getBoardById,\n  // updateBoard,\n} from 'redux/board/boardOperations';\nimport {\n  // addColumn,\n  // deleteColumn,\n  // getColumnById,\n  getColumns,\n  // updateColumn,\n} from 'redux/column/columnOperations';\nimport { useColumns } from 'hooks/useColumns';\nimport {\n  // addTask,\n  // deleteTask,\n  getTasks,\n  // updateTask,\n} from 'redux/task/taskOperations';\n\nexport const MainDashboard = () => {\n  const idBoard = '64f3a3fa79cb8e451035865d'; // этот id прилетает из сайтбара !!!!!!!!!!!!!\n  const { allBoards, boardById } = useBoards();\n  const { allColumns, allTasks } = useColumns();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getBoardById(idBoard));\n    dispatch(getColumns(idBoard));\n    dispatch(getAllBoards());\n    dispatch(getTasks('64f3b37f79cb8e4510358ae7'));\n  }, [dispatch]);\n\n  const click = () => {\n    // ======================================================== Board\n    // 1. Создать Board\n    // dispatch(\n    //   addBoards({\n    //     title: 'New Board',\n    //     icon: 'icon-project',\n    //     background: 'background2',\n    //   })\n    // );\n    // // 2. Удалить Board\n    // dispatch(deleteBoards('64f39de379cb8e4510358425'));\n    // 3 Обновить Board\n    // dispatch(\n    //   updateBoard({\n    //     _id: '64f39d8079cb8e45103583f2',\n    //     title: 'Board update',\n    //     icon: 'icon-colors',\n    //     background: 'background1',\n    //   })\n    // );\n    // 4 Получить все Boards\n    // dispatch(getAllBoards());\n    // 5 Получить все Boards\n    // dispatch(getBoardById('64f39de379cb8e4510358425'));\n    // ============================================================= Column\n    // 1. Создать Column\n    // dispatch(\n    //   addColumn({\n    //     title: 'New Column',\n    //     board: '64f3ccb879cb8e4510359091',\n    //   })\n    // );\n    // 2. Удалить Column (передать id колонки)\n    // dispatch(deleteColumn('64f3cd3c79cb8e45103590af'));\n    // 3 Обновить Column\n    // dispatch(\n    //   updateColumn({ id: '64f3a60f79cb8e45103586b0', title: 'New Column 1' })\n    // );\n    // 4 Получить все Column\n    // dispatch(getColumns());\n    // 5 Получить колонку по id\n    // dispatch(getColumnById('64f3a60f79cb8e45103586b0'));\n    // =============================================================== Tasks\n    // 1. Создать Task\n    // dispatch(\n    //   addTask({\n    //     title: 'New Task 1',\n    //     taskOwner: '64f3b37f79cb8e4510358ae7',\n    //     description: 'task description',\n    //   })\n    // );\n    // 2. Удалить Task (передать id колонки)\n    // dispatch(deleteTask('64f3a6ba79cb8e451035877c'));\n    // 3 Обновить Task\n    // dispatch(\n    //   updateTask({\n    //     taskId: '64f237418ad71f5d5364dc4f',\n    //     title: 'Linda',\n    //     description: '',\n    //     priority: '',\n    //     deadLine: '',\n    //   })\n    // );\n    // 4 Получить все Tsks\n    // dispatch(getTasks('64f3b37f79cb8e4510358ae7'));\n  };\n\n  console.log('allBoards :>>>>>>>>>>>>>>>>>> ', allBoards);\n  console.log('allColumns :>>>>>>>>>>>>>>>>> ', allColumns);\n  console.log('allTasks :>>>>>>>>>>>>>>>>> ', allTasks);\n\n  if (!boardById) return;\n\n  const { title } = boardById;\n\n  const onAddColumn = () => {\n    console.log('Add Column click');\n  };\n\n  return (\n    <section className={styles.KkSectionMainDashboard}>\n      <Filters className={styles.KkFilters} titleBoard={title} />\n      <button onClick={click}>click</button>\n\n      <ul className={styles.KkColums}>\n        {allColumns.map(({ _id, title }) => (\n          <li key={_id}>\n            <TaskColumn\n              className={styles.KkTaskColumn}\n              titleCards={title}\n              idColumn={_id}\n            />\n            <p>id Column: {_id}</p>\n          </li>\n        ))}\n        <BtnAddColumn\n          className={styles.KkBtnAddColumnMain}\n          title={'Add column'}\n          theme={'light'}\n          onClick={onAddColumn}\n        />\n      </ul>\n    </section>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import styles from 'styles/index.module.scss';\nimport { getAllBoards } from 'redux/board/boardOperations';\n// import { MainDashboard } from 'components/MainDashboard/MainDashboard';\n// import EditProfile from 'components/EditProfile/EditProfile';\n// import { useAuth } from 'hooks';\nimport AddBoard from './testAddBoard';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\n\n// import { AddCard } from 'components/AddCard';\n// import { Card } from 'components/Card';\n// import NewBoard from 'components/ModalBoard/NewBoard';\n// import { PopColumn } from 'components/PopColumn';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  // const { user } = useAuth();\n  // console.log(user)\n  const statE = useSelector(state => state);\n  console.log(statE);\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n  return (\n    <section>\n      <div>\n        <MainDashboard />\n        {/* <EditProfile/> */}\n        <AddBoard />\n        {/* <AddCard /> */}\n        {/* <Card /> */}\n        {/* <NewBoard /> */}\n        {/* <PopColumn /> */}\n      </div>\n    </section>\n  );\n};\n//   return (\n//     <section className={styles.YMScreenReg}>\n//       <div className={styles.AfWelcomRegWr}>\n//         <MainDashboard />\n//         {/* <EditProfile/> */}\n//         <AddBoard />\n//         {/* <AddCard /> */}\n//         {/* <Card /> */}\n//         {/* <NewBoard /> */}\n//         {/* <PopColumn /> */}\n//       </div>\n//     </section>\n//   );\n// };\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>\n        <ScreensPage />\n      </div>\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["_useState","useState","_useState2","_slicedToArray","themeActive","setThemeActive","_useBoards","useBoards","allBoards","boardById","user","useAuth","dispatch","useDispatch","_useState3","title","icon","background","_useState4","valueInputUpdate","setvalueInputUpdate","_useState5","_useState6","avatarURL","setAvatarURL","_useState7","_useState8","currentImage","setCurrentImage","useEffect","handleChange","event","_event$target","target","name","value","prevBoard","_objectSpread","_defineProperty","handleClickTheme","theme","updateTheme","_jsxs","children","className","scss","_jsx","type","onClick","width","height","href","concat","sprite","style","position","onChange","file","reader","FileReader","onload","e","result","readAsDataURL","handleFileChange","currentTarget","files","accept","alt","src","srcSet","length","display","gap","map","_ref","_id","padding","border","getBoardById","deleteBoards","onSubmit","preventDefault","form","_event$target$element2","elements","dataBoard","console","log","updateBoard","reset","styles","color","autoFocus","placeholder","required","_event$target$element","addBoards","BtnAddColumn","clsx","SvgSprite","Filters","titleBoard","AddCard","modalTitle","id","cardTitle","description","priority","deadline","modalBtnTitle","titleValue","setTitleValue","descriptionValue","setDescriptionValue","selectedPriority","setSelectedPriority","isCalendarOpen","setIsCalendarOpen","_useState9","dayjs","_useState10","selectedDate","setSelectedDate","dateFormat","format","priorityStyles","low","indigo","medium","pink","high","lightGreen","without","grey","inputTitle","trim","inputDescription","inputPriority","inputDeadline","cardData","nanoid","autoComplete","defaultValue","Object","keys","Radio","item","checked","inputProps","sx","fontSize","backgroundColor","borderRadius","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","open","onClose","date","disablePast","outsideCurrentMonth","dayOfWeekFormatter","day","slice","toUpperCase","slots","openPickerButton","slotProps","calendarHeader","fontFamily","fontWeight","letterSpacing","marginLeft","transform","top","left","right","marginTop","marginBottom","paddingLeft","paddingRight","previousIconButton","stroke","nextIconButton","textField","fullWidth","variant","size","InputProps","disableUnderline","endAdornment","InputAdornment","cursor","edge","getBgColor","isModalOpen","setIsModalOpen","deadlineIsToday","borderLeftColor","Modal","isOpen","BtnAddCard","TitleCards","selectColumns","state","columns","allColumns","selectColumnById","columnById","selectTasks","tasks","allTasks","useColumns","useSelector","TaskColumn","titleCards","idColumn","themeColor","getTasks","_ref2","Card","MainDashboard","idBoard","_useColumns","getColumns","getAllBoards","statE","AddBoard","_Fragment","ScreensPage"],"sourceRoot":""}