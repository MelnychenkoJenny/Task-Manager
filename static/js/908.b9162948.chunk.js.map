{"version":3,"file":"static/js/908.b9162948.chunk.js","mappings":"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","sources":["components/MainDashboard/BtnAddColumn.jsx","components/MainDashboard/Filters.jsx","components/AddCard/AddCard.jsx","components/Card/Card.jsx","components/MainDashboard/BtnAddCard.jsx","components/MainDashboard/TitleCards.jsx","redux/column/columnSelectors.js","redux/task/taskSelectors.js","hooks/useColumns.js","components/MainDashboard/TaskColumn.jsx","components/MainDashboard/MainDashboard.jsx","components/ScreensPage/testAddBoard.jsx","components/ScreensPage/ScreensPage.jsx","pages/HomePage.jsx"],"sourcesContent":["// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddColumn = ({ className, title, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnColumn, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusColumn, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\nexport const Filters = ({ className, titleBoard }) => {\n  const onFilters = () => {\n    console.log('Filters ckick');\n  };\n\n  return (\n    <div className={className}>\n      <div className={styles.KkWrapFilters}>\n        <h2 className={styles.KkTitle}>{titleBoard}</h2>\n\n        <button className={styles.KkBtnFilters} onClick={onFilters}>\n          <svg width=\"16px\" height=\"16px\">\n            <use href={`${SvgSprite}#icon-filter`}></use>\n          </svg>\n\n          <p>Filters</p>\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n// import { useDispatch } from 'react-redux';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport { useAuth } from 'hooks';\n\nimport { nanoid } from 'nanoid';\nimport { indigo, pink, lightGreen, grey } from '@mui/material/colors';\nimport { Radio, InputAdornment } from '@mui/material';\n\nimport dayjs from 'dayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\n\n\n\nexport const AddCard = ({ modalTitle, id, cardTitle, description, priority, deadline, modalBtnTitle }) => {\n  // const dispatch = useDispatch();\n  const { user } = useAuth();\n  // import {\n  //   addBoards,\n  //   deleteBoards,\n  //   getBoardById,\n  //   updateBoard,\n  // } from 'redux/board/boardOperations';\n\n\n  const [titleValue, setTitleValue] = useState(cardTitle); // для редагування\n  const [descriptionValue, setDescriptionValue] = useState(description); // для редагування\n  const [selectedPriority, setSelectedPriority] = useState(priority ? priority : 'without');\n  const [isCalendarOpen, setIsCalendarOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(deadline ? dayjs(deadline, 'DD/MM/YYYY') : dayjs()); // dayjs() - currentDate\n  //selectedDate = M {$L: 'en', $u: undefined, $d: Tue Aug 29 2023 08:05:53 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n  // deadline ? dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\") : dayjs()\n\n  // console.log(deadline) //01/09/2023\n  // console.log(dayjs(deadline)) // M {... Mon Jan 09 2023 00:00:00 ...} - міняє день і місяць місцями\n  // console.log(dayjs(deadline, 'DD/MM/YYYY')); // M {... Fri Sep 01 2023 00:00:00 ...} - тепер все Ок\n  // Тепер бібліотека Material UA застосує формат \"dddd, MMMM D\" і отримаємо те, що треба:\n  // console.log(dayjs(deadline, 'DD/MM/YYYY').format(\"dddd, MMMM D\")); // Thursday, August 31\n  \n\n  // \"Today, September 01\" або \"Saturday, September 02\"\n  const dateFormat = dayjs(selectedDate).format(\"dddd, MMMM D\") === dayjs().format(\"dddd, MMMM D\") ? '[Today,] MMMM D' : \"dddd, MMMM D\";\n\n\n  const handleFormSubmit = event => { // відправка даних\n    event.preventDefault();\n\n    const inputTitle = event.target.elements.title.value.trim();\n    const inputDescription = event.target.elements.description.value.trim();\n    const inputPriority = event.target.elements.priority.value;\n    const inputDeadline = dayjs(selectedDate).format('DD/MM/YYYY'); //   29/11/2023\n\n    const cardData = {\n      'id': id ? id : nanoid(), // якщо id є, то його передамо для редагування - пут-запиту  \n      'title': inputTitle, \n      'description': inputDescription, \n      'priority': inputPriority,\n      'deadline': inputDeadline,\n    }\n\n    console.log(cardData);\n\n    // dispatch(addBoards(cardData));  // відправка на бекенд, а потім в стор редакса\n\n    event.target.reset();\n  };\n\n  // --------------- пріоритетність ----------------------\n  \n  const controlProps = (item) => ({ // low, medium, high, without\n      value: item,\n      onChange: (e) => setSelectedPriority(e.target.value),\n      checked: selectedPriority === item,\n      name: 'priority',\n      inputProps: { 'aria-label': item },\n  });\n\n  const priorityStyles = {\n      low: indigo[200],\n      medium: pink[200],\n      high: lightGreen[200],\n      without: grey[400],\n  };\n\n  \n\n  return (\n    <div className={scss.OBAddContainer} data-theme={user.theme}>\n      <h4 className={scss.OBAddTitle}>{modalTitle}</h4>\n      <form onSubmit={handleFormSubmit} autoComplete=\"off\">\n        <label>\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Title\"\n            autoFocus\n            required\n            className={scss.OBAddInput}\n            defaultValue={titleValue} // для редагування\n            onChange={(e) => setTitleValue(e.target.value)}  // для редагування\n          />\n        </label>\n        <label>\n          <textarea\n            type=\"text\"\n            name=\"description\"\n            placeholder=\"Description\"\n            className={`${scss.OBAddInput} ${scss.OBAddDescription}`}\n            defaultValue={descriptionValue} // для редагування\n            onChange={(e) => setDescriptionValue(e.target.value)}  // для редагування\n          />\n        </label>\n\n        <div className={scss.OBAddlabel}> \n            Label color \n          <div className={scss.OBAddRadioGroup}>  \n            {Object.keys(priorityStyles).map((priority) => ( //['low', 'medium', 'high', 'without']\n              <Radio className={scss.OBAddradioBtn}\n                key={priority}\n                {...controlProps(priority)}\n                sx={{\n                  color: priorityStyles[priority],\n                  '&.Mui-checked': {\n                    color: priorityStyles[priority],\n                  },\n                  '&.Mui-checked .MuiSvgIcon-root': {\n                    fontSize: '17px',\n                  },\n                  '&:not(.Mui-checked) .MuiSvgIcon-root': {\n                    fontSize: '14px',\n                    backgroundColor: priorityStyles[priority],\n                    borderRadius: '50%',\n                  },\n                }}\n              />\n            ))}\n          </div>\n        </div>\n\n        <div>\n          <LocalizationProvider dateAdapter={AdapterDayjs}> \n          {/* dateAdapter={AdapterDayjs} - вказуємо, що під капотом використовуємо бібліотеку Day.js (її методи) */}\n            <DatePicker\n              open={isCalendarOpen}\n              onClose={() => setIsCalendarOpen(false)} // закриття календаря\n              onChange={(date) => setSelectedDate(date)}   //Material UA в date записує обрану з календаря дату \n              // M {$L: 'en', $u: undefined, $d: Fri Sep 01 2023 09:13:29 GMT+0300 (за східноєвропейським літнім часом), $x: {…}, $y: 2023, …}\n              value={selectedDate}\n              format= {dateFormat} // приймає рядок\n              disablePast={true}   // минулі дати не обируться\n              outsideCurrentMonth={true} // початок наступного місяця невидимий\n              dayOfWeekFormatter={(day) => day.slice(0, 2).toUpperCase()} // видимі перші 2 літери назви дня тижня\n              sx={{\n                // backgroundColor: 'red',\n                display: 'inline', // прибирає нижній паддінг інпута \n              }}\n              slots={{\n                openPickerButton: () => null, // приховуємо дефолтну кнопку-іконку календаря\n              }}\n              slotProps={{\n                // popper: { '&.MuiPickersPopper-root': {border: '4px solid yellow'}, },\n                calendarHeader: {\n                  sx: {\n                    '.MuiPickersCalendarHeader-root': {\n                       position: 'relative',\n                    },\n                    '.MuiPickersCalendarHeader-labelContainer': { // це тільки місяць і рік\n                        // backgroundColor: 'green',\n                        fontFamily: 'Poppins, sans-serif',\n                        fontSize: '16px',\n                        fontWeight: 500,\n                        letterSpacing: '-0.32px',\n                        display: \"grid\", // тепер місяць і рік центровані\n                    },\n                    '.MuiPickersCalendarHeader-label': {\n                      // backgroundColor: 'brown',\n                      display: 'inline-block',\n                      marginLeft: '50%',\n                      transform: 'translateX(-50%)',\n                    },\n                    '.MuiPickersCalendarHeader-switchViewButton': {\n                        display: 'none', // прибираємо стрілку вниз поряд з місяцем і роком\n                    },\n                    // '.MuiPickersArrowSwitcher-root': { // 2 кнопки в календарі: < >\n                        // position: 'absolute',\n                        // top: '10px',\n                    //     display: 'flex',\n                    //     justifyContent: \"space-between\", // по краям\n                    // },\n                    '.MuiIconButton-edgeEnd': { // кнопка <\n                      position: 'absolute',\n                      top: '10px',\n                      left: '3px',\n                    },\n                    '.MuiIconButton-edgeStart': { // кнопка >\n                      position: 'absolute',\n                      top: '10px',\n                      right: '3px',\n                    },\n                  },\n                  style: {\n                    marginTop: '18px',\n                    marginBottom: '14px',\n                    display: 'inline',\n                    paddingLeft: '18px',\n                    paddingRight: '18px',\n                    // backgroundColor: 'red', //працює\n                  },\n                },\n\n                previousIconButton: { \n                  sx: { stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', },\n                },\n                nextIconButton: { \n                  sx: { stroke: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', },\n                },\n\n                textField: {\n                  fullWidth: false,\n                  onClick: () => setIsCalendarOpen(true), // інпут стає клікабельним; по кліку відкривається календар (picker)\n                  variant: 'standard',\n                  size: 'small',\n                  InputProps: {\n                    disableUnderline: true,  // прибирає дефолтний нижній бордер, встановлений variant: 'standard'\n                    'aria-label': 'deadline',\n                    style: {\n                      fontSize: '14px', \n                      fontFamily: 'Poppins, sans-serif',\n                      color: user.theme === 'violet' ? '#5255BC' : '#BEDBB0', // колір тексту\n                      fontWeight: 500,\n                      letterSpacing: '-0.28px',                \n                    },\n                    endAdornment: (   // розташування іконки - в кінці інпуту (є і startAdornment)\n                     <InputAdornment position=\"start\" sx={{ cursor: 'pointer'}}>\n                        <svg className={scss.OBAddDateIcon} width='18px'>\n                            <use \n                              href={SvgSprite + '#icon-chevron-down'} // стрілка вниз в календарі  \n                              aria-label=\"open calendar\" \n                              edge=\"start\" \n                            />       \n                        </svg>\n                     </InputAdornment>\n                    ),\n                  },\n                },              \n              }}\n            >\n            </DatePicker>            \n          </LocalizationProvider>\n        </div>\n\n        <button className={scss.OBAddSubmitBtn}>\n          <div className={scss.OBAddIconWrapper}>\n            <svg className={scss.OBAddSubmitIcon}>\n              <use href={SvgSprite + '#icon-plus'} />\n            </svg>\n          </div>\n          {modalBtnTitle}\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// export default AddCard;","import { useState } from 'react';\n// import { useDispatch } from 'react-redux'\nimport dayjs from 'dayjs';\nimport { Modal } from '../Modal/Modal'\nimport { AddCard } from '../AddCard/AddCard';\nimport scss from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\n\n\nconst getBgColor = priority => {\n  switch (priority) {\n   case 'low':\n     return '#8FA1D0';\n   case 'medium':\n     return 'rgba(224, 156, 181, 1)';\n   case 'high':\n     return '#BEDBB0';\n   case 'without':\n     return 'rgba(22, 22, 22, 0.30)';\n   default:\n    break;\n  }    \n }\n\n\nconst Card = ({ id, cardTitle, description, priority, deadline }) => {\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n   // const dispatch = useDispatch();\n   const deadlineIsToday = dayjs().format('DD/MM/YYYY') === deadline; // dayjs().format('DD/MM/YYYY') - сьогоднішня дата у визначеному форматі\n   \n   const handleOpenModal = () => {\n     setIsModalOpen(true);\n   };\n\n   const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div style={{ borderLeftColor: getBgColor(priority) }} className={scss.OBCardContainer}>\n      <h4 className={scss.OBCardTitle}>{cardTitle}</h4>\n      <p className={scss.OBCardDescription}>{description}</p>\n\n      <hr className={scss.OBCardSeparator} />\n\n      <div className={scss.OBCardFooterContainer}>\n        <table className={scss.OBCardValuesContainer}>\n          <thead>\n            <tr>\n              <th className={scss.OBCardProreties}>Priority</th>\n              <th className={scss.OBCardProreties}>Deadline</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>\n                <div style={{ backgroundColor: getBgColor(priority) }} className={scss.OBCardPriorityCircle}></div>\n              </td>\n              <td className={scss.OBCardDate}>{deadline}</td>\n            </tr>\n          </tbody>\n        </table>\n\n        {/* --------------------------- іконки --------------------------- */}\n\n        <div className={scss.OBCardIconsWrapper}>\n          {deadlineIsToday &&\n            <svg className={scss.OBCardBellIcon} width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-bell'} />\n            </svg>            \n          }\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='edit task' onClick={handleOpenModal}>\n            <svg width=\"16\" height=\"16\"> \n              <use href={SvgSprite + '#icon-pencil'} />\n            </svg>            \n          </button>\n          {isModalOpen && (\n            <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n                <AddCard modalTitle={'Edit card'} id={id} cardTitle={cardTitle} description={description} priority={priority} deadline={deadline} modalBtnTitle={'Edit'} /> \n            </Modal>             \n          )}\n          {/* <button type='button' className={scss.OBCardBtnIcon} aria-label='move task to another column'>\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-arrow'} />\n            </svg>\n          </button > */}\n          <button type='button' className={scss.OBCardBtnIcon} aria-label='delete task' /*onClick={() => dispatch(deleteCard(id))}*/ >\n            <svg width=\"16\" height=\"16\">\n              <use href={SvgSprite + '#icon-trash'} />\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n\nexport const BtnAddCard = ({ title, className, theme, onClick }) => {\n  return (\n    <div className={className}>\n      <button\n        className={clsx(styles.KkBtnCard, styles[theme])}\n        onClick={onClick}\n      >\n        <div className={clsx(styles.KkIconPlusCard, styles[theme])}>\n          <svg className={clsx(styles[theme])} width=\"14px\" height=\"14px\">\n            <use href={`${SvgSprite}#icon-plus`}></use>\n          </svg>\n        </div>\n        <p className={clsx(styles[theme])}>{title}</p>\n      </button>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport SvgSprite from 'images/sprite.svg';\nimport clsx from 'clsx';\n// import { cleanDigitSectionValue } from '@mui/x-date-pickers/internals/hooks/useField/useField.utils';\n\nexport const TitleCards = ({ className, title, theme }) => {\n  const onIconPensil = () => {\n    console.log('icon pensil click');\n  };\n\n  const onIconTrash = () => {\n    console.log('icon trash click');\n  };\n\n  return (\n    <div className={className}>\n      <div className={clsx(styles.KkWrapTitleCards, styles[theme])}>\n        <p className={clsx(styles[theme])}> {title}</p>\n        <div className={styles.KkSvgTitleCards}>\n          <button className={styles.KkBtnIcons} onClick={onIconPensil}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-pencil`}></use>\n            </svg>\n          </button>\n\n          <button className={styles.KkBtnIcons} onClick={onIconTrash}>\n            <svg className={clsx(styles[theme])} width=\"16px\" height=\"16px\">\n              <use href={`${SvgSprite}#icon-trash`}></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nexport const selectColumns = state => state.columns.allColumns;\nexport const selectColumnById = state => state.columns.columnById;\n","// 💙💛 Kostiantyn Koshyk\nexport const selectTasks = state => state.tasks.allTasks;\nexport const selectTaskById = state => state.tasks.taskById;\n","import { useSelector } from 'react-redux';\nimport { selectColumnById, selectColumns } from 'redux/column/columnSelectors';\nimport { selectTasks } from 'redux/task/taskSelectors';\n\nexport const useColumns = () => {\n  const allColumns = useSelector(selectColumns);\n  const columnById = useSelector(selectColumnById);\n  const allTasks = useSelector(selectTasks);\n\n  return {\n    allColumns,\n    columnById,\n    allTasks,\n  };\n};\n// import { useBoards } from 'hooks';\n// const { allBoards, boardById } = useBoards();\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport { Modal } from '../Modal/Modal';\nimport { Card } from 'components/Card';\nimport { AddCard } from 'components/AddCard';\nimport { BtnAddCard } from './BtnAddCard';\nimport { TitleCards } from './TitleCards';\nimport { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { /*addTask,*/ getTasks } from 'redux/task/taskOperations';\nimport { useColumns } from 'hooks/useColumns';\n\nexport const TaskColumn = ({ className, titleCards, idColumn }) => {\n  const [themeColor] = useState('light');\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { allTasks } = useColumns();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getTasks(idColumn));\n  }, [dispatch, idColumn]);\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <div className={className}>\n      <TitleCards\n        className={styles.TitleCards}\n        title={titleCards}\n        theme={themeColor}\n      />\n\n      <ul className={styles.KkCards}>\n        {allTasks &&\n          allTasks.map(({ _id, title, description, priority, deadline }) => (\n            <li key={_id}>\n              <Card\n                cardTitle={title}\n                description={description}\n                priority={priority}\n                deadline={deadline}\n              />\n              <p>id Task: {_id}</p>\n            </li>\n          ))}\n      </ul>\n\n      <BtnAddCard\n        className={styles.KkBtnAddCard}\n        title={'Add another card'}\n        onClick={handleOpenModal}\n        theme={themeColor}\n      />\n      {isModalOpen && (\n        <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n          <AddCard modalTitle={'Add card'} modalBtnTitle={'Add'} />\n        </Modal>\n      )}\n    </div>\n  );\n};\n","// 💙💛 Kostiantyn Koshyk\nimport styles from 'styles/index.module.scss';\nimport { BtnAddColumn } from './BtnAddColumn';\nimport { Filters } from './Filters';\nimport { TaskColumn } from './TaskColumn';\nimport { useEffect } from 'react';\nimport { useBoards } from 'hooks';\nimport { useDispatch, /*useSelector*/ } from 'react-redux';\nimport {\n  /*addBoards,\n  deleteBoards,*/\n  getAllBoards,\n  getBoardById,\n /* updateBoard,*/\n} from 'redux/board/boardOperations';\nimport {\n  /*addColumn,\n  deleteColumn,\n  getColumnById,*/\n  getColumns,\n /* updateColumn,*/\n} from 'redux/column/columnOperations';\nimport { useColumns } from 'hooks/useColumns';\nimport {\n /* addTask,\n  deleteTask,*/\n  getTasks,\n  /*updateTask,*/\n} from 'redux/task/taskOperations';\n// import { colors } from '@mui/material';\n\nexport const MainDashboard = () => {\n  const idBoard = '64f3ccb879cb8e4510359091'; // этот id прилетает из сайтбара !!!!!!!!!!!!!\n  const { /*allBoards,*/ boardById } = useBoards();\n  const { allColumns, /*columnById, allTasks*/ } = useColumns();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getBoardById(idBoard));\n    dispatch(getColumns(idBoard));\n    dispatch(getAllBoards());\n    dispatch(getTasks('64f3b37f79cb8e4510358ae7'));\n  }, [dispatch]);\n\n  const click = () => {\n    // ======================================================== Board\n    // 1. Создать Board\n    // dispatch(\n    //   addBoards({\n    //     title: 'New Board',\n    //     icon: 'icon-project',\n    //     background: 'background2',\n    //   })\n    // );\n    // // 2. Удалить Board\n    // dispatch(deleteBoards('64f39de379cb8e4510358425'));\n    // 3 Обновить Board\n    // dispatch(\n    //   updateBoard({\n    //     _id: '64f39d8079cb8e45103583f2',\n    //     title: 'Board update',\n    //     icon: 'icon-colors',\n    //     background: 'background1',\n    //   })\n    // );\n    // 4 Получить все Boards\n    // dispatch(getAllBoards());\n    // 5 Получить все Boards\n    // dispatch(getBoardById('64f39de379cb8e4510358425'));\n    // ============================================================= Column\n    // 1. Создать Column\n    // dispatch(\n    //   addColumn({\n    //     title: 'New Column',\n    //     board: '64f3ccb879cb8e4510359091',\n    //   })\n    // );\n    // 2. Удалить Column (передать id колонки)\n    // dispatch(deleteColumn('64f3cd3c79cb8e45103590af'));\n    // 3 Обновить Column\n    // dispatch(\n    //   updateColumn({ id: '64f3a60f79cb8e45103586b0', title: 'New Column 1' })\n    // );\n    // 4 Получить все Column\n    // dispatch(getColumns());\n    // 5 Получить колонку по id\n    // dispatch(getColumnById('64f3a60f79cb8e45103586b0'));\n    // =============================================================== Tasks\n    // 1. Создать Task\n    // dispatch(\n    //   addTask({\n    //     title: 'New Task 1',\n    //     taskOwner: '64f3b37f79cb8e4510358ae7',\n    //     description: 'task description',\n    //   })\n    // );\n    // 2. Удалить Task (передать id колонки)\n    // dispatch(deleteTask('64f3a6ba79cb8e451035877c'));\n    // 3 Обновить Task\n    // dispatch(\n    //   updateTask({\n    //     taskId: '64f237418ad71f5d5364dc4f',\n    //     title: 'Linda',\n    //     description: '',\n    //     priority: '',\n    //     deadLine: '',\n    //   })\n    // );\n    // 4 Получить все Tsks\n    // dispatch(getTasks('64f3b37f79cb8e4510358ae7'));\n  };\n\n  // console.log('allBoards :>>>>>>>>>>>>>>>>>> ', allBoards);\n  // console.log('allColumns :>>>>>>>>>>>>>>>>> ', allColumns);\n  // console.log('allTasks :>>>>>>>>>>>>>>>>> ', allTasks);\n\n  if (!boardById) return;\n\n  const { title } = boardById;\n\n  const onAddColumn = () => {\n    console.log('Add Column click');\n  };\n\n  return (\n    <section className={styles.KkSectionMainDashboard}>\n      <Filters className={styles.KkFilters} titleBoard={title} />\n      <button onClick={click}>click</button>\n\n      <ul className={styles.KkColums}>\n        {allColumns.map(({ _id, title }) => (\n          <li key={_id}>\n            <TaskColumn\n              className={styles.KkTaskColumn}\n              titleCards={title}\n              idColumn={_id}\n            />\n            <p>id Column: {_id}</p>\n          </li>\n        ))}\n        <BtnAddColumn\n          className={styles.KkBtnAddColumnMain}\n          title={'Add column'}\n          theme={'light'}\n          onClick={onAddColumn}\n        />\n      </ul>\n    </section>\n  );\n};\n","import styles from 'styles/index.module.scss';\nimport scss from '../../styles/index.module.scss';\nimport sprite from '../../images/sprite.svg';\n\n// import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport {\n  addBoards,\n  deleteBoards,\n  getBoardById,\n  updateBoard,\n} from 'redux/board/boardOperations';\nimport { useBoards } from 'hooks';\nimport { useEffect, useState } from 'react';\n// import { object, string } from 'yup';\nimport { useAuth } from 'hooks';\nimport { updateTheme } from 'redux/auth/authOperations';\n\n// const initialValues = {\n//   title: '',\n//   icon: '',\n//   background: '',\n// };\n\n// const boardSchema = object({\n//   title: string().required('Name is required'),\n//   icon: string(),\n//   background: string(),\n// });\n\nconst AddBoard = () => {\n  const [themeActive, setThemeActive] = useState(false);\n\n  const { allBoards, boardById } = useBoards();\n  const { user } = useAuth();\n\n  const dispatch = useDispatch();\n  const [valueInputUpdate, setvalueInputUpdate] = useState({\n    title: '',\n    icon: '',\n    background: '',\n  });\n  const [avatarURL, setAvatarURL] = useState('');\n  const [currentImage, setCurrentImage] = useState(user.avatarURL);\n\n  useEffect(() => {\n    setvalueInputUpdate({\n      title: boardById.title,\n      icon: boardById.icon,\n      background: boardById.background,\n    });\n  }, [boardById]);\n\n  // const handleSubmit = async (e) => {\n  // console.log(e)\n  // const dataBoard = { ...values };\n  // console.log(1, dataBoard);\n  // if (boards) {\n  //   const res = await dispatch(addBoards(dataBoard));\n  //   if (res.error) {\n  //     console.log(res.payload);\n  //   }\n  //   return res;\n  // }\n  // resetForm();\n  // console.log(3);\n  // };\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    dispatch(addBoards(dataBoard));\n    form.reset();\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setvalueInputUpdate(prevBoard => ({\n      ...prevBoard,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmitUpdate = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { title, icon, background } = event.target.elements;\n\n    const dataBoard = {\n      _id: boardById._id,\n      title: title.value,\n      icon: icon.value,\n      background: background.value,\n    };\n    console.log(dataBoard);\n    dispatch(updateBoard(dataBoard));\n    form.reset();\n  };\n\n  function handleFileChange(event) {\n    const file = event;\n    if (!file) {\n      return;\n    }\n    setAvatarURL(file);\n    const reader = new FileReader();\n\n    reader.onload = function (e) {\n      setCurrentImage(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  const handleClick = () => {\n    setThemeActive(!themeActive);\n  };\n\n  const handleClickTheme = theme => {\n    if (theme === 'light' || theme === 'dark' || theme === 'violet') {\n      if(theme === user.theme && !theme) {\n        return\n      }\n      dispatch(updateTheme(theme));\n    }\n  };\n\n  return (\n    <div>\n      <div className={scss.dropdownThemeWrap}>\n        <div className={scss.themeHeaderWrap}>\n          <p className={scss.themeText}>Theme</p>\n          <button\n            type=\"button\"\n            className={scss.btnThemeOpen}\n            onClick={handleClick}\n          >\n            <svg className={scss.svgTheme} width=\"16\" height=\"16\">\n              <use href={`${sprite}#icon-chevron-down`}></use>\n            </svg>\n          </button>\n        </div>\n        {themeActive && (\n          <div\n            className={scss.dropdownThemeMenu}\n            style={{ position: 'relative' }}\n          >\n            <ul className={scss.dropdownThemeList}>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('light');\n                }}\n              >\n                Light\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('dark');\n                }}\n              >\n                Dark\n              </li>\n              <li\n                className={scss.themeMenuItem}\n                onClick={() => {\n                  handleClickTheme('violet');\n                }}\n              >\n                Violet\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n\n      <div>{boardById && <p>Title active board:{boardById.title}</p>}</div>\n      <input\n        type=\"file\"\n        name=\"avatarURL\"\n        onChange={event => {\n          handleFileChange(event.currentTarget.files[0]);\n        }}\n        accept=\"image/*,.png,.jpg,.gif,.web\"\n      ></input>\n      <img\n        alt=\"user avatar\"\n        src={currentImage || avatarURL}\n        srcSet={currentImage || `${avatarURL} 1x, ${avatarURL} 2x`}\n      />\n\n      {allBoards?.length !== 0 && (\n        <ul style={{ display: 'flex', gap: '20px' }}>\n          {allBoards?.map(({ title, _id, icon, background }) => {\n            return (\n              <li\n                key={_id}\n                style={{ padding: '5px', border: 'grey solid 2px' }}\n                onClick={() => dispatch(getBoardById(_id))}\n              >\n                <p>Title: {title}</p>\n                <p>{icon}</p>\n                <p>{background}</p>\n                <button onClick={() => dispatch(deleteBoards(_id))}>\n                  DELETE\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      <form onSubmit={handleSubmitUpdate} className={styles.AfWelcomRegForm}>\n        <h2 style={{ color: 'white' }}>Update board</h2>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder={'Title'}\n          value={valueInputUpdate.title || ''}\n          onChange={handleChange}\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n          value={valueInputUpdate.icon || ''}\n          onChange={handleChange}\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n          value={valueInputUpdate.background || ''}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Update board\n        </button>\n      </form>\n\n      <form onSubmit={handleSubmit} className={styles.AfWelcomRegForm}>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Title\"\n          required\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"icon\"\n          placeholder=\"icon\"\n        ></input>\n        <input\n          autoFocus\n          className={styles.AfWelcomRegFormInput}\n          type=\"text\"\n          name=\"background\"\n          placeholder=\"background\"\n        ></input>\n        <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n          Add new board\n        </button>\n      </form>\n\n      {/* <Formik\n        validationSchema={boardSchema}\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n      >\n        {({ handleChange, values }) => (\n          <Form className={styles.AfWelcomRegForm}>\n            <div className={styles.AfWelcomRegFormInCn}>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  autoFocus\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  onChange={handleChange('title')}\n                  value={values.title || ''}\n                  required\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"icon\"\n                  placeholder=\"Icon\"\n                  onChange={handleChange('icon')}\n                  value={values.icon || ''}\n                />\n              </div>\n              <div className={styles.AfWelcomRegFormWrInp}>\n                <Field\n                  className={styles.AfWelcomRegFormInput}\n                  type=\"text\"\n                  name=\"background\"\n                  placeholder=\"background\"\n                  onChange={handleChange('background')}\n                  value={values.background || ''}\n                />\n              </div>\n            </div>\n            <ErrorMessage\n              className={styles.AfWelcomRegFormError}\n              name=\"password\"\n              component=\"div\"\n            />\n            <button type=\"submit\" className={styles.AfWelcomRegFormButton}>\n              Add new board\n            </button>\n          </Form>\n        )}\n      </Formik> */}\n    </div>\n  );\n};\nexport default AddBoard;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport styles from 'styles/index.module.scss';\nimport { getAllBoards } from 'redux/board/boardOperations';\nimport { MainDashboard } from 'components/MainDashboard/MainDashboard';\n// import EditProfile from 'components/EditProfile/EditProfile';\nimport { useAuth } from 'hooks';\nimport AddBoard from './testAddBoard';\n// import { AddCard } from 'components/AddCard';\n// import { Card } from 'components/Card';\n// import NewBoard from 'components/ModalBoard/NewBoard';\n// import { PopColumn } from 'components/PopColumn';\n\nconst ScreensPage = () => {\n  const dispatch = useDispatch();\n  const user = useAuth();\n  console.log(45465151, user)\n  useEffect(() => {\n    dispatch(getAllBoards());\n  }, [dispatch]);\n\n\n  return (\n    <section className={styles.YMScreenReg}>\n      <div\n        className={styles.AfWelcomRegWr}\n      >\n        <MainDashboard />\n        {/* <EditProfile/> */}\n        <AddBoard />\n        {/* <AddCard /> */}\n        {/* <Card /> */}\n        {/* <NewBoard /> */}\n        {/* <PopColumn /> */}\n      </div>\n    </section>\n  );\n};\nexport default ScreensPage;\n","import ScreensPage from 'components/ScreensPage/ScreensPage';\n\nconst HomePage = () => {\n  return (\n    <>\n      <div>\n        <ScreensPage />\n      </div>\n    </>\n  );\n};\nexport default HomePage;\n"],"names":["BtnAddColumn","_ref","className","title","theme","onClick","_jsx","children","_jsxs","clsx","styles","width","height","href","concat","SvgSprite","Filters","titleBoard","console","log","AddCard","modalTitle","id","cardTitle","description","priority","deadline","modalBtnTitle","user","useAuth","_useState","useState","_useState2","_slicedToArray","titleValue","setTitleValue","_useState3","_useState4","descriptionValue","setDescriptionValue","_useState5","_useState6","selectedPriority","setSelectedPriority","_useState7","_useState8","isCalendarOpen","setIsCalendarOpen","_useState9","dayjs","_useState10","selectedDate","setSelectedDate","dateFormat","format","priorityStyles","low","indigo","medium","pink","high","lightGreen","without","grey","scss","onSubmit","event","preventDefault","inputTitle","target","elements","value","trim","inputDescription","inputPriority","inputDeadline","cardData","nanoid","reset","autoComplete","type","name","placeholder","autoFocus","required","defaultValue","onChange","e","Object","keys","map","Radio","_objectSpread","item","checked","inputProps","sx","color","fontSize","backgroundColor","borderRadius","LocalizationProvider","dateAdapter","AdapterDayjs","DatePicker","open","onClose","date","disablePast","outsideCurrentMonth","dayOfWeekFormatter","day","slice","toUpperCase","display","slots","openPickerButton","slotProps","calendarHeader","position","fontFamily","fontWeight","letterSpacing","marginLeft","transform","top","left","right","style","marginTop","marginBottom","paddingLeft","paddingRight","previousIconButton","stroke","nextIconButton","textField","fullWidth","variant","size","InputProps","disableUnderline","endAdornment","InputAdornment","cursor","edge","getBgColor","isModalOpen","setIsModalOpen","deadlineIsToday","borderLeftColor","Modal","isOpen","BtnAddCard","TitleCards","selectColumns","state","columns","allColumns","selectColumnById","columnById","selectTasks","tasks","allTasks","useColumns","useSelector","TaskColumn","titleCards","idColumn","themeColor","dispatch","useDispatch","useEffect","getTasks","_ref2","_id","Card","MainDashboard","idBoard","boardById","useBoards","getBoardById","getColumns","getAllBoards","themeActive","setThemeActive","_useBoards","allBoards","icon","background","valueInputUpdate","setvalueInputUpdate","avatarURL","setAvatarURL","currentImage","setCurrentImage","handleChange","_event$target","prevBoard","_defineProperty","handleClickTheme","updateTheme","sprite","file","reader","FileReader","onload","result","readAsDataURL","handleFileChange","currentTarget","files","accept","alt","src","srcSet","length","gap","padding","border","deleteBoards","form","_event$target$element2","dataBoard","updateBoard","_event$target$element","addBoards","AddBoard","_Fragment","ScreensPage"],"sourceRoot":""}